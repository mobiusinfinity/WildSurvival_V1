

// ============================================
// FILE: \Assets\WildSurvival\Editor\CompleteProjectRestructure\CompleteProjectRestructure.cs
// ============================================

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEditor;
using UnityEditor.PackageManager;

namespace WildSurvival.Editor.ProjectSetup
{
    public class CompleteProjectRestructure : EditorWindow
    {
        private Vector2 scrollPosition;
        private bool showDetails = true;
        private List<string> log = new List<string>();
        private int currentStep = 0;
        private int totalSteps = 15;

        // Code modification feature
        private string codeModificationScript = "";
        private Vector2 codeScrollPosition;
        private bool showCodeModification = false;

        [MenuItem("Tools/Wild Survival/? COMPLETE PROJECT RESTRUCTURE", priority = 0)]
        public static void ShowWindow()
        {
            var window = GetWindow<CompleteProjectRestructure>("Project Restructure");
            window.minSize = new Vector2(800, 600);
            window.Show();
        }

        private void OnGUI()
        {
            DrawHeader();
            DrawProgress();
            DrawActions();
            DrawCodeModificationSection();
            DrawLog();
        }

        private void DrawHeader()
        {
            EditorGUILayout.Space(10);

            var headerStyle = new GUIStyle(EditorStyles.boldLabel)
            {
                fontSize = 18,
                alignment = TextAnchor.MiddleCenter
            };

            EditorGUILayout.LabelField("?? WILD SURVIVAL - COMPLETE PROJECT RESTRUCTURE", headerStyle);
            EditorGUILayout.Space(5);

            EditorGUILayout.HelpBox(
                "This will completely restructure your project to AAA production standards.\n\n" +
                "• Clean, scalable architecture\n" +
                "• Optimized for team collaboration\n" +
                "• Performance-focused structure\n" +
                "• Industry-standard organization",
                MessageType.Info
            );
        }

        private void DrawProgress()
        {
            if (currentStep > 0)
            {
                EditorGUILayout.Space(10);
                float progress = (float)currentStep / totalSteps;
                EditorGUI.ProgressBar(EditorGUILayout.GetControlRect(GUILayout.Height(20)), progress,
                    $"Step {currentStep}/{totalSteps} - {(progress * 100):F0}%");
            }
        }

        private void DrawActions()
        {
            EditorGUILayout.Space(10);

            GUI.backgroundColor = new Color(0.2f, 0.8f, 0.2f);
            if (GUILayout.Button("?? EXECUTE COMPLETE RESTRUCTURE", GUILayout.Height(50)))
            {
                if (EditorUtility.DisplayDialog("Complete Project Restructure",
                    "This will completely reorganize your project structure.\n\n" +
                    "A backup will be created first.\n\n" +
                    "This process may take a few minutes.\n\n" +
                    "Continue?",
                    "Yes, Restructure Everything", "Cancel"))
                {
                    ExecuteCompleteRestructure();
                }
            }
            GUI.backgroundColor = Color.white;

            EditorGUILayout.Space(5);

            showDetails = EditorGUILayout.Foldout(showDetails, "Show Restructure Plan");

            if (showDetails)
            {
                EditorGUILayout.BeginVertical(EditorStyles.helpBox);
                EditorGUILayout.LabelField("Restructure Plan:", EditorStyles.boldLabel);
                EditorGUILayout.LabelField("1. Create backup");
                EditorGUILayout.LabelField("2. Create optimal folder structure");
                EditorGUILayout.LabelField("3. Move and organize all scripts");
                EditorGUILayout.LabelField("4. Set up assembly definitions");
                EditorGUILayout.LabelField("5. Configure project settings");
                EditorGUILayout.LabelField("6. Set up Git configuration");
                EditorGUILayout.LabelField("7. Create development tools");
                EditorGUILayout.LabelField("8. Optimize import settings");
                EditorGUILayout.EndVertical();
            }
        }

        private void DrawCodeModificationSection()
        {
            EditorGUILayout.Space(10);

            GUI.backgroundColor = new Color(0.5f, 0.5f, 1f);
            if (GUILayout.Button("?? CODE MODIFICATION TOOL", GUILayout.Height(35)))
            {
                showCodeModification = !showCodeModification;
            }
            GUI.backgroundColor = Color.white;

            if (showCodeModification)
            {
                EditorGUILayout.BeginVertical(EditorStyles.helpBox);
                EditorGUILayout.LabelField("Code Modification Script", EditorStyles.boldLabel);
                EditorGUILayout.HelpBox("Paste a modification script here to update code in existing files", MessageType.Info);

                codeScrollPosition = EditorGUILayout.BeginScrollView(codeScrollPosition, GUILayout.Height(200));
                codeModificationScript = EditorGUILayout.TextArea(codeModificationScript, GUILayout.ExpandHeight(true));
                EditorGUILayout.EndScrollView();

                EditorGUILayout.BeginHorizontal();

                if (GUILayout.Button("Execute Modifications", GUILayout.Height(30)))
                {
                    ExecuteCodeModifications();
                }

                if (GUILayout.Button("Load Example", GUILayout.Height(30)))
                {
                    LoadExampleModificationScript();
                }

                if (GUILayout.Button("Clear", GUILayout.Height(30)))
                {
                    codeModificationScript = "";
                }

                EditorGUILayout.EndHorizontal();
                EditorGUILayout.EndVertical();
            }
        }

        private void DrawLog()
        {
            if (log.Count == 0) return;

            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Operation Log:", EditorStyles.boldLabel);

            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition,
                EditorStyles.helpBox, GUILayout.Height(150));

            foreach (var entry in log)
            {
                EditorGUILayout.LabelField(entry, EditorStyles.miniLabel);
            }

            EditorGUILayout.EndScrollView();
        }

        private void ExecuteCompleteRestructure()
        {
            log.Clear();
            currentStep = 0;

            try
            {
                AssetDatabase.StartAssetEditing();

                // Step 1: Create Backup
                Step("Creating backup...", CreateBackup);

                // Step 2: Create Complete Folder Structure
                Step("Creating folder structure...", CreateCompleteFolderStructure);

                // Step 3: Move Existing Files
                Step("Moving existing files...", MoveExistingFiles);

                // Step 4: Create Assembly Definitions
                Step("Setting up assemblies...", CreateAssemblyDefinitions);

                // Step 5: Create Core Scripts
                Step("Creating core scripts...", CreateCoreScripts);

                // Step 6: Set Up Project Settings
                Step("Configuring project settings...", ConfigureProjectSettings);

                // Step 7: Create Editor Tools
                Step("Creating editor tools...", CreateEditorTools);

                // Step 8: Set Up Git
                Step("Setting up Git...", SetupGitConfiguration);

                // Step 9: Create Documentation
                Step("Creating documentation...", CreateDocumentation);

                // Step 10: Clean Up
                Step("Cleaning up...", CleanupProject);

                AssetDatabase.StopAssetEditing();
                AssetDatabase.Refresh();

                LogMessage("? RESTRUCTURE COMPLETE!");
                EditorUtility.DisplayDialog("Success",
                    "Project restructuring completed successfully!\n\n" +
                    "Your project is now organized to AAA production standards.",
                    "Excellent!");

                // Open the documentation
                Application.OpenURL("file:///" + Path.Combine(Application.dataPath,
                    "_Project/Documentation/README.md"));
            }
            catch (Exception e)
            {
                AssetDatabase.StopAssetEditing();
                Debug.LogError($"Restructure failed: {e}");
                EditorUtility.DisplayDialog("Error",
                    $"Restructuring failed:\n{e.Message}\n\nCheck console for details.",
                    "OK");
            }
        }

        private void Step(string description, Action action)
        {
            currentStep++;
            LogMessage($"Step {currentStep}/{totalSteps}: {description}");
            Repaint();

            try
            {
                action.Invoke();
                LogMessage($"  ? {description} completed");
            }
            catch (Exception e)
            {
                LogMessage($"  ? {description} failed: {e.Message}");
                throw;
            }
        }

        private void CreateBackup()
        {
            string backupPath = Path.Combine(Path.GetDirectoryName(Application.dataPath),
                $"Backup_{DateTime.Now:yyyyMMdd_HHmmss}");

            if (!Directory.Exists(backupPath))
            {
                Directory.CreateDirectory(backupPath);
            }

            // Copy essential folders
            if (Directory.Exists(Path.Combine(Application.dataPath, "_Project")))
            {
                CopyDirectory(Path.Combine(Application.dataPath, "_Project"),
                    Path.Combine(backupPath, "_Project"));
            }

            LogMessage($"  Backup created at: {backupPath}");
        }

        private void CreateCompleteFolderStructure()
        {
            // Root structure
            string[] rootFolders = {
                "Assets/_Project",
                "Assets/_DevTools",
                "Assets/_ThirdParty",
                "Assets/_Tests"
            };

            // Main project structure
            string[] projectFolders = {
                // Code Organization
                "Assets/_Project/Code/Runtime/Core",
                "Assets/_Project/Code/Runtime/Core/Interfaces",
                "Assets/_Project/Code/Runtime/Core/Events",
                "Assets/_Project/Code/Runtime/Core/Utilities",
                "Assets/_Project/Code/Runtime/Core/Constants",

                "Assets/_Project/Code/Runtime/Systems",
                "Assets/_Project/Code/Runtime/Systems/Inventory",
                "Assets/_Project/Code/Runtime/Systems/Crafting",
                "Assets/_Project/Code/Runtime/Systems/Vitals",
                "Assets/_Project/Code/Runtime/Systems/SaveLoad",
                "Assets/_Project/Code/Runtime/Systems/Time",
                "Assets/_Project/Code/Runtime/Systems/Weather",
                "Assets/_Project/Code/Runtime/Systems/Audio",

                "Assets/_Project/Code/Runtime/Gameplay",
                "Assets/_Project/Code/Runtime/Gameplay/Player",
                "Assets/_Project/Code/Runtime/Gameplay/AI",
                "Assets/_Project/Code/Runtime/Gameplay/Interactions",
                "Assets/_Project/Code/Runtime/Gameplay/Combat",
                "Assets/_Project/Code/Runtime/Gameplay/Building",

                "Assets/_Project/Code/Runtime/UI",
                "Assets/_Project/Code/Runtime/UI/HUD",
                "Assets/_Project/Code/Runtime/UI/Menus",
                "Assets/_Project/Code/Runtime/UI/Inventory",
                "Assets/_Project/Code/Runtime/UI/Crafting",
                "Assets/_Project/Code/Runtime/UI/Dialogue",

                "Assets/_Project/Code/Editor",
                "Assets/_Project/Code/Editor/Tools",
                "Assets/_Project/Code/Editor/Inspectors",
                "Assets/_Project/Code/Editor/Windows",
                "Assets/_Project/Code/Editor/Build",
                
                // Content
                "Assets/_Project/Content/Characters",
                "Assets/_Project/Content/Environment",
                "Assets/_Project/Content/Items",
                "Assets/_Project/Content/Effects",
                
                // Data
                "Assets/_Project/Data/Configs",
                "Assets/_Project/Data/Databases",
                "Assets/_Project/Data/Items",
                "Assets/_Project/Data/Recipes",
                
                // Resources
                "Assets/_Project/Resources/Prefabs",
                "Assets/_Project/Resources/Materials",
                "Assets/_Project/Resources/Textures",
                
                // Audio
                "Assets/_Project/Audio/Music",
                "Assets/_Project/Audio/SFX",
                "Assets/_Project/Audio/Voice",
                "Assets/_Project/Audio/Mixers",
                
                // Scenes
                "Assets/_Project/Scenes/Core",
                "Assets/_Project/Scenes/Gameplay",
                "Assets/_Project/Scenes/Test",
                
                // Settings
                "Assets/_Project/Settings/HDRP",
                "Assets/_Project/Settings/Input",
                "Assets/_Project/Settings/Quality",
                
                // Documentation
                "Assets/_Project/Documentation",
                
                // Tests
                "Assets/_Tests/Runtime",
                "Assets/_Tests/Editor"
            };

            foreach (var folder in rootFolders.Concat(projectFolders))
            {
                CreateFolder(folder);
            }
        }

        private void MoveExistingFiles()
        {
            var moves = new Dictionary<string, string>
            {
                // Move scenes
                ["Assets/OutdoorsScene.unity"] = "Assets/_Project/Scenes/Gameplay/OutdoorsScene.unity",
                ["Assets/_Project/Scenes/World_Prototype.unity"] = "Assets/_Project/Scenes/Gameplay/World_Prototype.unity",
                ["Assets/_Project/Scenes/_Bootstrap.unity"] = "Assets/_Project/Scenes/Core/_Bootstrap.unity",
                ["Assets/_Project/Scenes/_Persistent.unity"] = "Assets/_Project/Scenes/Core/_Persistent.unity",

                // Move databases
                ["Assets/_Project/Data/ItemDatabase.asset"] = "Assets/_Project/Data/Databases/ItemDatabase.asset",
                ["Assets/_Project/Data/RecipeDatabase.asset"] = "Assets/_Project/Data/Databases/RecipeDatabase.asset",

                // Move editor tools
                ["Assets/WildSurvival/Editor/ProjectTreeGenerator"] = "Assets/_Project/Code/Editor/Tools/ProjectTreeGenerator",
                ["Assets/WildSurvival/Editor/UltimateInventoryTool"] = "Assets/_Project/Code/Editor/Tools/InventoryTool",
                ["Assets/WildSurvival/Editor/WSUltimateGitHubWindow"] = "Assets/_Project/Code/Editor/Tools/GitHubSync",

                // Move stray files
                ["Assets/_Project/helloWorld.cs"] = "Assets/_Tests/Runtime/TestScript.cs",

                // Move HDRP settings
                ["Assets/Settings"] = "Assets/_Project/Settings/HDRP"
            };

            foreach (var move in moves)
            {
                SafeMoveAsset(move.Key, move.Value);
            }

            // Delete duplicate databases
            SafeDeleteAsset("Assets/ItemDatabase.asset");
            SafeDeleteAsset("Assets/RecipeDatabase.asset");
        }

        private void CreateAssemblyDefinitions()
        {
            CreateAssemblyDef("Assets/_Project/Code/Runtime/Core", "WildSurvival.Core",
                new string[] { });

            CreateAssemblyDef("Assets/_Project/Code/Runtime/Systems", "WildSurvival.Systems",
                new string[] { "WildSurvival.Core" });

            CreateAssemblyDef("Assets/_Project/Code/Runtime/Gameplay", "WildSurvival.Gameplay",
                new string[] { "WildSurvival.Core", "WildSurvival.Systems" });

            CreateAssemblyDef("Assets/_Project/Code/Runtime/UI", "WildSurvival.UI",
                new string[] { "WildSurvival.Core", "WildSurvival.Systems", "Unity.TextMeshPro" });

            CreateAssemblyDef("Assets/_Project/Code/Editor", "WildSurvival.Editor",
                new string[] { "WildSurvival.Core", "WildSurvival.Systems", "WildSurvival.Gameplay" },
                true);
        }

        private void CreateCoreScripts()
        {
            // GameManager.cs
            string gameManagerContent = @"using UnityEngine;
using System;

namespace WildSurvival.Core
{
    public class GameManager : MonoBehaviour
    {
        private static GameManager _instance;
        public static GameManager Instance => _instance;

        private void Awake()
        {
            if (_instance == null)
            {
                _instance = this;
                DontDestroyOnLoad(gameObject);
                Initialize();
            }
            else if (_instance != this)
            {
                Destroy(gameObject);
            }
        }

        private void Initialize()
        {
            Debug.Log(""Game Manager Initialized"");
        }
    }
}";
            CreateScript("Assets/_Project/Code/Runtime/Core/GameManager.cs", gameManagerContent);

            // ServiceLocator.cs
            string serviceLocatorContent = @"using System;
using System.Collections.Generic;
using UnityEngine;

namespace WildSurvival.Core
{
    public static class ServiceLocator
    {
        private static Dictionary<Type, object> services = new Dictionary<Type, object>();

        public static void Register<T>(T service) where T : class
        {
            var type = typeof(T);
            if (!services.ContainsKey(type))
            {
                services[type] = service;
                Debug.Log($""Service registered: {type.Name}"");
            }
        }

        public static T Get<T>() where T : class
        {
            var type = typeof(T);
            if (services.TryGetValue(type, out var service))
            {
                return service as T;
            }
            Debug.LogError($""Service not found: {type.Name}"");
            return null;
        }
    }
}";
            CreateScript("Assets/_Project/Code/Runtime/Core/ServiceLocator.cs", serviceLocatorContent);
        }

        private void ConfigureProjectSettings()
        {
            PlayerSettings.companyName = "Wild Forge Studios";
            PlayerSettings.productName = "Wild Survival";
            PlayerSettings.applicationIdentifier = "com.wildforge.wildsurvival";
            PlayerSettings.colorSpace = ColorSpace.Linear;
            QualitySettings.vSyncCount = 1;

            LogMessage("  Project settings configured");
        }

        private void CreateEditorTools()
        {
            string quickMenuContent = @"using UnityEngine;
using UnityEditor;
using UnityEditor.SceneManagement;

namespace WildSurvival.Editor
{
    public static class QuickAccessMenu
    {
        [MenuItem(""Wild Survival/Play Game %&p"")]
        public static void PlayGame()
        {
            EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
            EditorSceneManager.OpenScene(""Assets/_Project/Scenes/Core/_Bootstrap.unity"");
            EditorApplication.isPlaying = true;
        }
    }
}";
            CreateScript("Assets/_Project/Code/Editor/Tools/QuickAccessMenu.cs", quickMenuContent);
        }

        private void SetupGitConfiguration()
        {
            string gitignorePath = Path.Combine(Application.dataPath, "../.gitignore");
            if (!File.Exists(gitignorePath))
            {
                string gitignoreContent = @"# Unity
[Ll]ibrary/
[Tt]emp/
[Oo]bj/
[Bb]uild/
[Bb]uilds/
[Ll]ogs/
[Uu]ser[Ss]ettings/

# Visual Studio
.vs/
*.csproj
*.sln

# OS
.DS_Store
Thumbs.db";
                File.WriteAllText(gitignorePath, gitignoreContent);
            }
        }

        private void CreateDocumentation()
        {
            string readmeContent = @"# Wild Survival

## Project Structure
- **_Project**: Main project files
- **_DevTools**: Development tools
- **_ThirdParty**: External packages
- **_Tests**: Unit tests

## Quick Start
1. Open _Bootstrap scene
2. Press Play

## Systems
- Inventory System
- Crafting System
- Vitals System

Generated: " + DateTime.Now.ToString("yyyy-MM-dd");

            string readmePath = Path.Combine(Application.dataPath, "_Project/Documentation/README.md");
            CreateScript(readmePath, readmeContent);
        }

        private void CleanupProject()
        {
            DeleteEmptyFolders("Assets/WildSurvival");
            DeleteEmptyFolders("Assets/_Project/Scripts");

            SafeDeleteAsset("Assets/ItemDatabase.asset");
            SafeDeleteAsset("Assets/RecipeDatabase.asset");
        }

        // CODE MODIFICATION FEATURES
        private void ExecuteCodeModifications()
        {
            if (string.IsNullOrEmpty(codeModificationScript))
            {
                EditorUtility.DisplayDialog("Error", "No modification script provided", "OK");
                return;
            }

            try
            {
                var modifications = ParseModificationScript(codeModificationScript);
                int successCount = 0;
                int failCount = 0;

                foreach (var mod in modifications)
                {
                    if (ApplyModification(mod))
                    {
                        successCount++;
                        LogMessage($"? Modified: {mod.FilePath}");
                    }
                    else
                    {
                        failCount++;
                        LogMessage($"? Failed to modify: {mod.FilePath}");
                    }
                }

                AssetDatabase.Refresh();

                EditorUtility.DisplayDialog("Code Modification Complete",
                    $"Successfully modified {successCount} files\nFailed: {failCount}", "OK");
            }
            catch (Exception e)
            {
                EditorUtility.DisplayDialog("Error", $"Failed to execute modifications:\n{e.Message}", "OK");
            }
        }

        private List<CodeModification> ParseModificationScript(string script)
        {
            var modifications = new List<CodeModification>();
            var lines = script.Split('\n');

            CodeModification currentMod = null;
            StringBuilder findBuilder = null;
            StringBuilder replaceBuilder = null;
            bool inFind = false;
            bool inReplace = false;

            foreach (var line in lines)
            {
                if (line.StartsWith("FILE:"))
                {
                    if (currentMod != null)
                    {
                        if (findBuilder != null)
                            currentMod.FindText = findBuilder.ToString();
                        if (replaceBuilder != null)
                            currentMod.ReplaceText = replaceBuilder.ToString();
                        modifications.Add(currentMod);
                    }

                    currentMod = new CodeModification
                    {
                        FilePath = line.Substring(5).Trim()
                    };
                    findBuilder = null;
                    replaceBuilder = null;
                    inFind = false;
                    inReplace = false;
                }
                else if (line.StartsWith("FIND:"))
                {
                    inFind = true;
                    inReplace = false;
                    findBuilder = new StringBuilder();
                }
                else if (line.StartsWith("REPLACE:"))
                {
                    inFind = false;
                    inReplace = true;
                    replaceBuilder = new StringBuilder();
                }
                else if (line.StartsWith("END"))
                {
                    inFind = false;
                    inReplace = false;
                }
                else
                {
                    if (inFind && findBuilder != null)
                    {
                        if (findBuilder.Length > 0) findBuilder.AppendLine();
                        findBuilder.Append(line);
                    }
                    else if (inReplace && replaceBuilder != null)
                    {
                        if (replaceBuilder.Length > 0) replaceBuilder.AppendLine();
                        replaceBuilder.Append(line);
                    }
                }
            }

            // Add the last modification
            if (currentMod != null)
            {
                if (findBuilder != null)
                    currentMod.FindText = findBuilder.ToString();
                if (replaceBuilder != null)
                    currentMod.ReplaceText = replaceBuilder.ToString();
                modifications.Add(currentMod);
            }

            return modifications;
        }

        private bool ApplyModification(CodeModification mod)
        {
            try
            {
                string fullPath = Path.Combine(Application.dataPath,
                    mod.FilePath.Replace("Assets/", ""));

                if (!File.Exists(fullPath))
                {
                    Debug.LogError($"File not found: {fullPath}");
                    return false;
                }

                string content = File.ReadAllText(fullPath);
                string modifiedContent = content;

                if (!string.IsNullOrEmpty(mod.FindText) && !string.IsNullOrEmpty(mod.ReplaceText))
                {
                    modifiedContent = content.Replace(mod.FindText, mod.ReplaceText);
                }

                if (modifiedContent != content)
                {
                    File.WriteAllText(fullPath, modifiedContent);
                    return true;
                }

                return false;
            }
            catch (Exception e)
            {
                Debug.LogError($"Failed to modify {mod.FilePath}: {e.Message}");
                return false;
            }
        }

        private void LoadExampleModificationScript()
        {
            codeModificationScript = @"FILE: Assets/_Project/Code/Runtime/Core/GameManager.cs
FIND:
Debug.Log(""Game Manager Initialized"");
REPLACE:
Debug.Log(""[GameManager] Initialization complete!"");
// Added timestamp
Debug.Log($""[GameManager] Started at: {System.DateTime.Now}"");
END

FILE: Assets/_Project/Code/Runtime/Systems/Inventory/InventoryManager.cs
FIND:
public class InventoryManager : MonoBehaviour
{
REPLACE:
public class InventoryManager : MonoBehaviour, IInventoryService
{
    // Enhanced with interface implementation
END";
        }

        // Helper Methods
        private void CreateFolder(string path)
        {
            if (!AssetDatabase.IsValidFolder(path))
            {
                string parent = Path.GetDirectoryName(path).Replace('\\', '/');
                string folderName = Path.GetFileName(path);

                if (!AssetDatabase.IsValidFolder(parent))
                {
                    CreateFolder(parent);
                }

                AssetDatabase.CreateFolder(parent, folderName);
            }
        }

        private void SafeMoveAsset(string source, string destination)
        {
            if (!AssetDatabase.LoadAssetAtPath<UnityEngine.Object>(source))
                return;

            string destFolder = Path.GetDirectoryName(destination).Replace('\\', '/');
            CreateFolder(destFolder);

            string error = AssetDatabase.MoveAsset(source, destination);
            if (!string.IsNullOrEmpty(error))
            {
                LogMessage($"  Warning: Failed to move {source}: {error}");
            }
        }

        private void SafeDeleteAsset(string path)
        {
            if (AssetDatabase.LoadAssetAtPath<UnityEngine.Object>(path))
            {
                AssetDatabase.DeleteAsset(path);
            }
        }

        private void DeleteEmptyFolders(string path)
        {
            if (!AssetDatabase.IsValidFolder(path))
                return;

            var assets = AssetDatabase.FindAssets("", new[] { path });
            if (assets.Length == 0)
            {
                AssetDatabase.DeleteAsset(path);
            }
        }

        private void CreateAssemblyDef(string folder, string name, string[] references, bool isEditor = false)
        {
            var asmdef = new AssemblyDefinitionData
            {
                name = name,
                rootNamespace = name,
                references = references,
                includePlatforms = isEditor ? new[] { "Editor" } : new string[] { },
                excludePlatforms = new string[] { },
                allowUnsafeCode = false,
                autoReferenced = true
            };

            string json = JsonUtility.ToJson(asmdef, true);
            string path = Path.Combine(folder, name + ".asmdef");
            File.WriteAllText(path, json);
        }

        private void CreateScript(string path, string content)
        {
            string directory = Path.GetDirectoryName(path);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            File.WriteAllText(path, content);
        }

        private void CopyDirectory(string source, string destination)
        {
            if (!Directory.Exists(source))
                return;

            Directory.CreateDirectory(destination);

            foreach (string file in Directory.GetFiles(source))
            {
                string destFile = Path.Combine(destination, Path.GetFileName(file));
                File.Copy(file, destFile, true);
            }

            foreach (string dir in Directory.GetDirectories(source))
            {
                string destDir = Path.Combine(destination, Path.GetFileName(dir));
                CopyDirectory(dir, destDir);
            }
        }

        private void LogMessage(string message)
        {
            log.Add($"[{DateTime.Now:HH:mm:ss}] {message}");
            Debug.Log($"[Restructure] {message}");
            Repaint();
        }

        // Data Classes
        [Serializable]
        private class AssemblyDefinitionData
        {
            public string name;
            public string rootNamespace;
            public string[] references;
            public string[] includePlatforms;
            public string[] excludePlatforms;
            public bool allowUnsafeCode;
            public bool autoReferenced;
        }

        private class CodeModification
        {
            public string FilePath { get; set; }
            public string FindText { get; set; }
            public string ReplaceText { get; set; }
        }
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\ProjectCleanupTool\ProjectCleanupTool.cs
// ============================================

using UnityEngine;
using UnityEditor;
using System.IO;

public class ProjectCleanupTool : EditorWindow
{
    [MenuItem("Tools/Wild Survival/Clean & Organize Project")]
    public static void ShowWindow()
    {
        GetWindow<ProjectCleanupTool>("Project Cleanup");
    }

    private void OnGUI()
    {
        EditorGUILayout.LabelField("Project Cleanup & Organization", EditorStyles.boldLabel);
        EditorGUILayout.Space(10);

        EditorGUILayout.HelpBox("This will:\n" +
            "• Remove duplicate databases\n" +
            "• Organize scripts properly\n" +
            "• Create missing core files", MessageType.Info);

        if (GUILayout.Button("Clean & Organize", GUILayout.Height(40)))
        {
            CleanupProject();
        }
    }

    private void CleanupProject()
    {
        // Remove duplicate databases
        if (File.Exists("Assets/ItemDatabase.asset"))
        {
            AssetDatabase.DeleteAsset("Assets/ItemDatabase.asset");
        }
        if (File.Exists("Assets/RecipeDatabase.asset"))
        {
            AssetDatabase.DeleteAsset("Assets/RecipeDatabase.asset");
        }

        // Keep only the ones in _Project/Data
        Debug.Log("? Removed duplicate databases");

        // Create proper folder structure
        CreateFolderStructure();

        AssetDatabase.Refresh();
        Debug.Log("? Project cleaned and organized!");
    }

    private void CreateFolderStructure()
    {
        // Core runtime folders
        EnsureFolder("Assets/_Project/Code/Runtime", "Core");
        EnsureFolder("Assets/_Project/Code/Runtime", "Systems");
        EnsureFolder("Assets/_Project/Code/Runtime", "Gameplay");
        EnsureFolder("Assets/_Project/Code/Runtime", "UI");

        // System subfolders
        EnsureFolder("Assets/_Project/Code/Runtime/Systems", "Inventory");
        EnsureFolder("Assets/_Project/Code/Runtime/Systems", "Crafting");
        EnsureFolder("Assets/_Project/Code/Runtime/Systems", "Vitals");

        Debug.Log("? Folder structure created");
    }

    private void EnsureFolder(string parent, string folder)
    {
        string path = $"{parent}/{folder}";
        if (!AssetDatabase.IsValidFolder(path))
        {
            AssetDatabase.CreateFolder(parent, folder);
        }
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\ProjectRestructuringTool\ProjectRestructuringTool.cs
// ============================================

using UnityEngine;

public class ProjectRestructuringTool : MonoBehaviour
{
    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\ProjectTreeGenerator\ProjectTreeGenerator.cs
// ============================================

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEngine;
using UnityEditor;

namespace WildSurvival.Editor.Tools
{
    public class ProjectTreeGenerator : EditorWindow
    {
        // Configuration
        private string rootPath = "Assets";
        private bool includeMetaFiles = false;
        private bool includeEmptyFolders = true;
        private bool includeFileSize = true;
        private bool includeFileCount = true;
        private bool useIcons = true;
        private bool copyToClipboard = true;
        private bool saveToFile = true;
        private string outputFileName = "PROJECT_TREE.txt";

        // Filters
        private bool filterEnabled = true;
        private List<string> includedExtensions = new List<string> { ".cs", ".prefab", ".asset", ".unity", ".mat", ".shader" };
        private List<string> excludedFolders = new List<string> { "Library", "Temp", "Logs", "obj", ".vs", ".git" };
        private int maxDepth = 10;

        // Output formats
        private enum OutputFormat { Text, Markdown, JSON, HTML, XML }
        private OutputFormat outputFormat = OutputFormat.Text;

        // Statistics
        private int totalFiles = 0;
        private int totalFolders = 0;
        private long totalSize = 0;
        private Dictionary<string, int> extensionCount = new Dictionary<string, int>();

        // UI
        private Vector2 scrollPosition;
        private string generatedTree = "";
        private bool showPreview = false;

        [MenuItem("Tools/Wild Survival/Project Tree Generator")]
        public static void ShowWindow()
        {
            var window = GetWindow<ProjectTreeGenerator>("Project Tree Generator");
            window.minSize = new Vector2(600, 500);
            window.Show();
        }

        private void OnGUI()
        {
            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);

            DrawHeader();
            DrawConfiguration();
            DrawFilters();
            DrawActions();

            if (showPreview && !string.IsNullOrEmpty(generatedTree))
            {
                DrawPreview();
            }

            DrawStatistics();

            EditorGUILayout.EndScrollView();
        }

        private void DrawHeader()
        {
            EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);
            GUILayout.Label("Project Tree Generator", EditorStyles.boldLabel);
            GUILayout.FlexibleSpace();

            if (GUILayout.Button("Reset", EditorStyles.toolbarButton, GUILayout.Width(50)))
            {
                ResetSettings();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space(5);
        }

        private void DrawConfiguration()
        {
            EditorGUILayout.LabelField("Configuration", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(EditorStyles.helpBox);

            rootPath = EditorGUILayout.TextField("Root Path", rootPath);

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Select Folder", GUILayout.Width(100)))
            {
                string path = EditorUtility.OpenFolderPanel("Select Root Folder", rootPath, "");
                if (!string.IsNullOrEmpty(path))
                {
                    // Convert to relative path
                    if (path.StartsWith(Application.dataPath))
                    {
                        rootPath = "Assets" + path.Substring(Application.dataPath.Length);
                    }
                }
            }

            if (GUILayout.Button("Use Selected", GUILayout.Width(100)))
            {
                if (Selection.activeObject != null)
                {
                    string path = AssetDatabase.GetAssetPath(Selection.activeObject);
                    if (AssetDatabase.IsValidFolder(path))
                    {
                        rootPath = path;
                    }
                }
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space(5);

            outputFormat = (OutputFormat)EditorGUILayout.EnumPopup("Output Format", outputFormat);

            EditorGUILayout.Space(5);

            EditorGUILayout.LabelField("Options", EditorStyles.miniLabel);

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.BeginVertical();
            includeMetaFiles = EditorGUILayout.Toggle("Include .meta Files", includeMetaFiles);
            includeEmptyFolders = EditorGUILayout.Toggle("Include Empty Folders", includeEmptyFolders);
            includeFileSize = EditorGUILayout.Toggle("Show File Sizes", includeFileSize);
            EditorGUILayout.EndVertical();

            EditorGUILayout.BeginVertical();
            includeFileCount = EditorGUILayout.Toggle("Show File Count", includeFileCount);
            useIcons = EditorGUILayout.Toggle("Use Icons", useIcons);
            copyToClipboard = EditorGUILayout.Toggle("Copy to Clipboard", copyToClipboard);
            EditorGUILayout.EndVertical();
            EditorGUILayout.EndHorizontal();

            saveToFile = EditorGUILayout.Toggle("Save to File", saveToFile);
            if (saveToFile)
            {
                EditorGUI.indentLevel++;
                outputFileName = EditorGUILayout.TextField("Output File Name", outputFileName);
                EditorGUI.indentLevel--;
            }

            EditorGUILayout.EndVertical();
        }

        private void DrawFilters()
        {
            EditorGUILayout.Space(5);
            EditorGUILayout.LabelField("Filters", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(EditorStyles.helpBox);

            filterEnabled = EditorGUILayout.Toggle("Enable Filters", filterEnabled);

            if (filterEnabled)
            {
                EditorGUI.indentLevel++;

                maxDepth = EditorGUILayout.IntSlider("Max Depth", maxDepth, 1, 20);

                // Extension filter
                EditorGUILayout.LabelField("Included Extensions", EditorStyles.miniLabel);
                DrawStringList(includedExtensions, "Extension");

                EditorGUILayout.Space(5);

                // Excluded folders
                EditorGUILayout.LabelField("Excluded Folders", EditorStyles.miniLabel);
                DrawStringList(excludedFolders, "Folder");

                EditorGUI.indentLevel--;
            }

            EditorGUILayout.EndVertical();
        }

        private void DrawStringList(List<string> list, string label)
        {
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("+", GUILayout.Width(20)))
            {
                list.Add("");
            }
            GUILayout.Label(label + "s", GUILayout.Width(80));
            EditorGUILayout.EndHorizontal();

            for (int i = 0; i < list.Count; i++)
            {
                EditorGUILayout.BeginHorizontal();
                list[i] = EditorGUILayout.TextField(list[i]);
                if (GUILayout.Button("-", GUILayout.Width(20)))
                {
                    list.RemoveAt(i);
                    i--;
                }
                EditorGUILayout.EndHorizontal();
            }
        }

        private void DrawActions()
        {
            EditorGUILayout.Space(10);

            EditorGUILayout.BeginHorizontal();

            GUI.backgroundColor = Color.green;
            if (GUILayout.Button("Generate Tree", GUILayout.Height(35)))
            {
                GenerateTree();
            }
            GUI.backgroundColor = Color.white;

            if (!string.IsNullOrEmpty(generatedTree))
            {
                GUI.backgroundColor = new Color(0.5f, 0.5f, 1f);
                if (GUILayout.Button(showPreview ? "Hide Preview" : "Show Preview", GUILayout.Height(35)))
                {
                    showPreview = !showPreview;
                }
                GUI.backgroundColor = Color.white;
            }

            EditorGUILayout.EndHorizontal();
        }

        private void DrawPreview()
        {
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Preview", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(EditorStyles.helpBox);

            // Create a scroll view for the preview
            var style = new GUIStyle(EditorStyles.textArea)
            {
                wordWrap = true,
                font = Font.CreateDynamicFontFromOSFont("Courier New", 10)
            };

            EditorGUILayout.TextArea(generatedTree, style, GUILayout.Height(300));

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Copy to Clipboard"))
            {
                EditorGUIUtility.systemCopyBuffer = generatedTree;
                EditorUtility.DisplayDialog("Success", "Tree copied to clipboard!", "OK");
            }

            if (GUILayout.Button("Save to File"))
            {
                SaveToFile();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();
        }

        private void DrawStatistics()
        {
            if (totalFiles == 0 && totalFolders == 0) return;

            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Statistics", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(EditorStyles.helpBox);

            EditorGUILayout.LabelField($"Total Folders: {totalFolders:N0}");
            EditorGUILayout.LabelField($"Total Files: {totalFiles:N0}");
            EditorGUILayout.LabelField($"Total Size: {FormatFileSize(totalSize)}");

            if (extensionCount.Count > 0)
            {
                EditorGUILayout.Space(5);
                EditorGUILayout.LabelField("File Types:", EditorStyles.miniLabel);

                foreach (var kvp in extensionCount.OrderByDescending(x => x.Value))
                {
                    EditorGUILayout.LabelField($"  {kvp.Key}: {kvp.Value:N0}");
                }
            }

            EditorGUILayout.EndVertical();
        }

        private void GenerateTree()
        {
            // Reset statistics
            totalFiles = 0;
            totalFolders = 0;
            totalSize = 0;
            extensionCount.Clear();

            // Generate based on format
            switch (outputFormat)
            {
                case OutputFormat.Text:
                    generatedTree = GenerateTextTree();
                    break;
                case OutputFormat.Markdown:
                    generatedTree = GenerateMarkdownTree();
                    break;
                case OutputFormat.JSON:
                    generatedTree = GenerateJSONTree();
                    break;
                case OutputFormat.HTML:
                    generatedTree = GenerateHTMLTree();
                    break;
                case OutputFormat.XML:
                    generatedTree = GenerateXMLTree();
                    break;
            }

            if (copyToClipboard)
            {
                EditorGUIUtility.systemCopyBuffer = generatedTree;
            }

            if (saveToFile)
            {
                SaveToFile();
            }

            showPreview = true;

            Debug.Log($"Project tree generated! Files: {totalFiles}, Folders: {totalFolders}");
        }

        private string GenerateTextTree()
        {
            var sb = new StringBuilder();

            // Header
            sb.AppendLine("PROJECT STRUCTURE");
            sb.AppendLine($"Generated: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"Root: {rootPath}");
            sb.AppendLine(new string('=', 50));
            sb.AppendLine();

            // Generate tree
            GenerateTextNode(sb, rootPath, "", true, 0);

            // Footer
            sb.AppendLine();
            sb.AppendLine(new string('=', 50));
            sb.AppendLine($"Total: {totalFolders} folders, {totalFiles} files");
            sb.AppendLine($"Size: {FormatFileSize(totalSize)}");

            return sb.ToString();
        }

        private void GenerateTextNode(StringBuilder sb, string path, string indent, bool isLast, int depth)
        {
            if (depth > maxDepth) return;

            string name = Path.GetFileName(path);
            if (string.IsNullOrEmpty(name))
                name = path;

            // Check if excluded
            if (filterEnabled && excludedFolders.Contains(name))
                return;

            bool isDirectory = AssetDatabase.IsValidFolder(path);

            // Draw tree line
            if (depth > 0)
            {
                sb.Append(indent);
                sb.Append(isLast ? "+-- " : "+-- ");

                if (useIcons)
                {
                    sb.Append(isDirectory ? "?? " : GetFileIcon(path));
                }

                sb.Append(name);

                if (!isDirectory && includeFileSize)
                {
                    FileInfo fi = new FileInfo(path);
                    if (fi.Exists)
                    {
                        sb.Append($" ({FormatFileSize(fi.Length)})");
                        totalSize += fi.Length;
                    }
                }

                if (isDirectory && includeFileCount)
                {
                    int fileCount = GetFileCount(path);
                    if (fileCount > 0)
                    {
                        sb.Append($" [{fileCount} files]");
                    }
                }

                sb.AppendLine();
            }
            else
            {
                sb.AppendLine(name);
            }

            if (isDirectory)
            {
                totalFolders++;

                // Get children
                var children = new List<string>();

                // Add subdirectories
                string[] subdirs = AssetDatabase.GetSubFolders(path);
                children.AddRange(subdirs);

                // Add files
                string[] guids = AssetDatabase.FindAssets("", new[] { path });
                foreach (string guid in guids)
                {
                    string assetPath = AssetDatabase.GUIDToAssetPath(guid);

                    // Only include direct children
                    if (Path.GetDirectoryName(assetPath) == path.Replace('/', Path.DirectorySeparatorChar))
                    {
                        if (!AssetDatabase.IsValidFolder(assetPath))
                        {
                            if (ShouldIncludeFile(assetPath))
                            {
                                children.Add(assetPath);
                            }
                        }
                    }
                }

                // Sort children
                children.Sort((a, b) =>
                {
                    bool aIsDir = AssetDatabase.IsValidFolder(a);
                    bool bIsDir = AssetDatabase.IsValidFolder(b);

                    if (aIsDir && !bIsDir) return -1;
                    if (!aIsDir && bIsDir) return 1;

                    return string.Compare(Path.GetFileName(a), Path.GetFileName(b), StringComparison.OrdinalIgnoreCase);
                });

                // Process children
                for (int i = 0; i < children.Count; i++)
                {
                    string newIndent = indent;
                    if (depth > 0)
                    {
                        newIndent += isLast ? "    " : "¦   ";
                    }

                    GenerateTextNode(sb, children[i], newIndent, i == children.Count - 1, depth + 1);
                }
            }
            else
            {
                totalFiles++;

                // Track extension
                string ext = Path.GetExtension(path).ToLower();
                if (!string.IsNullOrEmpty(ext))
                {
                    if (!extensionCount.ContainsKey(ext))
                        extensionCount[ext] = 0;
                    extensionCount[ext]++;
                }
            }
        }

        private string GenerateMarkdownTree()
        {
            var sb = new StringBuilder();

            sb.AppendLine("# Project Structure");
            sb.AppendLine();
            sb.AppendLine($"**Generated:** {DateTime.Now:yyyy-MM-dd HH:mm:ss}  ");
            sb.AppendLine($"**Root:** `{rootPath}`");
            sb.AppendLine();
            sb.AppendLine("```");
            sb.Append(GenerateTextTree());
            sb.AppendLine("```");

            // Add statistics table
            sb.AppendLine();
            sb.AppendLine("## Statistics");
            sb.AppendLine();
            sb.AppendLine("| Metric | Value |");
            sb.AppendLine("|--------|-------|");
            sb.AppendLine($"| Total Folders | {totalFolders:N0} |");
            sb.AppendLine($"| Total Files | {totalFiles:N0} |");
            sb.AppendLine($"| Total Size | {FormatFileSize(totalSize)} |");

            if (extensionCount.Count > 0)
            {
                sb.AppendLine();
                sb.AppendLine("## File Types");
                sb.AppendLine();
                sb.AppendLine("| Extension | Count |");
                sb.AppendLine("|-----------|-------|");

                foreach (var kvp in extensionCount.OrderByDescending(x => x.Value))
                {
                    sb.AppendLine($"| {kvp.Key} | {kvp.Value:N0} |");
                }
            }

            return sb.ToString();
        }

        private string GenerateJSONTree()
        {
            var root = new JSONNode();
            GenerateJSONNode(root, rootPath, 0);

            var result = new Dictionary<string, object>
            {
                ["generated"] = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                ["root"] = rootPath,
                ["tree"] = root,
                ["statistics"] = new Dictionary<string, object>
                {
                    ["totalFolders"] = totalFolders,
                    ["totalFiles"] = totalFiles,
                    ["totalSize"] = totalSize,
                    ["fileTypes"] = extensionCount
                }
            };

            return JsonUtility.ToJson(result, true);
        }

        private void GenerateJSONNode(JSONNode node, string path, int depth)
        {
            if (depth > maxDepth) return;

            node.name = Path.GetFileName(path);
            node.path = path;
            node.isDirectory = AssetDatabase.IsValidFolder(path);

            if (node.isDirectory)
            {
                totalFolders++;
                node.children = new List<JSONNode>();

                // Process children
                string[] subdirs = AssetDatabase.GetSubFolders(path);
                foreach (string subdir in subdirs)
                {
                    if (!ShouldExclude(subdir))
                    {
                        var child = new JSONNode();
                        GenerateJSONNode(child, subdir, depth + 1);
                        node.children.Add(child);
                    }
                }

                // Process files
                string[] guids = AssetDatabase.FindAssets("", new[] { path });
                foreach (string guid in guids)
                {
                    string assetPath = AssetDatabase.GUIDToAssetPath(guid);
                    if (Path.GetDirectoryName(assetPath) == path.Replace('/', Path.DirectorySeparatorChar))
                    {
                        if (!AssetDatabase.IsValidFolder(assetPath) && ShouldIncludeFile(assetPath))
                        {
                            var child = new JSONNode
                            {
                                name = Path.GetFileName(assetPath),
                                path = assetPath,
                                isDirectory = false
                            };

                            FileInfo fi = new FileInfo(assetPath);
                            if (fi.Exists)
                            {
                                child.size = fi.Length;
                                totalSize += fi.Length;
                            }

                            node.children.Add(child);
                            totalFiles++;
                        }
                    }
                }
            }
            else
            {
                FileInfo fi = new FileInfo(path);
                if (fi.Exists)
                {
                    node.size = fi.Length;
                    totalSize += fi.Length;
                }
                totalFiles++;
            }
        }

        private string GenerateHTMLTree()
        {
            var sb = new StringBuilder();

            sb.AppendLine("<!DOCTYPE html>");
            sb.AppendLine("<html>");
            sb.AppendLine("<head>");
            sb.AppendLine("    <title>Project Structure</title>");
            sb.AppendLine("    <style>");
            sb.AppendLine("        body { font-family: 'Courier New', monospace; }");
            sb.AppendLine("        .folder { font-weight: bold; color: #0066cc; }");
            sb.AppendLine("        .file { color: #333; }");
            sb.AppendLine("        .size { color: #666; font-size: 0.9em; }");
            sb.AppendLine("        ul { list-style-type: none; }");
            sb.AppendLine("        li { margin: 2px 0; }");
            sb.AppendLine("    </style>");
            sb.AppendLine("</head>");
            sb.AppendLine("<body>");
            sb.AppendLine($"    <h1>Project Structure</h1>");
            sb.AppendLine($"    <p>Generated: {DateTime.Now:yyyy-MM-dd HH:mm:ss}</p>");
            sb.AppendLine($"    <p>Root: {rootPath}</p>");
            sb.AppendLine("    <ul>");

            GenerateHTMLNode(sb, rootPath, 0);

            sb.AppendLine("    </ul>");
            sb.AppendLine($"    <hr>");
            sb.AppendLine($"    <p>Total: {totalFolders} folders, {totalFiles} files ({FormatFileSize(totalSize)})</p>");
            sb.AppendLine("</body>");
            sb.AppendLine("</html>");

            return sb.ToString();
        }

        private void GenerateHTMLNode(StringBuilder sb, string path, int depth)
        {
            if (depth > maxDepth) return;

            string name = Path.GetFileName(path);
            bool isDirectory = AssetDatabase.IsValidFolder(path);

            sb.Append(new string(' ', depth * 4));
            sb.Append("<li>");

            if (isDirectory)
            {
                sb.Append($"<span class='folder'>?? {name}</span>");
                totalFolders++;

                // Get children
                var children = GetChildren(path);
                if (children.Count > 0)
                {
                    sb.AppendLine();
                    sb.AppendLine(new string(' ', depth * 4) + "<ul>");

                    foreach (string child in children)
                    {
                        GenerateHTMLNode(sb, child, depth + 1);
                    }

                    sb.Append(new string(' ', depth * 4));
                    sb.AppendLine("</ul>");
                }
            }
            else
            {
                sb.Append($"<span class='file'>{GetFileIcon(path)} {name}</span>");

                FileInfo fi = new FileInfo(path);
                if (fi.Exists && includeFileSize)
                {
                    sb.Append($" <span class='size'>({FormatFileSize(fi.Length)})</span>");
                    totalSize += fi.Length;
                }

                totalFiles++;
            }

            sb.AppendLine("</li>");
        }

        private string GenerateXMLTree()
        {
            var sb = new StringBuilder();

            sb.AppendLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            sb.AppendLine("<project>");
            sb.AppendLine($"    <generated>{DateTime.Now:yyyy-MM-dd HH:mm:ss}</generated>");
            sb.AppendLine($"    <root>{rootPath}</root>");
            sb.AppendLine("    <structure>");

            GenerateXMLNode(sb, rootPath, 2, 0);

            sb.AppendLine("    </structure>");
            sb.AppendLine("    <statistics>");
            sb.AppendLine($"        <folders>{totalFolders}</folders>");
            sb.AppendLine($"        <files>{totalFiles}</files>");
            sb.AppendLine($"        <size>{totalSize}</size>");
            sb.AppendLine("    </statistics>");
            sb.AppendLine("</project>");

            return sb.ToString();
        }

        private void GenerateXMLNode(StringBuilder sb, string path, int indent, int depth)
        {
            if (depth > maxDepth) return;

            string name = Path.GetFileName(path);
            bool isDirectory = AssetDatabase.IsValidFolder(path);

            string indentStr = new string(' ', indent * 4);

            if (isDirectory)
            {
                sb.AppendLine($"{indentStr}<folder name=\"{name}\" path=\"{path}\">");
                totalFolders++;

                var children = GetChildren(path);
                foreach (string child in children)
                {
                    GenerateXMLNode(sb, child, indent + 1, depth + 1);
                }

                sb.AppendLine($"{indentStr}</folder>");
            }
            else
            {
                FileInfo fi = new FileInfo(path);
                long size = fi.Exists ? fi.Length : 0;

                sb.AppendLine($"{indentStr}<file name=\"{name}\" path=\"{path}\" size=\"{size}\" />");

                totalSize += size;
                totalFiles++;
            }
        }

        // Helper methods
        private bool ShouldIncludeFile(string path)
        {
            if (!filterEnabled) return true;

            if (!includeMetaFiles && path.EndsWith(".meta"))
                return false;

            if (includedExtensions.Count > 0)
            {
                string ext = Path.GetExtension(path).ToLower();
                return includedExtensions.Contains(ext);
            }

            return true;
        }

        private bool ShouldExclude(string path)
        {
            if (!filterEnabled) return false;

            string name = Path.GetFileName(path);
            return excludedFolders.Contains(name);
        }

        private List<string> GetChildren(string path)
        {
            var children = new List<string>();

            // Add subdirectories
            string[] subdirs = AssetDatabase.GetSubFolders(path);
            foreach (string subdir in subdirs)
            {
                if (!ShouldExclude(subdir))
                {
                    children.Add(subdir);
                }
            }

            // Add files
            string[] guids = AssetDatabase.FindAssets("", new[] { path });
            foreach (string guid in guids)
            {
                string assetPath = AssetDatabase.GUIDToAssetPath(guid);

                if (Path.GetDirectoryName(assetPath) == path.Replace('/', Path.DirectorySeparatorChar))
                {
                    if (!AssetDatabase.IsValidFolder(assetPath) && ShouldIncludeFile(assetPath))
                    {
                        children.Add(assetPath);
                    }
                }
            }

            // Sort
            children.Sort((a, b) =>
            {
                bool aIsDir = AssetDatabase.IsValidFolder(a);
                bool bIsDir = AssetDatabase.IsValidFolder(b);

                if (aIsDir && !bIsDir) return -1;
                if (!aIsDir && bIsDir) return 1;

                return string.Compare(Path.GetFileName(a), Path.GetFileName(b), StringComparison.OrdinalIgnoreCase);
            });

            return children;
        }

        private int GetFileCount(string folderPath)
        {
            int count = 0;
            string[] guids = AssetDatabase.FindAssets("", new[] { folderPath });

            foreach (string guid in guids)
            {
                string assetPath = AssetDatabase.GUIDToAssetPath(guid);
                if (!AssetDatabase.IsValidFolder(assetPath))
                {
                    count++;
                }
            }

            return count;
        }

        private string GetFileIcon(string path)
        {
            string ext = Path.GetExtension(path).ToLower();

            return ext switch
            {
                ".cs" => "?? ",
                ".prefab" => "?? ",
                ".unity" => "?? ",
                ".mat" => "?? ",
                ".shader" => "? ",
                ".asset" => "?? ",
                ".png" or ".jpg" or ".jpeg" => "??? ",
                ".fbx" or ".obj" => "?? ",
                ".wav" or ".mp3" or ".ogg" => "?? ",
                ".txt" or ".md" => "?? ",
                ".json" or ".xml" => "?? ",
                _ => "?? "
            };
        }

        private string FormatFileSize(long bytes)
        {
            string[] sizes = { "B", "KB", "MB", "GB", "TB" };
            double len = bytes;
            int order = 0;

            while (len >= 1024 && order < sizes.Length - 1)
            {
                order++;
                len = len / 1024;
            }

            return $"{len:F2} {sizes[order]}";
        }

        private void SaveToFile()
        {
            string path = EditorUtility.SaveFilePanel(
                "Save Project Tree",
                Application.dataPath,
                outputFileName,
                GetFileExtension()
            );

            if (!string.IsNullOrEmpty(path))
            {
                File.WriteAllText(path, generatedTree);
                EditorUtility.DisplayDialog("Success", $"Project tree saved to:\n{path}", "OK");

                // Open file location
                EditorUtility.RevealInFinder(path);
            }
        }

        private string GetFileExtension()
        {
            return outputFormat switch
            {
                OutputFormat.Text => "txt",
                OutputFormat.Markdown => "md",
                OutputFormat.JSON => "json",
                OutputFormat.HTML => "html",
                OutputFormat.XML => "xml",
                _ => "txt"
            };
        }

        private void ResetSettings()
        {
            rootPath = "Assets";
            includeMetaFiles = false;
            includeEmptyFolders = true;
            includeFileSize = true;
            includeFileCount = true;
            useIcons = true;
            copyToClipboard = true;
            saveToFile = true;
            outputFileName = "PROJECT_TREE.txt";
            filterEnabled = true;
            includedExtensions = new List<string> { ".cs", ".prefab", ".asset", ".unity", ".mat", ".shader" };
            excludedFolders = new List<string> { "Library", "Temp", "Logs", "obj", ".vs", ".git" };
            maxDepth = 10;
            outputFormat = OutputFormat.Text;
            generatedTree = "";
            showPreview = false;
        }

        [Serializable]
        private class JSONNode
        {
            public string name;
            public string path;
            public bool isDirectory;
            public long size;
            public List<JSONNode> children;
        }
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\UltimateInventoryTool\ItemDatabase.cs
// ============================================

using System.Collections.Generic;
using System.Linq;
using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif

namespace WildSurvival.Data
{
    [CreateAssetMenu(fileName = "ItemDatabase", menuName = "WildSurvival/Databases/Item Database")]
    public class ItemDatabase : ScriptableObject
    {
        [SerializeField] private List<ItemDefinition> items = new List<ItemDefinition>();

        public void AddItem(ItemDefinition item)
        {
            if (item != null && !items.Contains(item))
            {
                items.Add(item);
#if UNITY_EDITOR
                EditorUtility.SetDirty(this);
#endif
            }
        }

        public void RemoveItem(ItemDefinition item)
        {
            if (items.Contains(item))
            {
                items.Remove(item);
#if UNITY_EDITOR
                EditorUtility.SetDirty(this);
#endif
            }
        }

        public List<ItemDefinition> GetAllItems()
        {
            return new List<ItemDefinition>(items);
        }

        public ItemDefinition GetItem(string itemID)
        {
            return items.FirstOrDefault(i => i.itemID == itemID);
        }

        public List<ItemDefinition> GetItemsByCategory(ItemCategory category)
        {
            return items.Where(i => i.primaryCategory == category).ToList();
        }

        public void Clear()
        {
            items.Clear();
#if UNITY_EDITOR
            EditorUtility.SetDirty(this);
#endif
        }

        // Validation
        private void OnValidate()
        {
            // Remove null entries
            items.RemoveAll(i => i == null);

            // Check for duplicates
            var duplicates = items.GroupBy(i => i?.itemID)
                .Where(g => g.Count() > 1)
                .Select(g => g.Key);

            foreach (var dup in duplicates)
            {
                Debug.LogWarning($"Duplicate item ID found: {dup}");
            }
        }
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\UltimateInventoryTool\ItemDefinition.cs
// ============================================

using System;
using UnityEngine;

namespace WildSurvival.Data
{
    [Serializable]
    [CreateAssetMenu(fileName = "NewItem", menuName = "WildSurvival/Item")]
    public class ItemDefinition : ScriptableObject
    {
        [Header("Identity")]
        public string itemID = "";
        public string displayName = "New Item";
        [TextArea(3, 5)]
        public string description = "";
        public Sprite icon;
        public GameObject worldModel;

        [Header("Categories")]
        public ItemCategory primaryCategory = ItemCategory.Misc;
        public ItemSubcategory subcategory = ItemSubcategory.None;
        public ItemTag[] tags = new ItemTag[0];

        [Header("Inventory")]
        public Vector2Int gridSize = Vector2Int.one;
        [HideInInspector]
        public bool[,] shapeGrid;
        public float weight = 1f;
        public int maxStackSize = 1;
        public bool canRotateInInventory = true;

        [Header("Durability")]
        public bool hasDurability = false;
        public float maxDurability = 100f;
        public float durabilityLossRate = 0.1f;

        [Header("Value")]
        public int baseValue = 1;
        public float rarityMultiplier = 1f;

        [Header("Usage")]
        public bool isConsumable = false;
        public bool isEquippable = false;

        private void OnValidate()
        {
            if (string.IsNullOrEmpty(itemID))
            {
                itemID = name.Replace(" ", "_").ToLower();
            }

            // Initialize shape grid if needed
            if (shapeGrid == null || shapeGrid.GetLength(0) != gridSize.x || shapeGrid.GetLength(1) != gridSize.y)
            {
                shapeGrid = new bool[gridSize.x, gridSize.y];
                // Default to full shape
                for (int x = 0; x < gridSize.x; x++)
                {
                    for (int y = 0; y < gridSize.y; y++)
                    {
                        shapeGrid[x, y] = true;
                    }
                }
            }
        }
    }

    // Enums for ItemDefinition
    public enum ItemCategory
    {
        Misc,
        Resource,
        Tool,
        Weapon,
        Food,
        Medicine,
        Clothing,
        Building,
        Fuel,
        Container
    }

    public enum ItemSubcategory
    {
        None,
        Raw,
        Processed,
        Consumable,
        Equipment,
        Material
    }

    public enum ItemTag
    {
        None,
        Wood,
        Stone,
        Metal,
        Organic,
        Fuel,
        Sharp,
        Heavy,
        Fragile,
        Valuable,
        QuestItem,
        Stackable,
        Consumable,
        Tool,
        Weapon,
        CraftingMaterial
    }

    public enum ItemQuality
    {
        Ruined = -1,
        Poor = 0,
        Common = 1,
        Good = 2,
        Excellent = 3,
        Masterwork = 4,
        Legendary = 5
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\UltimateInventoryTool\ItemInstance.cs
// ============================================

using System;
using System.Collections.Generic;
using UnityEngine;
using WildSurvival.Data;

namespace WildSurvival.Inventory
{
    [Serializable]
    public class ItemInstance
    {
        public ItemDefinition definition;
        public int stackSize = 1;
        public ItemQuality quality = ItemQuality.Common;
        public float currentDurability = 100f;
        public float condition = 1f;

        // Runtime data
        public Vector2Int gridPosition;
        public int rotation; // 0, 90, 180, 270
        public Dictionary<string, object> customData = new Dictionary<string, object>();

        public ItemInstance(ItemDefinition def)
        {
            definition = def;
            if (def != null)
            {
                currentDurability = def.maxDurability;
                stackSize = 1;
            }
        }

        public float GetEffectiveWeight()
        {
            return definition.weight * stackSize;
        }

        public bool CanStackWith(ItemInstance other)
        {
            if (other == null || definition != other.definition)
                return false;

            if (definition.maxStackSize <= 1)
                return false;

            return stackSize + other.stackSize <= definition.maxStackSize;
        }

        public void RepairTo(float durability)
        {
            currentDurability = Mathf.Clamp(durability, 0, definition.maxDurability);
            condition = currentDurability / definition.maxDurability;
        }
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\UltimateInventoryTool\RecipeDatabase.cs
// ============================================

using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using WildSurvival.Crafting;

#if UNITY_EDITOR
using UnityEditor;
#endif

namespace WildSurvival.Database
{
    [CreateAssetMenu(fileName = "RecipeDatabase", menuName = "WildSurvival/Databases/Recipe Database")]
    public class RecipeDatabase : ScriptableObject
    {
        [SerializeField] private List<RecipeDefinition> recipes = new List<RecipeDefinition>();

        public void AddRecipe(RecipeDefinition recipe)
        {
            if (recipe != null && !recipes.Contains(recipe))
            {
                recipes.Add(recipe);
#if UNITY_EDITOR
                EditorUtility.SetDirty(this);
#endif
            }
        }

        public void RemoveRecipe(RecipeDefinition recipe)
        {
            if (recipes.Contains(recipe))
            {
                recipes.Remove(recipe);
#if UNITY_EDITOR
                EditorUtility.SetDirty(this);
#endif
            }
        }

        public List<RecipeDefinition> GetAllRecipes()
        {
            return new List<RecipeDefinition>(recipes);
        }

        public RecipeDefinition GetRecipe(string recipeID)
        {
            return recipes.FirstOrDefault(r => r.recipeID == recipeID);
        }

        public void Clear()
        {
            recipes.Clear();
#if UNITY_EDITOR
            EditorUtility.SetDirty(this);
#endif
        }

        public List<RecipeDefinition> GetRecipesByCategory(CraftingCategory category)
        {
            return recipes.Where(r => r.category == category).ToList();
        }

        public List<RecipeDefinition> GetRecipesByWorkstation(WorkstationType workstation)
        {
            return recipes.Where(r => r.requiredWorkstation == workstation).ToList();
        }
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\UltimateInventoryTool\RecipeDefinition.cs
// ============================================

using System;
using UnityEngine;
using WildSurvival.Data;

namespace WildSurvival.Crafting
{
    [Serializable]
    [CreateAssetMenu(fileName = "NewRecipe", menuName = "WildSurvival/Recipe")]
    public class RecipeDefinition : ScriptableObject
    {
        [Header("Identity")]
        public string recipeID = "";
        public string recipeName = "New Recipe";
        [TextArea(3, 5)]
        public string description = "";
        public Sprite icon;

        [Header("Category")]
        public CraftingCategory category = CraftingCategory.Tools;
        public int tier = 0;

        [Header("Requirements")]
        public WorkstationType requiredWorkstation = WorkstationType.None;
        public RecipeIngredient[] ingredients = new RecipeIngredient[0];

        [Header("Process")]
        public float baseCraftTime = 3f;
        public float baseTemperature = 20f;
        public float failureChance = 0.1f;

        [Header("Output")]
        public RecipeOutput[] outputs = new RecipeOutput[0];
        public RecipeOutput[] failureOutputs = new RecipeOutput[0];

        [Header("Discovery")]
        public bool isKnownByDefault = true;
        public DiscoveryMethod discoveryMethod = DiscoveryMethod.Known;

        private void OnValidate()
        {
            if (string.IsNullOrEmpty(recipeID))
            {
                recipeID = "recipe_" + name.Replace(" ", "_").ToLower();
            }
        }
    }

    [Serializable]
    public class RecipeIngredient
    {
        public string name = "Ingredient";
        public ItemDefinition specificItem;
        public ItemCategory category = ItemCategory.Misc;
        public int quantity = 1;
        public bool consumed = true;
    }

    [Serializable]
    public class RecipeOutput
    {
        public ItemDefinition item;
        public int quantityMin = 1;
        public int quantityMax = 1;
        [Range(0f, 1f)]
        public float chance = 1f;
    }

    // Enums for RecipeDefinition
    public enum CraftingCategory
    {
        Tools,
        Weapons,
        Clothing,
        Building,
        Cooking,
        Medicine,
        Processing,
        Advanced
    }

    public enum WorkstationType
    {
        None,
        Campfire,
        CookingPot,
        Workbench,
        Forge,
        Anvil,
        TanningRack,
        Loom,
        ChemistryStation,
        AdvancedWorkbench
    }

    public enum DiscoveryMethod
    {
        Known,
        Experimentation,
        Book,
        NPC,
        Observation,
        Analysis,
        Milestone
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\UltimateInventoryTool\UltimateInventoryTool.cs
// ============================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using UnityEngine;
using UnityEditor;

namespace WildSurvival.Editor.Tools
{
    // ==================== DATA STRUCTURES ====================
    #region Data Structures

    // Enums
    public enum ItemCategory
    {
        Misc,
        Resource,
        Tool,
        Weapon,
        Food,
        Medicine,
        Clothing,
        Building,
        Fuel,
        Container
    }

    public enum ItemSubcategory
    {
        None,
        Raw,
        Processed,
        Consumable,
        Equipment,
        Material
    }

    public enum ItemTag
    {
        None,
        Wood,
        Stone,
        Metal,
        Organic,
        Fuel,
        Sharp,
        Heavy,
        Fragile,
        Valuable,
        QuestItem,
        Stackable,
        Consumable,
        Tool,
        Weapon,
        CraftingMaterial
    }

    public enum CraftingCategory
    {
        Tools,
        Weapons,
        Clothing,
        Building,
        Cooking,
        Medicine,
        Processing,
        Advanced
    }

    public enum WorkstationType
    {
        None,
        Campfire,
        CookingPot,
        Workbench,
        Forge,
        Anvil,
        TanningRack,
        Loom,
        ChemistryStation,
        AdvancedWorkbench
    }

    public enum DiscoveryMethod
    {
        Known,
        Experimentation,
        Book,
        NPC,
        Observation,
        Analysis,
        Milestone
    }

    public enum ItemQuality
    {
        Ruined = -1,
        Poor = 0,
        Common = 1,
        Good = 2,
        Excellent = 3,
        Masterwork = 4,
        Legendary = 5
    }

    // Item Definition
    [Serializable]
    [CreateAssetMenu(fileName = "NewItem", menuName = "WildSurvival/Item")]
    public class ItemDefinition : ScriptableObject
    {
        [Header("Identity")]
        public string itemID = "";
        public string displayName = "New Item";
        [TextArea(3, 5)]
        public string description = "";
        public Sprite icon;
        public GameObject worldModel;

        [Header("Categories")]
        public ItemCategory primaryCategory = ItemCategory.Misc;
        public ItemSubcategory subcategory = ItemSubcategory.None;
        public ItemTag[] tags = new ItemTag[0];

        [Header("Inventory")]
        public Vector2Int gridSize = Vector2Int.one;
        public bool[,] shapeGrid;
        public float weight = 1f;
        public int maxStackSize = 1;
        public bool canRotateInInventory = true;

        [Header("Durability")]
        public bool hasDurability = false;
        public float maxDurability = 100f;
        public float durabilityLossRate = 0.1f;

        [Header("Value")]
        public int baseValue = 1;
        public float rarityMultiplier = 1f;

        [Header("Usage")]
        public bool isConsumable = false;
        public bool isEquippable = false;

        private void OnValidate()
        {
            if (string.IsNullOrEmpty(itemID))
            {
                itemID = name.Replace(" ", "_").ToLower();
            }

            // Initialize shape grid if needed
            if (shapeGrid == null || shapeGrid.GetLength(0) != gridSize.x || shapeGrid.GetLength(1) != gridSize.y)
            {
                shapeGrid = new bool[gridSize.x, gridSize.y];
                // Default to full shape
                for (int x = 0; x < gridSize.x; x++)
                {
                    for (int y = 0; y < gridSize.y; y++)
                    {
                        shapeGrid[x, y] = true;
                    }
                }
            }
        }
    }

    // Recipe Definition
    [Serializable]
    [CreateAssetMenu(fileName = "NewRecipe", menuName = "WildSurvival/Recipe")]
    public class RecipeDefinition : ScriptableObject
    {
        [Header("Identity")]
        public string recipeID = "";
        public string recipeName = "New Recipe";
        [TextArea(3, 5)]
        public string description = "";
        public Sprite icon;

        [Header("Category")]
        public CraftingCategory category = CraftingCategory.Tools;
        public int tier = 0;

        [Header("Requirements")]
        public WorkstationType requiredWorkstation = WorkstationType.None;
        public RecipeIngredient[] ingredients = new RecipeIngredient[0];

        [Header("Process")]
        public float baseCraftTime = 3f;
        public float baseTemperature = 20f;
        public float failureChance = 0.1f;

        [Header("Output")]
        public RecipeOutput[] outputs = new RecipeOutput[0];
        public RecipeOutput[] failureOutputs = new RecipeOutput[0];

        [Header("Discovery")]
        public bool isKnownByDefault = true;
        public DiscoveryMethod discoveryMethod = DiscoveryMethod.Known;

        private void OnValidate()
        {
            if (string.IsNullOrEmpty(recipeID))
            {
                recipeID = "recipe_" + name.Replace(" ", "_").ToLower();
            }
        }
    }

    [Serializable]
    public class RecipeIngredient
    {
        public string name = "Ingredient";
        public ItemDefinition specificItem;
        public ItemCategory category = ItemCategory.Misc;
        public int quantity = 1;
        public bool consumed = true;
    }

    [Serializable]
    public class RecipeOutput
    {
        public ItemDefinition item;
        public int quantityMin = 1;
        public int quantityMax = 1;
        [Range(0f, 1f)]
        public float chance = 1f;
    }

    // Item Instance (for runtime/testing)
    [Serializable]
    public class ItemInstance
    {
        public ItemDefinition definition;
        public int stackSize = 1;
        public ItemQuality quality = ItemQuality.Common;
        public float currentDurability = 100f;
        public float condition = 1f;

        public ItemInstance(ItemDefinition def)
        {
            definition = def;
            if (def != null)
            {
                currentDurability = def.maxDurability;
            }
        }
    }

    // Database classes
    [CreateAssetMenu(fileName = "ItemDatabase", menuName = "WildSurvival/Databases/Item Database")]
    public class ItemDatabase : ScriptableObject
    {
        [SerializeField] private List<ItemDefinition> items = new List<ItemDefinition>();

        public void AddItem(ItemDefinition item)
        {
            if (item != null && !items.Contains(item))
            {
                items.Add(item);
                EditorUtility.SetDirty(this);
            }
        }

        public void RemoveItem(ItemDefinition item)
        {
            if (items.Contains(item))
            {
                items.Remove(item);
                EditorUtility.SetDirty(this);
            }
        }

        public List<ItemDefinition> GetAllItems()
        {
            return new List<ItemDefinition>(items);
        }

        public ItemDefinition GetItem(string itemID)
        {
            return items.FirstOrDefault(i => i.itemID == itemID);
        }
    }

    [CreateAssetMenu(fileName = "RecipeDatabase", menuName = "WildSurvival/Databases/Recipe Database")]
    public class RecipeDatabase : ScriptableObject
    {
        [SerializeField] private List<RecipeDefinition> recipes = new List<RecipeDefinition>();

        public void AddRecipe(RecipeDefinition recipe)
        {
            if (recipe != null && !recipes.Contains(recipe))
            {
                recipes.Add(recipe);
                EditorUtility.SetDirty(this);
            }
        }

        public void RemoveRecipe(RecipeDefinition recipe)
        {
            if (recipes.Contains(recipe))
            {
                recipes.Remove(recipe);
                EditorUtility.SetDirty(this);
            }
        }

        public List<RecipeDefinition> GetAllRecipes()
        {
            return new List<RecipeDefinition>(recipes);
        }

        public RecipeDefinition GetRecipe(string recipeID)
        {
            return recipes.FirstOrDefault(r => r.recipeID == recipeID);
        }
    }

    #endregion

    // ==================== MAIN TOOL ====================
    public class UltimateInventoryTool : EditorWindow
    {
        // Window Configuration
        private const string WINDOW_TITLE = "Ultimate Inventory Tool";
        private const float MIN_WINDOW_WIDTH = 1200f;
        private const float MIN_WINDOW_HEIGHT = 800f;

        private GUIStyle headerStyle;
        private GUIStyle boxStyle;
        private bool stylesInitialized = false;

        // Tab System
        private string[] tabNames = new[]
        {
            "Dashboard",
            "Item Creator",
            "Recipe Builder",
            "Inventory Simulator",
            "Crafting Test",
            "Database Manager"
        };
        private int currentTab = 0;

        // Sub-systems
        private ItemCreatorTab itemCreator;
        private RecipeBuilderTab recipeBuilder;
        private InventorySimulatorTab inventorySimulator;
        private CraftingTestTab craftingTest;
        private DatabaseManagerTab databaseManager;
        private DashboardTab dashboard;

        // Shared Data
        private ItemDatabase itemDatabase;
        private RecipeDatabase recipeDatabase;
        private List<ItemDefinition> cachedItems;
        private List<RecipeDefinition> cachedRecipes;

        // UI State
        private Vector2 scrollPosition;
        private string searchFilter = "";
        private bool isDirty = false;

        // Styling
        //private GUIStyle headerStyle;
        //private GUIStyle boxStyle;

        [MenuItem("Tools/Wild Survival/Ultimate Inventory Tool")]
        public static void ShowWindow()
        {
            var window = GetWindow<UltimateInventoryTool>(WINDOW_TITLE);
            window.minSize = new Vector2(MIN_WINDOW_WIDTH, MIN_WINDOW_HEIGHT);
            window.Show();
        }

        private void OnEnable()
        {
            LoadDatabases();
            InitializeTabs();
            RefreshCaches();
            // Remove SetupStyles() from here - it won't work properly
        }

        private void LoadDatabases()
        {
            // Try to find existing databases
            string[] guids = AssetDatabase.FindAssets("t:ItemDatabase");
            if (guids.Length > 0)
            {
                string path = AssetDatabase.GUIDToAssetPath(guids[0]);
                itemDatabase = AssetDatabase.LoadAssetAtPath<ItemDatabase>(path);
            }

            // Create if doesn't exist
            if (itemDatabase == null)
            {
                // Create directories if they don't exist
                if (!AssetDatabase.IsValidFolder("Assets/_Project"))
                {
                    AssetDatabase.CreateFolder("Assets", "_Project");
                }
                if (!AssetDatabase.IsValidFolder("Assets/_Project/Data"))
                {
                    AssetDatabase.CreateFolder("Assets/_Project", "Data");
                }

                itemDatabase = CreateInstance<ItemDatabase>();
                AssetDatabase.CreateAsset(itemDatabase, "Assets/_Project/Data/ItemDatabase.asset");
                AssetDatabase.SaveAssets();
            }

            // Same for recipes
            guids = AssetDatabase.FindAssets("t:RecipeDatabase");
            if (guids.Length > 0)
            {
                string path = AssetDatabase.GUIDToAssetPath(guids[0]);
                recipeDatabase = AssetDatabase.LoadAssetAtPath<RecipeDatabase>(path);
            }

            if (recipeDatabase == null)
            {
                recipeDatabase = CreateInstance<RecipeDatabase>();
                AssetDatabase.CreateAsset(recipeDatabase, "Assets/_Project/Data/RecipeDatabase.asset");
                AssetDatabase.SaveAssets();
            }
        }

        private void InitializeTabs()
        {
            dashboard = new DashboardTab(this);
            itemCreator = new ItemCreatorTab(this);
            recipeBuilder = new RecipeBuilderTab(this);
            inventorySimulator = new InventorySimulatorTab(this);
            craftingTest = new CraftingTestTab(this);
            databaseManager = new DatabaseManagerTab(this);
        }

        private void InitializeStyles()
        {
            if (stylesInitialized) return;

            try
            {
                headerStyle = new GUIStyle(EditorStyles.boldLabel)
                {
                    fontSize = 14,
                    alignment = TextAnchor.MiddleLeft,
                    padding = new RectOffset(10, 10, 5, 5)
                };

                boxStyle = new GUIStyle(GUI.skin.box)
                {
                    padding = new RectOffset(10, 10, 10, 10),
                    margin = new RectOffset(5, 5, 5, 5)
                };

                stylesInitialized = true;
            }
            catch
            {
                // Fallback to defaults if initialization fails
                headerStyle = EditorStyles.boldLabel;
                boxStyle = GUI.skin.box;
            }
        }

        private void OnGUI()
        {
            // Initialize styles at the start of OnGUI
            InitializeStyles();

            DrawHeader();
            DrawToolbar();
            DrawTabContent();
            DrawFooter();

            if (isDirty)
            {
                SaveChangesInternal();
            }
        }

        private void DrawHeader()
        {
            EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);

            GUILayout.Label("Ultimate Inventory Tool", EditorStyles.boldLabel);

            GUILayout.FlexibleSpace();

            // Quick Actions
            if (GUILayout.Button("Refresh", EditorStyles.toolbarButton, GUILayout.Width(60)))
            {
                RefreshCaches();
            }

            if (GUILayout.Button("Save All", EditorStyles.toolbarButton, GUILayout.Width(60)))
            {
                SaveChangesInternal();
            }

            EditorGUILayout.EndHorizontal();
        }

        private void DrawToolbar()
        {
            EditorGUILayout.BeginHorizontal();

            int newTab = GUILayout.Toolbar(currentTab, tabNames, GUILayout.Height(30));
            if (newTab != currentTab)
            {
                currentTab = newTab;
                GUI.FocusControl(null); // Clear focus when switching tabs
            }

            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space(5);
        }

        private void DrawTabContent()
        {
            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);

            try
            {
                switch (currentTab)
                {
                    case 0:
                        dashboard?.Draw();
                        break;
                    case 1:
                        itemCreator?.Draw();
                        break;
                    case 2:
                        recipeBuilder?.Draw();
                        break;
                    case 3:
                        inventorySimulator?.Draw();
                        break;
                    case 4:
                        craftingTest?.Draw();
                        break;
                    case 5:
                        databaseManager?.Draw();
                        break;
                }
            }
            catch (Exception e)
            {
                EditorGUILayout.HelpBox($"Error in tab: {e.Message}", MessageType.Error);
                Debug.LogError($"Ultimate Inventory Tool Error: {e}");
            }

            EditorGUILayout.EndScrollView();
        }

        private void DrawFooter()
        {
            EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);

            // Status
            GUILayout.Label($"Items: {cachedItems?.Count ?? 0} | Recipes: {cachedRecipes?.Count ?? 0}",
                EditorStyles.miniLabel);

            GUILayout.FlexibleSpace();

            // Save indicator
            if (isDirty)
            {
                GUILayout.Label("• Unsaved Changes", new GUIStyle(EditorStyles.miniLabel)
                {
                    normal = { textColor = Color.yellow }
                });
            }

            EditorGUILayout.EndHorizontal();
        }

        public void RefreshCaches()
        {
            if (itemDatabase != null)
                cachedItems = itemDatabase.GetAllItems();
            else
                cachedItems = new List<ItemDefinition>();

            if (recipeDatabase != null)
                cachedRecipes = recipeDatabase.GetAllRecipes();
            else
                cachedRecipes = new List<RecipeDefinition>();

            // Notify all tabs
            dashboard?.Refresh();
            itemCreator?.Refresh();
            recipeBuilder?.Refresh();
            databaseManager?.Refresh();
        }

        public void MarkDirty()
        {
            isDirty = true;
            if (itemDatabase != null)
                EditorUtility.SetDirty(itemDatabase);
            if (recipeDatabase != null)
                EditorUtility.SetDirty(recipeDatabase);
        }

        private void SaveChangesInternal()
        {
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
            isDirty = false;
        }

        // Shared utility methods for tabs
        public ItemDefinition GetItem(string itemID)
        {
            return cachedItems?.FirstOrDefault(i => i.itemID == itemID);
        }

        public RecipeDefinition GetRecipe(string recipeID)
        {
            return cachedRecipes?.FirstOrDefault(r => r.recipeID == recipeID);
        }

        public List<ItemDefinition> GetItemsByCategory(ItemCategory category)
        {
            return cachedItems?.Where(i => i.primaryCategory == category).ToList() ?? new List<ItemDefinition>();
        }

        public void AddItem(ItemDefinition item)
        {
            if (itemDatabase != null && item != null)
            {
                itemDatabase.AddItem(item);
                if (cachedItems == null)
                    cachedItems = new List<ItemDefinition>();
                if (!cachedItems.Contains(item))
                    cachedItems.Add(item);
                MarkDirty();
            }
        }

        public void AddRecipe(RecipeDefinition recipe)
        {
            if (recipeDatabase != null && recipe != null)
            {
                recipeDatabase.AddRecipe(recipe);
                if (cachedRecipes == null)
                    cachedRecipes = new List<RecipeDefinition>();
                if (!cachedRecipes.Contains(recipe))
                    cachedRecipes.Add(recipe);
                MarkDirty();
            }
        }

        // ==================== TAB CLASSES ====================

        // Dashboard Tab
        public class DashboardTab
        {
            private UltimateInventoryTool tool;

            public DashboardTab(UltimateInventoryTool tool)
            {
                this.tool = tool;
            }

            public void Draw()
            {

                var safeHeaderStyle = tool.headerStyle ?? EditorStyles.boldLabel;
                var safeBoxStyle = tool.boxStyle ?? GUI.skin.box;

                EditorGUILayout.LabelField("Dashboard", safeHeaderStyle);

                EditorGUILayout.LabelField("Dashboard", tool.headerStyle);
                EditorGUILayout.Space(10);

                // Quick Stats
                EditorGUILayout.BeginHorizontal();

                DrawStatBox("Total Items", tool.cachedItems?.Count ?? 0, Color.cyan);
                DrawStatBox("Total Recipes", tool.cachedRecipes?.Count ?? 0, Color.green);
                DrawStatBox("Categories", CountCategories(), Color.yellow);

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.Space(10);

                // Quick Actions
                EditorGUILayout.LabelField("Quick Actions", EditorStyles.boldLabel);

                EditorGUILayout.BeginHorizontal();

                if (GUILayout.Button("Create Item", GUILayout.Height(40)))
                {
                    tool.currentTab = 1;
                    tool.itemCreator?.InitializeNewItem();
                }

                if (GUILayout.Button("Create Recipe", GUILayout.Height(40)))
                {
                    tool.currentTab = 2;
                    tool.recipeBuilder?.InitializeNewRecipe();
                }

                if (GUILayout.Button("Test Inventory", GUILayout.Height(40)))
                {
                    tool.currentTab = 3;
                }

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.Space(10);

                // Recent Items
                DrawRecentItems();
            }

            private void DrawStatBox(string label, int value, Color color)
            {
                var oldColor = GUI.backgroundColor;
                GUI.backgroundColor = color * 0.3f;

                EditorGUILayout.BeginVertical(GUI.skin.box, GUILayout.Width(120), GUILayout.Height(60));
                GUI.backgroundColor = oldColor;

                EditorGUILayout.LabelField(label, EditorStyles.miniLabel);

                var style = new GUIStyle(EditorStyles.boldLabel)
                {
                    fontSize = 24,
                    alignment = TextAnchor.MiddleCenter,
                    normal = { textColor = color }
                };

                EditorGUILayout.LabelField(value.ToString(), style);

                EditorGUILayout.EndVertical();
            }

            private int CountCategories()
            {
                if (tool.cachedItems == null || tool.cachedItems.Count == 0)
                    return 0;

                return tool.cachedItems.Select(i => i.primaryCategory).Distinct().Count();
            }

            private void DrawRecentItems()
            {
                EditorGUILayout.LabelField("Recent Items", EditorStyles.boldLabel);

                EditorGUILayout.BeginVertical(tool.boxStyle);

                var recentItems = tool.cachedItems?.Take(5).ToList() ?? new List<ItemDefinition>();

                if (recentItems.Count == 0)
                {
                    EditorGUILayout.HelpBox("No items found. Create your first item!", MessageType.Info);
                }
                else
                {
                    foreach (var item in recentItems)
                    {
                        EditorGUILayout.BeginHorizontal();

                        if (item.icon != null)
                        {
                            GUILayout.Label(item.icon.texture, GUILayout.Width(32), GUILayout.Height(32));
                        }
                        else
                        {
                            GUILayout.Box("", GUILayout.Width(32), GUILayout.Height(32));
                        }

                        EditorGUILayout.BeginVertical();
                        EditorGUILayout.LabelField(item.displayName, EditorStyles.boldLabel);
                        EditorGUILayout.LabelField($"{item.primaryCategory} | {item.weight}kg",
                            EditorStyles.miniLabel);
                        EditorGUILayout.EndVertical();

                        if (GUILayout.Button("Edit", GUILayout.Width(50)))
                        {
                            tool.currentTab = 1;
                            tool.itemCreator?.LoadItem(item);
                        }

                        EditorGUILayout.EndHorizontal();
                    }
                }

                EditorGUILayout.EndVertical();
            }

            public void Refresh()
            {
                // Refresh dashboard
            }
        }

        // Item Creator Tab - Simplified version
        public class ItemCreatorTab
        {
            private UltimateInventoryTool tool;
            private ItemDefinition currentItem;
            private bool isCreatingNew = true;

            // Editor fields
            private string itemID = "";
            private string displayName = "";
            private string description = "";
            private Sprite icon;
            private GameObject worldModel;

            private ItemCategory category = ItemCategory.Misc;
            private ItemSubcategory subcategory;
            private List<ItemTag> tags = new List<ItemTag>();

            private float weight = 1f;
            private int maxStackSize = 1;
            private Vector2Int gridSize = Vector2Int.one;

            private bool hasDurability = false;
            private float maxDurability = 100f;

            private int baseValue = 1;

            public ItemCreatorTab(UltimateInventoryTool tool)
            {
                this.tool = tool;
                InitializeNewItem();
            }

            public void Draw()
            {
                var safeHeaderStyle = tool.headerStyle ?? EditorStyles.boldLabel;
                var safeBoxStyle = tool.boxStyle ?? GUI.skin.box;
                
                EditorGUILayout.BeginHorizontal();

                // Left Panel - Item List
                EditorGUILayout.BeginVertical(GUILayout.Width(250));
                DrawItemList();
                EditorGUILayout.EndVertical();

                // Right Panel - Item Editor
                EditorGUILayout.BeginVertical();
                DrawItemEditor();
                EditorGUILayout.EndVertical();

                EditorGUILayout.EndHorizontal();
            }

            private void DrawItemList()
            {
                EditorGUILayout.LabelField("Items", tool.headerStyle);

                if (GUILayout.Button("+ Create New Item", GUILayout.Height(30)))
                {
                    InitializeNewItem();
                }

                EditorGUILayout.Space(5);

                var items = tool.cachedItems ?? new List<ItemDefinition>();

                foreach (var item in items.Take(20)) // Limit display for performance
                {
                    if (GUILayout.Button(item.displayName, EditorStyles.toolbarButton))
                    {
                        LoadItem(item);
                    }
                }
            }

            private void DrawItemEditor()
            {
                EditorGUILayout.LabelField(isCreatingNew ? "Create New Item" : $"Edit: {displayName}",
                    tool.headerStyle);

                EditorGUILayout.BeginVertical(tool.boxStyle);

                // Basic Info
                itemID = EditorGUILayout.TextField("Item ID", itemID);
                displayName = EditorGUILayout.TextField("Display Name", displayName);

                EditorGUILayout.LabelField("Description");
                description = EditorGUILayout.TextArea(description, GUILayout.Height(60));

                icon = (Sprite)EditorGUILayout.ObjectField("Icon", icon, typeof(Sprite), false);
                worldModel = (GameObject)EditorGUILayout.ObjectField("World Model", worldModel, typeof(GameObject), false);

                EditorGUILayout.Space(10);

                // Properties
                category = (ItemCategory)EditorGUILayout.EnumPopup("Category", category);
                subcategory = (ItemSubcategory)EditorGUILayout.EnumPopup("Subcategory", subcategory);

                weight = EditorGUILayout.FloatField("Weight (kg)", weight);
                maxStackSize = EditorGUILayout.IntField("Max Stack Size", maxStackSize);
                gridSize = EditorGUILayout.Vector2IntField("Grid Size", gridSize);

                EditorGUILayout.Space(10);

                // Durability
                hasDurability = EditorGUILayout.Toggle("Has Durability", hasDurability);
                if (hasDurability)
                {
                    EditorGUI.indentLevel++;
                    maxDurability = EditorGUILayout.FloatField("Max Durability", maxDurability);
                    EditorGUI.indentLevel--;
                }

                baseValue = EditorGUILayout.IntField("Base Value", baseValue);

                EditorGUILayout.Space(10);

                // Actions
                EditorGUILayout.BeginHorizontal();

                GUI.backgroundColor = Color.green;
                if (GUILayout.Button(isCreatingNew ? "Create Item" : "Save Changes", GUILayout.Height(30)))
                {
                    SaveItem();
                }
                GUI.backgroundColor = Color.white;

                if (!isCreatingNew && GUILayout.Button("Cancel", GUILayout.Height(30)))
                {
                    LoadItem(currentItem);
                }

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.EndVertical();
            }

            public void InitializeNewItem()
            {
                isCreatingNew = true;
                currentItem = null;

                itemID = "item_" + System.Guid.NewGuid().ToString().Substring(0, 8);
                displayName = "New Item";
                description = "";
                icon = null;
                worldModel = null;

                category = ItemCategory.Misc;
                subcategory = ItemSubcategory.None;
                tags.Clear();

                weight = 1f;
                maxStackSize = 1;
                gridSize = Vector2Int.one;

                hasDurability = false;
                maxDurability = 100f;

                baseValue = 1;
            }

            public void LoadItem(ItemDefinition item)
            {
                if (item == null) return;

                isCreatingNew = false;
                currentItem = item;

                itemID = item.itemID;
                displayName = item.displayName;
                description = item.description;
                icon = item.icon;
                worldModel = item.worldModel;

                category = item.primaryCategory;
                subcategory = item.subcategory;
                tags = item.tags?.ToList() ?? new List<ItemTag>();

                weight = item.weight;
                maxStackSize = item.maxStackSize;
                gridSize = item.gridSize;

                hasDurability = item.hasDurability;
                maxDurability = item.maxDurability;

                baseValue = item.baseValue;
            }

            private void SaveItem()
            {
                if (string.IsNullOrEmpty(itemID) || string.IsNullOrEmpty(displayName))
                {
                    EditorUtility.DisplayDialog("Error", "Item ID and Display Name are required", "OK");
                    return;
                }

                if (isCreatingNew)
                {
                    // Create directories if needed
                    if (!AssetDatabase.IsValidFolder("Assets/_Project/Data/Items"))
                    {
                        if (!AssetDatabase.IsValidFolder("Assets/_Project/Data"))
                        {
                            AssetDatabase.CreateFolder("Assets/_Project", "Data");
                        }
                        AssetDatabase.CreateFolder("Assets/_Project/Data", "Items");
                    }

                    currentItem = ScriptableObject.CreateInstance<ItemDefinition>();
                    string path = $"Assets/_Project/Data/Items/{itemID}.asset";
                    AssetDatabase.CreateAsset(currentItem, path);
                }

                // Update properties
                currentItem.itemID = itemID;
                currentItem.displayName = displayName;
                currentItem.description = description;
                currentItem.icon = icon;
                currentItem.worldModel = worldModel;

                currentItem.primaryCategory = category;
                currentItem.subcategory = subcategory;
                currentItem.tags = tags.ToArray();

                currentItem.weight = weight;
                currentItem.maxStackSize = maxStackSize;
                currentItem.gridSize = gridSize;

                currentItem.hasDurability = hasDurability;
                currentItem.maxDurability = maxDurability;

                currentItem.baseValue = baseValue;

                EditorUtility.SetDirty(currentItem);

                if (isCreatingNew)
                {
                    tool.AddItem(currentItem);
                    isCreatingNew = false;
                }
                else
                {
                    tool.MarkDirty();
                }

                AssetDatabase.SaveAssets();
                tool.RefreshCaches();
            }

            public void Refresh()
            {
                // Refresh item creator
            }
        }

        // Recipe Builder Tab - Simplified version
        public class RecipeBuilderTab
        {
            private UltimateInventoryTool tool;
            private RecipeDefinition currentRecipe;
            private bool isCreatingNew = true;

            private string recipeID = "";
            private string recipeName = "";
            private string description = "";

            private CraftingCategory category = CraftingCategory.Tools;
            private WorkstationType workstation = WorkstationType.None;

            private List<RecipeIngredient> ingredients = new List<RecipeIngredient>();
            private List<RecipeOutput> outputs = new List<RecipeOutput>();

            private float craftTime = 3f;

            public RecipeBuilderTab(UltimateInventoryTool tool)
            {
                this.tool = tool;
                InitializeNewRecipe();
            }

            public void Draw()
            {
                EditorGUILayout.BeginHorizontal();

                // Left Panel
                EditorGUILayout.BeginVertical(GUILayout.Width(250));
                DrawRecipeList();
                EditorGUILayout.EndVertical();

                // Right Panel
                EditorGUILayout.BeginVertical();
                DrawRecipeEditor();
                EditorGUILayout.EndVertical();

                EditorGUILayout.EndHorizontal();
            }

            private void DrawRecipeList()
            {
                EditorGUILayout.LabelField("Recipes", tool.headerStyle);

                if (GUILayout.Button("+ Create New Recipe", GUILayout.Height(30)))
                {
                    InitializeNewRecipe();
                }

                EditorGUILayout.Space(5);

                var recipes = tool.cachedRecipes ?? new List<RecipeDefinition>();

                foreach (var recipe in recipes.Take(20))
                {
                    if (GUILayout.Button(recipe.recipeName, EditorStyles.toolbarButton))
                    {
                        LoadRecipe(recipe);
                    }
                }
            }

            private void DrawRecipeEditor()
            {
                EditorGUILayout.LabelField(isCreatingNew ? "Create New Recipe" : $"Edit: {recipeName}",
                    tool.headerStyle);

                EditorGUILayout.BeginVertical(tool.boxStyle);

                // Basic Info
                recipeID = EditorGUILayout.TextField("Recipe ID", recipeID);
                recipeName = EditorGUILayout.TextField("Recipe Name", recipeName);
                description = EditorGUILayout.TextArea(description, GUILayout.Height(60));

                category = (CraftingCategory)EditorGUILayout.EnumPopup("Category", category);
                workstation = (WorkstationType)EditorGUILayout.EnumPopup("Workstation", workstation);
                craftTime = EditorGUILayout.FloatField("Craft Time (seconds)", craftTime);

                EditorGUILayout.Space(10);

                // Ingredients
                EditorGUILayout.LabelField("Ingredients", EditorStyles.boldLabel);
                for (int i = 0; i < ingredients.Count; i++)
                {
                    EditorGUILayout.BeginHorizontal();
                    ingredients[i].specificItem = (ItemDefinition)EditorGUILayout.ObjectField(
                        ingredients[i].specificItem, typeof(ItemDefinition), false);
                    ingredients[i].quantity = EditorGUILayout.IntField(ingredients[i].quantity, GUILayout.Width(50));

                    if (GUILayout.Button("X", GUILayout.Width(20)))
                    {
                        ingredients.RemoveAt(i);
                        i--;
                    }
                    EditorGUILayout.EndHorizontal();
                }

                if (GUILayout.Button("+ Add Ingredient"))
                {
                    ingredients.Add(new RecipeIngredient());
                }

                EditorGUILayout.Space(10);

                // Outputs
                EditorGUILayout.LabelField("Outputs", EditorStyles.boldLabel);
                for (int i = 0; i < outputs.Count; i++)
                {
                    EditorGUILayout.BeginHorizontal();
                    outputs[i].item = (ItemDefinition)EditorGUILayout.ObjectField(
                        outputs[i].item, typeof(ItemDefinition), false);
                    outputs[i].quantityMin = EditorGUILayout.IntField(outputs[i].quantityMin, GUILayout.Width(50));

                    if (GUILayout.Button("X", GUILayout.Width(20)))
                    {
                        outputs.RemoveAt(i);
                        i--;
                    }
                    EditorGUILayout.EndHorizontal();
                }

                if (GUILayout.Button("+ Add Output"))
                {
                    outputs.Add(new RecipeOutput());
                }

                EditorGUILayout.Space(10);

                // Actions
                GUI.backgroundColor = Color.green;
                if (GUILayout.Button(isCreatingNew ? "Create Recipe" : "Save Changes", GUILayout.Height(30)))
                {
                    SaveRecipe();
                }
                GUI.backgroundColor = Color.white;

                EditorGUILayout.EndVertical();
            }

            public void InitializeNewRecipe()
            {
                isCreatingNew = true;
                currentRecipe = null;

                recipeID = "recipe_" + System.Guid.NewGuid().ToString().Substring(0, 8);
                recipeName = "New Recipe";
                description = "";

                category = CraftingCategory.Tools;
                workstation = WorkstationType.None;

                ingredients.Clear();
                outputs.Clear();

                craftTime = 3f;
            }

            private void LoadRecipe(RecipeDefinition recipe)
            {
                if (recipe == null) return;

                isCreatingNew = false;
                currentRecipe = recipe;

                recipeID = recipe.recipeID;
                recipeName = recipe.recipeName;
                description = recipe.description;

                category = recipe.category;
                workstation = recipe.requiredWorkstation;

                ingredients = recipe.ingredients?.ToList() ?? new List<RecipeIngredient>();
                outputs = recipe.outputs?.ToList() ?? new List<RecipeOutput>();

                craftTime = recipe.baseCraftTime;
            }

            private void SaveRecipe()
            {
                if (string.IsNullOrEmpty(recipeID) || string.IsNullOrEmpty(recipeName))
                {
                    EditorUtility.DisplayDialog("Error", "Recipe ID and Name are required", "OK");
                    return;
                }

                if (isCreatingNew)
                {
                    if (!AssetDatabase.IsValidFolder("Assets/_Project/Data/Recipes"))
                    {
                        AssetDatabase.CreateFolder("Assets/_Project/Data", "Recipes");
                    }

                    currentRecipe = ScriptableObject.CreateInstance<RecipeDefinition>();
                    string path = $"Assets/_Project/Data/Recipes/{recipeID}.asset";
                    AssetDatabase.CreateAsset(currentRecipe, path);
                }

                currentRecipe.recipeID = recipeID;
                currentRecipe.recipeName = recipeName;
                currentRecipe.description = description;

                currentRecipe.category = category;
                currentRecipe.requiredWorkstation = workstation;

                currentRecipe.ingredients = ingredients.ToArray();
                currentRecipe.outputs = outputs.ToArray();

                currentRecipe.baseCraftTime = craftTime;

                EditorUtility.SetDirty(currentRecipe);

                if (isCreatingNew)
                {
                    tool.AddRecipe(currentRecipe);
                    isCreatingNew = false;
                }
                else
                {
                    tool.MarkDirty();
                }

                AssetDatabase.SaveAssets();
                tool.RefreshCaches();
            }

            public void Refresh()
            {
                // Refresh recipe builder
            }
        }

        // Simplified placeholder tabs
        public class InventorySimulatorTab
        {
            private UltimateInventoryTool tool;

            public InventorySimulatorTab(UltimateInventoryTool tool)
            {
                this.tool = tool;
            }

            public void Draw()
            {
                EditorGUILayout.LabelField("Inventory Simulator", tool.headerStyle);
                EditorGUILayout.HelpBox("Inventory simulation coming soon!", MessageType.Info);
            }

            public void Refresh() { }
        }

        public class CraftingTestTab
        {
            private UltimateInventoryTool tool;

            public CraftingTestTab(UltimateInventoryTool tool)
            {
                this.tool = tool;
            }

            public void Draw()
            {
                EditorGUILayout.LabelField("Crafting Test", tool.headerStyle);
                EditorGUILayout.HelpBox("Crafting test system coming soon!", MessageType.Info);
            }

            public void Refresh() { }
        }

        public class DatabaseManagerTab
        {
            private UltimateInventoryTool tool;

            public DatabaseManagerTab(UltimateInventoryTool tool)
            {
                this.tool = tool;
            }

            public void Draw()
            {
                // Use safe style access
                var safeHeaderStyle = tool.headerStyle ?? EditorStyles.boldLabel;
                var safeBoxStyle = tool.boxStyle ?? GUI.skin.box;

                EditorGUILayout.LabelField("Database Manager", safeHeaderStyle);

                EditorGUILayout.BeginVertical(safeBoxStyle);

                EditorGUILayout.LabelField("Database Info", EditorStyles.boldLabel);
                EditorGUILayout.LabelField($"Items: {tool.cachedItems?.Count ?? 0}");
                EditorGUILayout.LabelField($"Recipes: {tool.cachedRecipes?.Count ?? 0}");

                EditorGUILayout.Space(10);

                if (GUILayout.Button("Refresh All", GUILayout.Height(30)))
                {
                    tool.RefreshCaches();
                }

                if (GUILayout.Button("Save All", GUILayout.Height(30)))
                {
                    tool.SaveChangesInternal();
                }

                EditorGUILayout.Space(10);

                // Add more database operations
                EditorGUILayout.LabelField("Database Operations", EditorStyles.boldLabel);

                if (GUILayout.Button("Validate All Items", GUILayout.Height(25)))
                {
                    ValidateItems();
                }

                if (GUILayout.Button("Validate All Recipes", GUILayout.Height(25)))
                {
                    ValidateRecipes();
                }

                if (GUILayout.Button("Export Database to JSON", GUILayout.Height(25)))
                {
                    ExportToJSON();
                }

                EditorGUILayout.EndVertical();
            }

            private void ValidateItems()
            {
                int issues = 0;
                foreach (var item in tool.cachedItems ?? new List<ItemDefinition>())
                {
                    if (string.IsNullOrEmpty(item.itemID))
                    {
                        Debug.LogWarning($"Item '{item.name}' has no ID");
                        issues++;
                    }
                    if (item.weight <= 0)
                    {
                        Debug.LogWarning($"Item '{item.displayName}' has invalid weight: {item.weight}");
                        issues++;
                    }
                    if (item.gridSize.x <= 0 || item.gridSize.y <= 0)
                    {
                        Debug.LogWarning($"Item '{item.displayName}' has invalid grid size: {item.gridSize}");
                        issues++;
                    }
                }

                if (issues == 0)
                {
                    Debug.Log("? All items validated successfully!");
                    EditorUtility.DisplayDialog("Validation Complete", "All items are valid!", "Great!");
                }
                else
                {
                    Debug.LogError($"? Found {issues} validation issues");
                    EditorUtility.DisplayDialog("Validation Failed", $"Found {issues} issues. Check console for details.", "OK");
                }
            }

            private void ValidateRecipes()
            {
                int issues = 0;
                foreach (var recipe in tool.cachedRecipes ?? new List<RecipeDefinition>())
                {
                    if (string.IsNullOrEmpty(recipe.recipeID))
                    {
                        Debug.LogWarning($"Recipe '{recipe.name}' has no ID");
                        issues++;
                    }
                    if (recipe.ingredients == null || recipe.ingredients.Length == 0)
                    {
                        Debug.LogWarning($"Recipe '{recipe.recipeName}' has no ingredients");
                        issues++;
                    }
                    if (recipe.outputs == null || recipe.outputs.Length == 0)
                    {
                        Debug.LogWarning($"Recipe '{recipe.recipeName}' has no outputs");
                        issues++;
                    }
                }

                if (issues == 0)
                {
                    Debug.Log("? All recipes validated successfully!");
                    EditorUtility.DisplayDialog("Validation Complete", "All recipes are valid!", "Great!");
                }
                else
                {
                    Debug.LogError($"? Found {issues} validation issues");
                    EditorUtility.DisplayDialog("Validation Failed", $"Found {issues} issues. Check console for details.", "OK");
                }
            }

            private void ExportToJSON()
            {
                string path = EditorUtility.SaveFilePanel("Export Database", "", "inventory_database.json", "json");
                if (!string.IsNullOrEmpty(path))
                {
                    var data = new
                    {
                        items = tool.cachedItems,
                        recipes = tool.cachedRecipes,
                        exportDate = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
                    };

                    string json = JsonUtility.ToJson(data, true);
                    System.IO.File.WriteAllText(path, json);

                    Debug.Log($"Database exported to: {path}");
                    EditorUtility.DisplayDialog("Export Complete", "Database exported successfully!", "OK");
                }
            }

            public void Refresh()
            {
                // Refresh database manager if needed
            }
        }
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\UltimateInventoryTool\WildSurvivalDatabaseGenerator.cs
// ============================================

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using UnityEditor;
//using UnityEngine;
//using WildSurvival.Editor.Tools;

//namespace WildSurvival.Editor.DatabaseGeneration
//{
//    /// <summary>
//    /// Comprehensive database generator for Wild Survival inventory system
//    /// Creates a realistic, balanced set of items and recipes with proper progression
//    /// </summary>
//    public class WildSurvivalDatabaseGenerator : EditorWindow
//    {
//        // Database references
//        private ItemDatabase itemDatabase;
//        private RecipeDatabase recipeDatabase;

//        // Generation stats
//        private int itemsGenerated = 0;
//        private int recipesGenerated = 0;
//        private List<string> generationLog = new List<string>();

//        [MenuItem("Tools/Wild Survival/Generate Complete Database")]
//        public static void ShowWindow()
//        {
//            var window = GetWindow<WildSurvivalDatabaseGenerator>("Database Generator");
//            window.minSize = new Vector2(600, 400);
//            window.Show();
//        }

//        private void OnGUI()
//        {
//            EditorGUILayout.LabelField("Wild Survival Database Generator", EditorStyles.boldLabel);
//            EditorGUILayout.Space(10);

//            // Database references
//            itemDatabase = (ItemDatabase)EditorGUILayout.ObjectField("Item Database", itemDatabase, typeof(ItemDatabase), false);
//            recipeDatabase = (RecipeDatabase)EditorGUILayout.ObjectField("Recipe Database", recipeDatabase, typeof(RecipeDatabase), false);

//            EditorGUILayout.Space(10);

//            if (itemDatabase == null || recipeDatabase == null)
//            {
//                EditorGUILayout.HelpBox("Please assign both databases before generating", MessageType.Warning);
//                return;
//            }

//            // Generation options
//            EditorGUILayout.LabelField("Generation Options", EditorStyles.boldLabel);

//            EditorGUILayout.BeginHorizontal();
//            if (GUILayout.Button("Generate All Items", GUILayout.Height(30)))
//            {
//                GenerateAllItems();
//            }

//            if (GUILayout.Button("Generate All Recipes", GUILayout.Height(30)))
//            {
//                GenerateAllRecipes();
//            }
//            EditorGUILayout.EndHorizontal();

//            if (GUILayout.Button("GENERATE COMPLETE DATABASE", GUILayout.Height(40)))
//            {
//                GenerateCompleteDatabase();
//            }

//            EditorGUILayout.Space(10);

//            // Stats
//            EditorGUILayout.LabelField($"Items Generated: {itemsGenerated}");
//            EditorGUILayout.LabelField($"Recipes Generated: {recipesGenerated}");

//            // Log
//            if (generationLog.Count > 0)
//            {
//                EditorGUILayout.LabelField("Generation Log:", EditorStyles.boldLabel);
//                var logStyle = new GUIStyle(EditorStyles.textArea) { wordWrap = true };
//                EditorGUILayout.TextArea(string.Join("\n", generationLog.TakeLast(10)), logStyle, GUILayout.Height(100));
//            }
//        }

//        private void GenerateCompleteDatabase()
//        {
//            generationLog.Clear();
//            itemsGenerated = 0;
//            recipesGenerated = 0;

//            GenerateAllItems();
//            GenerateAllRecipes();

//            AssetDatabase.SaveAssets();
//            AssetDatabase.Refresh();

//            generationLog.Add($"? Complete database generated: {itemsGenerated} items, {recipesGenerated} recipes");
//            Debug.Log($"Database generation complete! Created {itemsGenerated} items and {recipesGenerated} recipes");
//        }

//        private void GenerateAllItems()
//        {
//            // Clear existing items (optional - comment out to append)
//            // itemDatabase.Clear();

//            // Generate items by category
//            GenerateResourceItems();
//            GenerateToolItems();
//            GenerateWeaponItems();
//            GenerateFoodItems();
//            GenerateMedicineItems();
//            GenerateClothingItems();
//            GenerateBuildingItems();
//            GenerateContainerItems();
//            GenerateFuelItems();
//            GenerateMiscItems();

//            EditorUtility.SetDirty(itemDatabase);
//        }

//        private void GenerateResourceItems()
//        {
//            // === WOOD RESOURCES ===
//            CreateItem("wood_log", "Log", "A sturdy log from a tree", ItemCategory.Resource,
//                weight: 5f, stackSize: 5, gridSize: new Vector2Int(1, 3));

//            CreateItem("wood_stick", "Stick", "A small wooden stick", ItemCategory.Resource,
//                weight: 0.2f, stackSize: 20, gridSize: new Vector2Int(1, 2));

//            CreateItem("wood_plank", "Wooden Plank", "Processed wooden plank", ItemCategory.Resource,
//                weight: 2f, stackSize: 10, gridSize: new Vector2Int(2, 1));

//            CreateItem("bark", "Tree Bark", "Rough tree bark", ItemCategory.Resource,
//                weight: 0.1f, stackSize: 30, gridSize: new Vector2Int(1, 1));

//            CreateItem("resin", "Tree Resin", "Sticky tree resin", ItemCategory.Resource,
//                weight: 0.05f, stackSize: 50, gridSize: new Vector2Int(1, 1));

//            // === STONE RESOURCES ===
//            CreateItem("stone_small", "Small Stone", "A small stone", ItemCategory.Resource,
//                weight: 0.5f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("stone_large", "Large Stone", "A heavy stone", ItemCategory.Resource,
//                weight: 3f, stackSize: 5, gridSize: new Vector2Int(2, 2));

//            CreateItem("flint", "Flint", "Sharp flint stone", ItemCategory.Resource,
//                weight: 0.3f, stackSize: 15, gridSize: new Vector2Int(1, 1));

//            CreateItem("clay", "Clay", "Moldable clay", ItemCategory.Resource,
//                weight: 1f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("sand", "Sand", "Fine sand", ItemCategory.Resource,
//                weight: 1.5f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            // === METAL RESOURCES ===
//            CreateItem("ore_copper", "Copper Ore", "Raw copper ore", ItemCategory.Resource,
//                weight: 2f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("ore_iron", "Iron Ore", "Raw iron ore", ItemCategory.Resource,
//                weight: 2.5f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("ore_tin", "Tin Ore", "Raw tin ore", ItemCategory.Resource,
//                weight: 2f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("ingot_copper", "Copper Ingot", "Refined copper ingot", ItemCategory.Resource,
//                weight: 1f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("ingot_iron", "Iron Ingot", "Refined iron ingot", ItemCategory.Resource,
//                weight: 1.2f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("ingot_bronze", "Bronze Ingot", "Bronze alloy ingot", ItemCategory.Resource,
//                weight: 1.1f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("ingot_steel", "Steel Ingot", "High-quality steel ingot", ItemCategory.Resource,
//                weight: 1.3f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            // === FIBER RESOURCES ===
//            CreateItem("fiber_plant", "Plant Fiber", "Basic plant fibers", ItemCategory.Resource,
//                weight: 0.05f, stackSize: 50, gridSize: new Vector2Int(1, 1));

//            CreateItem("rope", "Rope", "Woven rope", ItemCategory.Resource,
//                weight: 0.3f, stackSize: 10, gridSize: new Vector2Int(1, 2));

//            CreateItem("cloth", "Cloth", "Basic woven cloth", ItemCategory.Resource,
//                weight: 0.2f, stackSize: 20, gridSize: new Vector2Int(2, 2));

//            CreateItem("leather", "Leather", "Tanned animal hide", ItemCategory.Resource,
//                weight: 0.5f, stackSize: 10, gridSize: new Vector2Int(2, 2));

//            CreateItem("fur", "Animal Fur", "Warm animal fur", ItemCategory.Resource,
//                weight: 0.3f, stackSize: 15, gridSize: new Vector2Int(2, 2));

//            // === ANIMAL RESOURCES ===
//            CreateItem("bone", "Bone", "Animal bone", ItemCategory.Resource,
//                weight: 0.3f, stackSize: 20, gridSize: new Vector2Int(1, 2));

//            CreateItem("antler", "Antler", "Deer antler", ItemCategory.Resource,
//                weight: 0.5f, stackSize: 5, gridSize: new Vector2Int(2, 1));

//            CreateItem("feather", "Feather", "Bird feather", ItemCategory.Resource,
//                weight: 0.01f, stackSize: 100, gridSize: new Vector2Int(1, 1));

//            CreateItem("animal_fat", "Animal Fat", "Rendered animal fat", ItemCategory.Resource,
//                weight: 0.2f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            LogGeneration($"Generated {29} resource items");
//        }

//        private void GenerateToolItems()
//        {
//            // === BASIC TOOLS ===
//            CreateItem("tool_stone_knife", "Stone Knife", "Basic cutting tool", ItemCategory.Tool,
//                weight: 0.5f, stackSize: 1, gridSize: new Vector2Int(1, 2), durability: 50f);

//            CreateItem("tool_stone_axe", "Stone Axe", "Basic wood chopping tool", ItemCategory.Tool,
//                weight: 2f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 75f);

//            CreateItem("tool_stone_pickaxe", "Stone Pickaxe", "Basic mining tool", ItemCategory.Tool,
//                weight: 2.5f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 75f);

//            CreateItem("tool_stone_hammer", "Stone Hammer", "Basic crafting tool", ItemCategory.Tool,
//                weight: 1.5f, stackSize: 1, gridSize: new Vector2Int(1, 2), durability: 100f);

//            CreateItem("tool_stone_shovel", "Stone Shovel", "Basic digging tool", ItemCategory.Tool,
//                weight: 1.8f, stackSize: 1, gridSize: new Vector2Int(1, 3), durability: 60f);

//            // === BRONZE TOOLS ===
//            CreateItem("tool_bronze_knife", "Bronze Knife", "Sharp cutting tool", ItemCategory.Tool,
//                weight: 0.6f, stackSize: 1, gridSize: new Vector2Int(1, 2), durability: 150f);

//            CreateItem("tool_bronze_axe", "Bronze Axe", "Efficient wood chopping tool", ItemCategory.Tool,
//                weight: 2.2f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 200f);

//            CreateItem("tool_bronze_pickaxe", "Bronze Pickaxe", "Durable mining tool", ItemCategory.Tool,
//                weight: 2.7f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 200f);

//            CreateItem("tool_bronze_hammer", "Bronze Hammer", "Quality crafting tool", ItemCategory.Tool,
//                weight: 1.7f, stackSize: 1, gridSize: new Vector2Int(1, 2), durability: 250f);

//            // === IRON TOOLS ===
//            CreateItem("tool_iron_knife", "Iron Knife", "Professional cutting tool", ItemCategory.Tool,
//                weight: 0.7f, stackSize: 1, gridSize: new Vector2Int(1, 2), durability: 300f);

//            CreateItem("tool_iron_axe", "Iron Axe", "Professional wood chopping tool", ItemCategory.Tool,
//                weight: 2.5f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 350f);

//            CreateItem("tool_iron_pickaxe", "Iron Pickaxe", "Professional mining tool", ItemCategory.Tool,
//                weight: 3f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 350f);

//            CreateItem("tool_iron_hammer", "Iron Hammer", "Professional crafting tool", ItemCategory.Tool,
//                weight: 2f, stackSize: 1, gridSize: new Vector2Int(1, 2), durability: 400f);

//            CreateItem("tool_iron_shovel", "Iron Shovel", "Professional digging tool", ItemCategory.Tool,
//                weight: 2.2f, stackSize: 1, gridSize: new Vector2Int(1, 3), durability: 300f);

//            // === STEEL TOOLS ===
//            CreateItem("tool_steel_knife", "Steel Knife", "Master cutting tool", ItemCategory.Tool,
//                weight: 0.8f, stackSize: 1, gridSize: new Vector2Int(1, 2), durability: 500f);

//            CreateItem("tool_steel_axe", "Steel Axe", "Master wood chopping tool", ItemCategory.Tool,
//                weight: 2.8f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 600f);

//            CreateItem("tool_steel_pickaxe", "Steel Pickaxe", "Master mining tool", ItemCategory.Tool,
//                weight: 3.3f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 600f);

//            // === SPECIAL TOOLS ===
//            CreateItem("tool_fishing_rod", "Fishing Rod", "Tool for catching fish", ItemCategory.Tool,
//                weight: 0.5f, stackSize: 1, gridSize: new Vector2Int(1, 4), durability: 100f);

//            CreateItem("tool_saw", "Saw", "Tool for precise wood cutting", ItemCategory.Tool,
//                weight: 1f, stackSize: 1, gridSize: new Vector2Int(2, 1), durability: 200f);

//            CreateItem("tool_chisel", "Chisel", "Tool for detailed carving", ItemCategory.Tool,
//                weight: 0.3f, stackSize: 1, gridSize: new Vector2Int(1, 1), durability: 150f);

//            CreateItem("tool_tongs", "Tongs", "Tool for handling hot materials", ItemCategory.Tool,
//                weight: 0.8f, stackSize: 1, gridSize: new Vector2Int(1, 2), durability: 300f);

//            CreateItem("tool_mortar_pestle", "Mortar & Pestle", "Tool for grinding", ItemCategory.Tool,
//                weight: 2f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 500f);

//            LogGeneration($"Generated {22} tool items");
//        }

//        private void GenerateWeaponItems()
//        {
//            // === MELEE WEAPONS ===
//            CreateItem("weapon_wooden_club", "Wooden Club", "Basic bludgeoning weapon", ItemCategory.Weapon,
//                weight: 1.5f, stackSize: 1, gridSize: new Vector2Int(1, 3), durability: 50f);

//            CreateItem("weapon_stone_spear", "Stone Spear", "Basic thrusting weapon", ItemCategory.Weapon,
//                weight: 2f, stackSize: 1, gridSize: new Vector2Int(1, 4), durability: 75f);

//            CreateItem("weapon_bronze_sword", "Bronze Sword", "Balanced cutting weapon", ItemCategory.Weapon,
//                weight: 1.8f, stackSize: 1, gridSize: new Vector2Int(1, 3), durability: 200f);

//            CreateItem("weapon_iron_sword", "Iron Sword", "Professional combat weapon", ItemCategory.Weapon,
//                weight: 2.2f, stackSize: 1, gridSize: new Vector2Int(1, 3), durability: 350f);

//            CreateItem("weapon_steel_sword", "Steel Sword", "Master combat weapon", ItemCategory.Weapon,
//                weight: 2.5f, stackSize: 1, gridSize: new Vector2Int(1, 3), durability: 600f);

//            CreateItem("weapon_battle_axe", "Battle Axe", "Heavy combat weapon", ItemCategory.Weapon,
//                weight: 3.5f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 400f);

//            // === RANGED WEAPONS ===
//            CreateItem("weapon_sling", "Sling", "Basic ranged weapon", ItemCategory.Weapon,
//                weight: 0.2f, stackSize: 1, gridSize: new Vector2Int(1, 1), durability: 100f);

//            CreateItem("weapon_bow_simple", "Simple Bow", "Basic archery weapon", ItemCategory.Weapon,
//                weight: 0.8f, stackSize: 1, gridSize: new Vector2Int(1, 3), durability: 100f);

//            CreateItem("weapon_bow_recurve", "Recurve Bow", "Advanced archery weapon", ItemCategory.Weapon,
//                weight: 1f, stackSize: 1, gridSize: new Vector2Int(1, 3), durability: 200f);

//            CreateItem("weapon_crossbow", "Crossbow", "Mechanical ranged weapon", ItemCategory.Weapon,
//                weight: 3f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 300f);

//            // === AMMUNITION ===
//            CreateItem("ammo_arrow_stone", "Stone Arrow", "Basic arrow", ItemCategory.Weapon,
//                weight: 0.05f, stackSize: 50, gridSize: new Vector2Int(1, 2));

//            CreateItem("ammo_arrow_bronze", "Bronze Arrow", "Sharp arrow", ItemCategory.Weapon,
//                weight: 0.06f, stackSize: 50, gridSize: new Vector2Int(1, 2));

//            CreateItem("ammo_arrow_iron", "Iron Arrow", "Professional arrow", ItemCategory.Weapon,
//                weight: 0.07f, stackSize: 50, gridSize: new Vector2Int(1, 2));

//            CreateItem("ammo_bolt", "Crossbow Bolt", "Heavy projectile", ItemCategory.Weapon,
//                weight: 0.1f, stackSize: 30, gridSize: new Vector2Int(1, 2));

//            LogGeneration($"Generated {14} weapon items");
//        }

//        private void GenerateFoodItems()
//        {
//            // === RAW FOODS ===
//            CreateItem("food_meat_raw", "Raw Meat", "Uncooked animal meat", ItemCategory.Food,
//                weight: 0.5f, stackSize: 10, gridSize: new Vector2Int(2, 1));

//            CreateItem("food_fish_raw", "Raw Fish", "Freshly caught fish", ItemCategory.Food,
//                weight: 0.3f, stackSize: 10, gridSize: new Vector2Int(2, 1));

//            CreateItem("food_berries", "Wild Berries", "Foraged berries", ItemCategory.Food,
//                weight: 0.1f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("food_mushroom", "Wild Mushroom", "Foraged mushroom", ItemCategory.Food,
//                weight: 0.05f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("food_roots", "Edible Roots", "Nutritious roots", ItemCategory.Food,
//                weight: 0.2f, stackSize: 15, gridSize: new Vector2Int(1, 1));

//            CreateItem("food_nuts", "Wild Nuts", "Protein-rich nuts", ItemCategory.Food,
//                weight: 0.1f, stackSize: 30, gridSize: new Vector2Int(1, 1));

//            CreateItem("food_honey", "Wild Honey", "Natural sweetener", ItemCategory.Food,
//                weight: 0.3f, stackSize: 5, gridSize: new Vector2Int(1, 1));

//            CreateItem("food_eggs", "Bird Eggs", "Fresh eggs", ItemCategory.Food,
//                weight: 0.1f, stackSize: 12, gridSize: new Vector2Int(1, 1));

//            // === COOKED FOODS ===
//            CreateItem("food_meat_cooked", "Cooked Meat", "Grilled meat", ItemCategory.Food,
//                weight: 0.4f, stackSize: 10, gridSize: new Vector2Int(2, 1));

//            CreateItem("food_fish_cooked", "Cooked Fish", "Grilled fish", ItemCategory.Food,
//                weight: 0.25f, stackSize: 10, gridSize: new Vector2Int(2, 1));

//            CreateItem("food_meat_smoked", "Smoked Meat", "Preserved meat", ItemCategory.Food,
//                weight: 0.3f, stackSize: 15, gridSize: new Vector2Int(2, 1));

//            CreateItem("food_fish_smoked", "Smoked Fish", "Preserved fish", ItemCategory.Food,
//                weight: 0.2f, stackSize: 15, gridSize: new Vector2Int(2, 1));

//            CreateItem("food_stew", "Hearty Stew", "Nutritious meal", ItemCategory.Food,
//                weight: 0.8f, stackSize: 5, gridSize: new Vector2Int(1, 1));

//            CreateItem("food_bread", "Bread", "Baked bread", ItemCategory.Food,
//                weight: 0.3f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("food_dried_fruit", "Dried Fruit", "Preserved fruit", ItemCategory.Food,
//                weight: 0.05f, stackSize: 30, gridSize: new Vector2Int(1, 1));

//            CreateItem("food_jerky", "Meat Jerky", "Long-lasting protein", ItemCategory.Food,
//                weight: 0.1f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            // === DRINKS ===
//            CreateItem("drink_water_dirty", "Dirty Water", "Unsafe water", ItemCategory.Food,
//                weight: 1f, stackSize: 1, gridSize: new Vector2Int(1, 2));

//            CreateItem("drink_water_clean", "Clean Water", "Purified water", ItemCategory.Food,
//                weight: 1f, stackSize: 1, gridSize: new Vector2Int(1, 2));

//            CreateItem("drink_tea", "Herbal Tea", "Soothing beverage", ItemCategory.Food,
//                weight: 0.5f, stackSize: 5, gridSize: new Vector2Int(1, 1));

//            CreateItem("drink_juice", "Fruit Juice", "Refreshing drink", ItemCategory.Food,
//                weight: 0.5f, stackSize: 5, gridSize: new Vector2Int(1, 1));

//            LogGeneration($"Generated {20} food items");
//        }

//        private void GenerateMedicineItems()
//        {
//            CreateItem("medicine_bandage", "Bandage", "Basic wound dressing", ItemCategory.Medicine,
//                weight: 0.05f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("medicine_herbs", "Medicinal Herbs", "Natural healing herbs", ItemCategory.Medicine,
//                weight: 0.02f, stackSize: 30, gridSize: new Vector2Int(1, 1));

//            CreateItem("medicine_poultice", "Herbal Poultice", "Healing paste", ItemCategory.Medicine,
//                weight: 0.1f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("medicine_antidote", "Antidote", "Poison remedy", ItemCategory.Medicine,
//                weight: 0.1f, stackSize: 5, gridSize: new Vector2Int(1, 1));

//            CreateItem("medicine_painkiller", "Pain Relief", "Natural painkiller", ItemCategory.Medicine,
//                weight: 0.05f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("medicine_antiseptic", "Antiseptic", "Infection prevention", ItemCategory.Medicine,
//                weight: 0.2f, stackSize: 5, gridSize: new Vector2Int(1, 1));

//            CreateItem("medicine_salve", "Healing Salve", "Skin treatment", ItemCategory.Medicine,
//                weight: 0.1f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("medicine_tonic", "Health Tonic", "Vitality booster", ItemCategory.Medicine,
//                weight: 0.3f, stackSize: 5, gridSize: new Vector2Int(1, 2));

//            LogGeneration($"Generated {8} medicine items");
//        }

//        private void GenerateClothingItems()
//        {
//            // === HEAD ===
//            CreateItem("clothing_hat_cloth", "Cloth Hat", "Basic head protection", ItemCategory.Clothing,
//                weight: 0.1f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 100f);

//            CreateItem("clothing_hat_leather", "Leather Hat", "Durable head protection", ItemCategory.Clothing,
//                weight: 0.2f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 200f);

//            CreateItem("clothing_hat_fur", "Fur Hat", "Warm head protection", ItemCategory.Clothing,
//                weight: 0.3f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 150f);

//            // === CHEST ===
//            CreateItem("clothing_shirt_cloth", "Cloth Shirt", "Basic torso clothing", ItemCategory.Clothing,
//                weight: 0.3f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 100f);

//            CreateItem("clothing_shirt_leather", "Leather Vest", "Protective torso clothing", ItemCategory.Clothing,
//                weight: 0.8f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 250f);

//            CreateItem("clothing_coat_fur", "Fur Coat", "Warm torso clothing", ItemCategory.Clothing,
//                weight: 1.5f, stackSize: 1, gridSize: new Vector2Int(3, 3), durability: 200f);

//            // === LEGS ===
//            CreateItem("clothing_pants_cloth", "Cloth Pants", "Basic leg clothing", ItemCategory.Clothing,
//                weight: 0.4f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 100f);

//            CreateItem("clothing_pants_leather", "Leather Pants", "Durable leg clothing", ItemCategory.Clothing,
//                weight: 0.6f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 200f);

//            // === FEET ===
//            CreateItem("clothing_shoes_cloth", "Cloth Shoes", "Basic footwear", ItemCategory.Clothing,
//                weight: 0.2f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 75f);

//            CreateItem("clothing_boots_leather", "Leather Boots", "Durable footwear", ItemCategory.Clothing,
//                weight: 0.5f, stackSize: 1, gridSize: new Vector2Int(2, 2), durability: 200f);

//            // === HANDS ===
//            CreateItem("clothing_gloves_cloth", "Cloth Gloves", "Basic hand protection", ItemCategory.Clothing,
//                weight: 0.05f, stackSize: 1, gridSize: new Vector2Int(1, 1), durability: 50f);

//            CreateItem("clothing_gloves_leather", "Leather Gloves", "Work gloves", ItemCategory.Clothing,
//                weight: 0.1f, stackSize: 1, gridSize: new Vector2Int(1, 1), durability: 150f);

//            // === ACCESSORIES ===
//            CreateItem("clothing_backpack_small", "Small Backpack", "Increases carry capacity", ItemCategory.Clothing,
//                weight: 0.5f, stackSize: 1, gridSize: new Vector2Int(2, 3), durability: 200f);

//            CreateItem("clothing_backpack_large", "Large Backpack", "Greatly increases carry capacity", ItemCategory.Clothing,
//                weight: 1f, stackSize: 1, gridSize: new Vector2Int(3, 3), durability: 300f);

//            CreateItem("clothing_belt", "Tool Belt", "Additional quick slots", ItemCategory.Clothing,
//                weight: 0.3f, stackSize: 1, gridSize: new Vector2Int(3, 1), durability: 250f);

//            LogGeneration($"Generated {15} clothing items");
//        }

//        private void GenerateBuildingItems()
//        {
//            // === WALLS ===
//            CreateItem("building_wall_wood", "Wooden Wall", "Basic wall structure", ItemCategory.Building,
//                weight: 10f, stackSize: 5, gridSize: new Vector2Int(3, 3));

//            CreateItem("building_wall_stone", "Stone Wall", "Sturdy wall structure", ItemCategory.Building,
//                weight: 20f, stackSize: 3, gridSize: new Vector2Int(3, 3));

//            // === ROOFS ===
//            CreateItem("building_roof_thatch", "Thatch Roof", "Basic roof covering", ItemCategory.Building,
//                weight: 5f, stackSize: 5, gridSize: new Vector2Int(3, 2));

//            CreateItem("building_roof_wood", "Wooden Roof", "Solid roof covering", ItemCategory.Building,
//                weight: 8f, stackSize: 5, gridSize: new Vector2Int(3, 2));

//            // === DOORS & WINDOWS ===
//            CreateItem("building_door_wood", "Wooden Door", "Basic entrance", ItemCategory.Building,
//                weight: 5f, stackSize: 3, gridSize: new Vector2Int(2, 3));

//            CreateItem("building_window", "Window", "Light and ventilation", ItemCategory.Building,
//                weight: 3f, stackSize: 5, gridSize: new Vector2Int(2, 2));

//            // === FOUNDATIONS ===
//            CreateItem("building_foundation_wood", "Wooden Foundation", "Building base", ItemCategory.Building,
//                weight: 15f, stackSize: 3, gridSize: new Vector2Int(3, 3));

//            CreateItem("building_foundation_stone", "Stone Foundation", "Sturdy building base", ItemCategory.Building,
//                weight: 25f, stackSize: 2, gridSize: new Vector2Int(3, 3));

//            // === FURNITURE ===
//            CreateItem("furniture_bed", "Bed", "Sleeping furniture", ItemCategory.Building,
//                weight: 8f, stackSize: 1, gridSize: new Vector2Int(2, 3));

//            CreateItem("furniture_chest", "Storage Chest", "Item storage", ItemCategory.Building,
//                weight: 5f, stackSize: 1, gridSize: new Vector2Int(2, 2));

//            CreateItem("furniture_table", "Table", "Work surface", ItemCategory.Building,
//                weight: 6f, stackSize: 1, gridSize: new Vector2Int(2, 2));

//            CreateItem("furniture_chair", "Chair", "Seating", ItemCategory.Building,
//                weight: 3f, stackSize: 2, gridSize: new Vector2Int(1, 1));

//            // === WORKSTATIONS ===
//            CreateItem("station_campfire", "Campfire", "Basic cooking station", ItemCategory.Building,
//                weight: 5f, stackSize: 1, gridSize: new Vector2Int(2, 2));

//            CreateItem("station_workbench", "Workbench", "Crafting station", ItemCategory.Building,
//                weight: 10f, stackSize: 1, gridSize: new Vector2Int(3, 2));

//            CreateItem("station_forge", "Forge", "Metal working station", ItemCategory.Building,
//                weight: 30f, stackSize: 1, gridSize: new Vector2Int(3, 3));

//            CreateItem("station_anvil", "Anvil", "Metal shaping station", ItemCategory.Building,
//                weight: 50f, stackSize: 1, gridSize: new Vector2Int(2, 2));

//            CreateItem("station_tanning_rack", "Tanning Rack", "Leather processing", ItemCategory.Building,
//                weight: 8f, stackSize: 1, gridSize: new Vector2Int(2, 3));

//            CreateItem("station_cooking_pot", "Cooking Pot", "Advanced cooking", ItemCategory.Building,
//                weight: 3f, stackSize: 1, gridSize: new Vector2Int(2, 2));

//            LogGeneration($"Generated {18} building items");
//        }

//        private void GenerateContainerItems()
//        {
//            CreateItem("container_pouch", "Small Pouch", "Small storage container", ItemCategory.Container,
//                weight: 0.1f, stackSize: 1, gridSize: new Vector2Int(1, 1));

//            CreateItem("container_bag", "Bag", "Medium storage container", ItemCategory.Container,
//                weight: 0.3f, stackSize: 1, gridSize: new Vector2Int(2, 2));

//            CreateItem("container_crate", "Wooden Crate", "Large storage container", ItemCategory.Container,
//                weight: 2f, stackSize: 1, gridSize: new Vector2Int(3, 3));

//            CreateItem("container_barrel", "Barrel", "Liquid storage container", ItemCategory.Container,
//                weight: 3f, stackSize: 1, gridSize: new Vector2Int(2, 3));

//            CreateItem("container_bottle", "Glass Bottle", "Liquid container", ItemCategory.Container,
//                weight: 0.2f, stackSize: 5, gridSize: new Vector2Int(1, 2));

//            CreateItem("container_waterskin", "Waterskin", "Portable water container", ItemCategory.Container,
//                weight: 0.1f, stackSize: 1, gridSize: new Vector2Int(1, 2));

//            CreateItem("container_quiver", "Quiver", "Arrow container", ItemCategory.Container,
//                weight: 0.2f, stackSize: 1, gridSize: new Vector2Int(1, 3));

//            LogGeneration($"Generated {7} container items");
//        }

//        private void GenerateFuelItems()
//        {
//            CreateItem("fuel_tinder", "Tinder", "Fire starting material", ItemCategory.Fuel,
//                weight: 0.01f, stackSize: 100, gridSize: new Vector2Int(1, 1));

//            CreateItem("fuel_kindling", "Kindling", "Small burning material", ItemCategory.Fuel,
//                weight: 0.1f, stackSize: 50, gridSize: new Vector2Int(1, 1));

//            CreateItem("fuel_firewood", "Firewood", "Standard fuel", ItemCategory.Fuel,
//                weight: 2f, stackSize: 10, gridSize: new Vector2Int(1, 2));

//            CreateItem("fuel_charcoal", "Charcoal", "High-heat fuel", ItemCategory.Fuel,
//                weight: 0.5f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("fuel_coal", "Coal", "Long-burning fuel", ItemCategory.Fuel,
//                weight: 1f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("fuel_oil", "Oil", "Liquid fuel", ItemCategory.Fuel,
//                weight: 0.8f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("fuel_torch", "Torch", "Portable light source", ItemCategory.Fuel,
//                weight: 0.5f, stackSize: 5, gridSize: new Vector2Int(1, 2), durability: 60f);

//            CreateItem("fuel_candle", "Candle", "Long-lasting light", ItemCategory.Fuel,
//                weight: 0.1f, stackSize: 10, gridSize: new Vector2Int(1, 1), durability: 120f);

//            LogGeneration($"Generated {8} fuel items");
//        }

//        private void GenerateMiscItems()
//        {
//            CreateItem("misc_map", "Map", "Shows explored areas", ItemCategory.Misc,
//                weight: 0.05f, stackSize: 1, gridSize: new Vector2Int(2, 2));

//            CreateItem("misc_compass", "Compass", "Shows direction", ItemCategory.Misc,
//                weight: 0.1f, stackSize: 1, gridSize: new Vector2Int(1, 1));

//            CreateItem("misc_book", "Skill Book", "Teaches new recipes", ItemCategory.Misc,
//                weight: 0.5f, stackSize: 1, gridSize: new Vector2Int(2, 2));

//            CreateItem("misc_key", "Key", "Opens locked doors", ItemCategory.Misc,
//                weight: 0.01f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("misc_coin", "Coin", "Currency", ItemCategory.Misc,
//                weight: 0.01f, stackSize: 100, gridSize: new Vector2Int(1, 1));

//            CreateItem("misc_gem", "Gemstone", "Valuable gem", ItemCategory.Misc,
//                weight: 0.05f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("misc_paper", "Paper", "Writing material", ItemCategory.Misc,
//                weight: 0.01f, stackSize: 50, gridSize: new Vector2Int(1, 1));

//            CreateItem("misc_ink", "Ink", "Writing fluid", ItemCategory.Misc,
//                weight: 0.1f, stackSize: 10, gridSize: new Vector2Int(1, 1));

//            CreateItem("misc_needle", "Needle", "Sewing tool", ItemCategory.Misc,
//                weight: 0.01f, stackSize: 20, gridSize: new Vector2Int(1, 1));

//            CreateItem("misc_hook", "Fish Hook", "Fishing equipment", ItemCategory.Misc,
//                weight: 0.01f, stackSize: 30, gridSize: new Vector2Int(1, 1));

//            LogGeneration($"Generated {10} misc items");
//        }

//        private ItemDefinition CreateItem(string id, string name, string desc, ItemCategory category,
//            float weight = 1f, int stackSize = 1, Vector2Int? gridSize = null, float durability = 0f)
//        {
//            // Check if item already exists
//            var existingItem = itemDatabase.GetItem(id);
//            if (existingItem != null)
//            {
//                return existingItem;
//            }

//            // Create directories if needed
//            EnsureDirectoryExists("Assets/_Project/Data/Items");

//            var item = ScriptableObject.CreateInstance<ItemDefinition>();
//            item.itemID = id;
//            item.displayName = name;
//            item.description = desc;
//            item.primaryCategory = category;
//            item.weight = weight;
//            item.maxStackSize = stackSize;
//            item.gridSize = gridSize ?? Vector2Int.one;
//            item.hasDurability = durability > 0;
//            item.maxDurability = durability;

//            // Initialize shape grid
//            item.shapeGrid = new bool[item.gridSize.x, item.gridSize.y];
//            for (int x = 0; x < item.gridSize.x; x++)
//            {
//                for (int y = 0; y < item.gridSize.y; y++)
//                {
//                    item.shapeGrid[x, y] = true; // Default to full shape
//                }
//            }

//            // Set appropriate tags
//            SetItemTags(item);

//            string path = $"Assets/_Project/Data/Items/{id}.asset";
//            AssetDatabase.CreateAsset(item, path);

//            itemDatabase.AddItem(item);
//            itemsGenerated++;

//            return item;
//        }

//        private void SetItemTags(ItemDefinition item)
//        {
//            var tags = new List<ItemTag>();

//            // Add category-based tags
//            switch (item.primaryCategory)
//            {
//                case ItemCategory.Tool:
//                    tags.Add(ItemTag.Tool);
//                    if (item.itemID.Contains("axe")) tags.Add(ItemTag.Sharp);
//                    if (item.itemID.Contains("hammer")) tags.Add(ItemTag.Heavy);
//                    break;

//                case ItemCategory.Weapon:
//                    tags.Add(ItemTag.Weapon);
//                    if (item.itemID.Contains("sword") || item.itemID.Contains("knife")) tags.Add(ItemTag.Sharp);
//                    if (item.itemID.Contains("club") || item.itemID.Contains("hammer")) tags.Add(ItemTag.Heavy);
//                    break;

//                case ItemCategory.Food:
//                    tags.Add(ItemTag.Consumable);
//                    if (item.itemID.Contains("meat") || item.itemID.Contains("fish")) tags.Add(ItemTag.Organic);
//                    break;

//                case ItemCategory.Resource:
//                    tags.Add(ItemTag.CraftingMaterial);
//                    if (item.itemID.Contains("wood")) tags.Add(ItemTag.Wood);
//                    if (item.itemID.Contains("stone") || item.itemID.Contains("ore")) tags.Add(ItemTag.Stone);
//                    if (item.itemID.Contains("metal") || item.itemID.Contains("ingot")) tags.Add(ItemTag.Metal);
//                    break;

//                case ItemCategory.Fuel:
//                    tags.Add(ItemTag.Fuel);
//                    if (item.itemID.Contains("wood")) tags.Add(ItemTag.Wood);
//                    break;
//            }

//            // Add stackable tag
//            if (item.maxStackSize > 1)
//                tags.Add(ItemTag.Stackable);

//            item.tags = tags.ToArray();
//        }

//        private void GenerateAllRecipes()
//        {
//            // Clear existing recipes (optional)
//            // recipeDatabase.Clear();

//            GenerateToolRecipes();
//            GenerateWeaponRecipes();
//            GenerateFoodRecipes();
//            GenerateMedicineRecipes();
//            GenerateClothingRecipes();
//            GenerateBuildingRecipes();
//            GenerateProcessingRecipes();
//            GenerateUpgradeRecipes();

//            EditorUtility.SetDirty(recipeDatabase);
//        }

//        private void GenerateToolRecipes()
//        {
//            // === STONE TOOLS ===
//            CreateRecipe("recipe_stone_knife", "Craft Stone Knife", CraftingCategory.Tools,
//                WorkstationType.None,
//                new[] { ("stone_small", 1), ("wood_stick", 1), ("fiber_plant", 2) },
//                new[] { "tool_stone_knife" },
//                craftTime: 5f);

//            CreateRecipe("recipe_stone_axe", "Craft Stone Axe", CraftingCategory.Tools,
//                WorkstationType.None,
//                new[] { ("stone_large", 1), ("wood_stick", 2), ("rope", 1) },
//                new[] { "tool_stone_axe" },
//                craftTime: 8f);

//            CreateRecipe("recipe_stone_pickaxe", "Craft Stone Pickaxe", CraftingCategory.Tools,
//                WorkstationType.None,
//                new[] { ("stone_large", 2), ("wood_stick", 2), ("rope", 1) },
//                new[] { "tool_stone_pickaxe" },
//                craftTime: 10f);

//            CreateRecipe("recipe_stone_hammer", "Craft Stone Hammer", CraftingCategory.Tools,
//                WorkstationType.Workbench,
//                new[] { ("stone_large", 1), ("wood_stick", 1), ("rope", 1) },
//                new[] { "tool_stone_hammer" },
//                craftTime: 6f);

//            // === BRONZE TOOLS ===
//            CreateRecipe("recipe_bronze_knife", "Forge Bronze Knife", CraftingCategory.Tools,
//                WorkstationType.Anvil,
//                new[] { ("ingot_bronze", 1), ("wood_stick", 1), ("leather", 1) },
//                new[] { "tool_bronze_knife" },
//                craftTime: 15f);

//            CreateRecipe("recipe_bronze_axe", "Forge Bronze Axe", CraftingCategory.Tools,
//                WorkstationType.Anvil,
//                new[] { ("ingot_bronze", 2), ("wood_stick", 2), ("leather", 1) },
//                new[] { "tool_bronze_axe" },
//                craftTime: 20f);

//            CreateRecipe("recipe_bronze_pickaxe", "Forge Bronze Pickaxe", CraftingCategory.Tools,
//                WorkstationType.Anvil,
//                new[] { ("ingot_bronze", 3), ("wood_stick", 2), ("leather", 1) },
//                new[] { "tool_bronze_pickaxe" },
//                craftTime: 25f);

//            // === IRON TOOLS ===
//            CreateRecipe("recipe_iron_knife", "Forge Iron Knife", CraftingCategory.Tools,
//                WorkstationType.Anvil,
//                new[] { ("ingot_iron", 1), ("wood_stick", 1), ("leather", 1) },
//                new[] { "tool_iron_knife" },
//                craftTime: 20f);

//            CreateRecipe("recipe_iron_axe", "Forge Iron Axe", CraftingCategory.Tools,
//                WorkstationType.Anvil,
//                new[] { ("ingot_iron", 2), ("wood_plank", 2), ("leather", 2) },
//                new[] { "tool_iron_axe" },
//                craftTime: 30f);

//            CreateRecipe("recipe_iron_pickaxe", "Forge Iron Pickaxe", CraftingCategory.Tools,
//                WorkstationType.Anvil,
//                new[] { ("ingot_iron", 3), ("wood_plank", 2), ("leather", 2) },
//                new[] { "tool_iron_pickaxe" },
//                craftTime: 35f);

//            // === SPECIAL TOOLS ===
//            CreateRecipe("recipe_fishing_rod", "Craft Fishing Rod", CraftingCategory.Tools,
//                WorkstationType.Workbench,
//                new[] { ("wood_stick", 3), ("rope", 2), ("misc_hook", 1) },
//                new[] { "tool_fishing_rod" },
//                craftTime: 10f);

//            CreateRecipe("recipe_saw", "Craft Saw", CraftingCategory.Tools,
//                WorkstationType.Workbench,
//                new[] { ("ingot_iron", 1), ("wood_plank", 1), ("tool_iron_hammer", 0) }, // 0 means not consumed
//                new[] { "tool_saw" },
//                craftTime: 15f);

//            LogGeneration($"Generated {12} tool recipes");
//        }

//        private void GenerateWeaponRecipes()
//        {
//            // === MELEE WEAPONS ===
//            CreateRecipe("recipe_wooden_club", "Craft Wooden Club", CraftingCategory.Weapons,
//                WorkstationType.None,
//                new[] { ("wood_log", 1), ("rope", 1) },
//                new[] { "weapon_wooden_club" },
//                craftTime: 5f);

//            CreateRecipe("recipe_stone_spear", "Craft Stone Spear", CraftingCategory.Weapons,
//                WorkstationType.None,
//                new[] { ("wood_stick", 2), ("stone_small", 1), ("rope", 1) },
//                new[] { "weapon_stone_spear" },
//                craftTime: 8f);

//            CreateRecipe("recipe_bronze_sword", "Forge Bronze Sword", CraftingCategory.Weapons,
//                WorkstationType.Anvil,
//                new[] { ("ingot_bronze", 3), ("leather", 2), ("wood_stick", 1) },
//                new[] { "weapon_bronze_sword" },
//                craftTime: 30f);

//            CreateRecipe("recipe_iron_sword", "Forge Iron Sword", CraftingCategory.Weapons,
//                WorkstationType.Anvil,
//                new[] { ("ingot_iron", 3), ("leather", 2), ("wood_plank", 1) },
//                new[] { "weapon_iron_sword" },
//                craftTime: 40f);

//            // === RANGED WEAPONS ===
//            CreateRecipe("recipe_sling", "Craft Sling", CraftingCategory.Weapons,
//                WorkstationType.None,
//                new[] { ("leather", 1), ("rope", 1) },
//                new[] { "weapon_sling" },
//                craftTime: 5f);

//            CreateRecipe("recipe_bow_simple", "Craft Simple Bow", CraftingCategory.Weapons,
//                WorkstationType.Workbench,
//                new[] { ("wood_stick", 3), ("rope", 2) },
//                new[] { "weapon_bow_simple" },
//                craftTime: 15f);

//            CreateRecipe("recipe_bow_recurve", "Craft Recurve Bow", CraftingCategory.Weapons,
//                WorkstationType.Workbench,
//                new[] { ("wood_plank", 2), ("rope", 3), ("antler", 1) },
//                new[] { "weapon_bow_recurve" },
//                craftTime: 25f);

//            // === AMMUNITION ===
//            CreateRecipe("recipe_arrow_stone", "Craft Stone Arrows", CraftingCategory.Weapons,
//                WorkstationType.Workbench,
//                new[] { ("wood_stick", 5), ("stone_small", 5), ("feather", 5) },
//                new[] { ("ammo_arrow_stone", 10) },
//                craftTime: 10f);

//            CreateRecipe("recipe_arrow_bronze", "Craft Bronze Arrows", CraftingCategory.Weapons,
//                WorkstationType.Workbench,
//                new[] { ("wood_stick", 5), ("ingot_bronze", 1), ("feather", 5) },
//                new[] { ("ammo_arrow_bronze", 10) },
//                craftTime: 15f);

//            CreateRecipe("recipe_arrow_iron", "Craft Iron Arrows", CraftingCategory.Weapons,
//                WorkstationType.Workbench,
//                new[] { ("wood_stick", 5), ("ingot_iron", 1), ("feather", 5) },
//                new[] { ("ammo_arrow_iron", 10) },
//                craftTime: 15f);

//            LogGeneration($"Generated {10} weapon recipes");
//        }

//        private void GenerateFoodRecipes()
//        {
//            // === COOKING ===
//            CreateRecipe("recipe_cook_meat", "Cook Meat", CraftingCategory.Cooking,
//                WorkstationType.Campfire,
//                new[] { ("food_meat_raw", 1) },
//                new[] { "food_meat_cooked" },
//                craftTime: 30f);

//            CreateRecipe("recipe_cook_fish", "Cook Fish", CraftingCategory.Cooking,
//                WorkstationType.Campfire,
//                new[] { ("food_fish_raw", 1) },
//                new[] { "food_fish_cooked" },
//                craftTime: 20f);

//            CreateRecipe("recipe_smoke_meat", "Smoke Meat", CraftingCategory.Cooking,
//                WorkstationType.Campfire,
//                new[] { ("food_meat_raw", 5), ("fuel_firewood", 2) },
//                new[] { ("food_meat_smoked", 5) },
//                craftTime: 60f);

//            CreateRecipe("recipe_smoke_fish", "Smoke Fish", CraftingCategory.Cooking,
//                WorkstationType.Campfire,
//                new[] { ("food_fish_raw", 5), ("fuel_firewood", 1) },
//                new[] { ("food_fish_smoked", 5) },
//                craftTime: 45f);

//            CreateRecipe("recipe_stew", "Cook Hearty Stew", CraftingCategory.Cooking,
//                WorkstationType.CookingPot,
//                new[] { ("food_meat_raw", 1), ("food_roots", 2), ("food_mushroom", 2), ("drink_water_clean", 1) },
//                new[] { ("food_stew", 2) },
//                craftTime: 45f);

//            CreateRecipe("recipe_dried_fruit", "Dry Fruit", CraftingCategory.Cooking,
//                WorkstationType.None,
//                new[] { ("food_berries", 5) },
//                new[] { ("food_dried_fruit", 3) },
//                craftTime: 120f);

//            CreateRecipe("recipe_jerky", "Make Jerky", CraftingCategory.Cooking,
//                WorkstationType.None,
//                new[] { ("food_meat_raw", 2), ("misc_salt", 1) },
//                new[] { ("food_jerky", 3) },
//                craftTime: 180f);

//            // === DRINKS ===
//            CreateRecipe("recipe_purify_water", "Purify Water", CraftingCategory.Cooking,
//                WorkstationType.Campfire,
//                new[] { ("drink_water_dirty", 1) },
//                new[] { "drink_water_clean" },
//                craftTime: 15f);

//            CreateRecipe("recipe_herbal_tea", "Brew Herbal Tea", CraftingCategory.Cooking,
//                WorkstationType.CookingPot,
//                new[] { ("medicine_herbs", 2), ("drink_water_clean", 1) },
//                new[] { "drink_tea" },
//                craftTime: 20f);

//            CreateRecipe("recipe_fruit_juice", "Make Fruit Juice", CraftingCategory.Cooking,
//                WorkstationType.None,
//                new[] { ("food_berries", 5), ("drink_water_clean", 1) },
//                new[] { ("drink_juice", 2) },
//                craftTime: 10f);

//            LogGeneration($"Generated {10} food recipes");
//        }

//        private void GenerateMedicineRecipes()
//        {
//            CreateRecipe("recipe_bandage", "Craft Bandage", CraftingCategory.Medicine,
//                WorkstationType.None,
//                new[] { ("cloth", 1) },
//                new[] { ("medicine_bandage", 3) },
//                craftTime: 5f);

//            CreateRecipe("recipe_poultice", "Make Herbal Poultice", CraftingCategory.Medicine,
//                WorkstationType.None,
//                new[] { ("medicine_herbs", 3), ("drink_water_clean", 1) },
//                new[] { ("medicine_poultice", 2) },
//                craftTime: 10f);

//            CreateRecipe("recipe_antidote", "Brew Antidote", CraftingCategory.Medicine,
//                WorkstationType.CookingPot,
//                new[] { ("medicine_herbs", 2), ("food_mushroom", 1), ("drink_water_clean", 1) },
//                new[] { "medicine_antidote" },
//                craftTime: 20f);

//            CreateRecipe("recipe_painkiller", "Make Pain Relief", CraftingCategory.Medicine,
//                WorkstationType.None,
//                new[] { ("bark", 3), ("medicine_herbs", 1) },
//                new[] { ("medicine_painkiller", 2) },
//                craftTime: 15f);

//            CreateRecipe("recipe_antiseptic", "Make Antiseptic", CraftingCategory.Medicine,
//                WorkstationType.CookingPot,
//                new[] { ("resin", 2), ("medicine_herbs", 2), ("drink_water_clean", 1) },
//                new[] { "medicine_antiseptic" },
//                craftTime: 25f);

//            CreateRecipe("recipe_salve", "Make Healing Salve", CraftingCategory.Medicine,
//                WorkstationType.None,
//                new[] { ("animal_fat", 1), ("medicine_herbs", 2), ("resin", 1) },
//                new[] { ("medicine_salve", 2) },
//                craftTime: 15f);

//            LogGeneration($"Generated {6} medicine recipes");
//        }

//        private void GenerateClothingRecipes()
//        {
//            // === BASIC CLOTHING ===
//            CreateRecipe("recipe_cloth_hat", "Craft Cloth Hat", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("cloth", 2), ("rope", 1) },
//                new[] { "clothing_hat_cloth" },
//                craftTime: 15f);

//            CreateRecipe("recipe_cloth_shirt", "Craft Cloth Shirt", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("cloth", 3), ("rope", 2) },
//                new[] { "clothing_shirt_cloth" },
//                craftTime: 20f);

//            CreateRecipe("recipe_cloth_pants", "Craft Cloth Pants", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("cloth", 4), ("rope", 2) },
//                new[] { "clothing_pants_cloth" },
//                craftTime: 25f);

//            // === LEATHER CLOTHING ===
//            CreateRecipe("recipe_leather_hat", "Craft Leather Hat", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("leather", 2), ("rope", 1) },
//                new[] { "clothing_hat_leather" },
//                craftTime: 20f);

//            CreateRecipe("recipe_leather_vest", "Craft Leather Vest", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("leather", 4), ("rope", 2) },
//                new[] { "clothing_shirt_leather" },
//                craftTime: 30f);

//            CreateRecipe("recipe_leather_pants", "Craft Leather Pants", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("leather", 5), ("rope", 2) },
//                new[] { "clothing_pants_leather" },
//                craftTime: 35f);

//            CreateRecipe("recipe_leather_boots", "Craft Leather Boots", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("leather", 3), ("rope", 2) },
//                new[] { "clothing_boots_leather" },
//                craftTime: 25f);

//            // === FUR CLOTHING ===
//            CreateRecipe("recipe_fur_hat", "Craft Fur Hat", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("fur", 2), ("leather", 1), ("rope", 1) },
//                new[] { "clothing_hat_fur" },
//                craftTime: 25f);

//            CreateRecipe("recipe_fur_coat", "Craft Fur Coat", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("fur", 5), ("leather", 2), ("rope", 3) },
//                new[] { "clothing_coat_fur" },
//                craftTime: 45f);

//            // === ACCESSORIES ===
//            CreateRecipe("recipe_small_backpack", "Craft Small Backpack", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("leather", 3), ("cloth", 2), ("rope", 2) },
//                new[] { "clothing_backpack_small" },
//                craftTime: 30f);

//            CreateRecipe("recipe_large_backpack", "Craft Large Backpack", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("leather", 5), ("cloth", 3), ("rope", 3), ("ingot_bronze", 2) },
//                new[] { "clothing_backpack_large" },
//                craftTime: 45f);

//            LogGeneration($"Generated {11} clothing recipes");
//        }

//        private void GenerateBuildingRecipes()
//        {
//            // === WORKSTATIONS ===
//            CreateRecipe("recipe_campfire", "Build Campfire", CraftingCategory.Building,
//                WorkstationType.None,
//                new[] { ("stone_small", 5), ("wood_stick", 3), ("fuel_tinder", 5) },
//                new[] { "station_campfire" },
//                craftTime: 10f);

//            CreateRecipe("recipe_workbench", "Build Workbench", CraftingCategory.Building,
//                WorkstationType.None,
//                new[] { ("wood_plank", 4), ("wood_log", 2), ("stone_small", 4) },
//                new[] { "station_workbench" },
//                craftTime: 30f);

//            CreateRecipe("recipe_forge", "Build Forge", CraftingCategory.Building,
//                WorkstationType.Workbench,
//                new[] { ("stone_large", 10), ("clay", 5), ("ingot_iron", 2) },
//                new[] { "station_forge" },
//                craftTime: 60f);

//            CreateRecipe("recipe_anvil", "Build Anvil", CraftingCategory.Building,
//                WorkstationType.Forge,
//                new[] { ("ingot_iron", 10), ("wood_log", 2) },
//                new[] { "station_anvil" },
//                craftTime: 45f);

//            CreateRecipe("recipe_tanning_rack", "Build Tanning Rack", CraftingCategory.Building,
//                WorkstationType.Workbench,
//                new[] { ("wood_plank", 4), ("rope", 3) },
//                new[] { "station_tanning_rack" },
//                craftTime: 20f);

//            CreateRecipe("recipe_cooking_pot", "Craft Cooking Pot", CraftingCategory.Building,
//                WorkstationType.Forge,
//                new[] { ("ingot_iron", 3), ("wood_stick", 1) },
//                new[] { "station_cooking_pot" },
//                craftTime: 25f);

//            // === STRUCTURES ===
//            CreateRecipe("recipe_wall_wood", "Build Wooden Wall", CraftingCategory.Building,
//                WorkstationType.Workbench,
//                new[] { ("wood_plank", 5), ("wood_log", 2) },
//                new[] { "building_wall_wood" },
//                craftTime: 20f);

//            CreateRecipe("recipe_wall_stone", "Build Stone Wall", CraftingCategory.Building,
//                WorkstationType.Workbench,
//                new[] { ("stone_large", 8), ("clay", 3) },
//                new[] { "building_wall_stone" },
//                craftTime: 40f);

//            CreateRecipe("recipe_door_wood", "Build Wooden Door", CraftingCategory.Building,
//                WorkstationType.Workbench,
//                new[] { ("wood_plank", 4), ("ingot_iron", 1) },
//                new[] { "building_door_wood" },
//                craftTime: 25f);

//            CreateRecipe("recipe_roof_thatch", "Build Thatch Roof", CraftingCategory.Building,
//                WorkstationType.None,
//                new[] { ("fiber_plant", 20), ("wood_stick", 5) },
//                new[] { "building_roof_thatch" },
//                craftTime: 15f);

//            // === FURNITURE ===
//            CreateRecipe("recipe_bed", "Build Bed", CraftingCategory.Building,
//                WorkstationType.Workbench,
//                new[] { ("wood_plank", 4), ("cloth", 3), ("fur", 2) },
//                new[] { "furniture_bed" },
//                craftTime: 30f);

//            CreateRecipe("recipe_chest", "Build Storage Chest", CraftingCategory.Building,
//                WorkstationType.Workbench,
//                new[] { ("wood_plank", 6), ("ingot_iron", 2) },
//                new[] { "furniture_chest" },
//                craftTime: 25f);

//            CreateRecipe("recipe_table", "Build Table", CraftingCategory.Building,
//                WorkstationType.Workbench,
//                new[] { ("wood_plank", 4), ("wood_log", 2) },
//                new[] { "furniture_table" },
//                craftTime: 20f);

//            LogGeneration($"Generated {13} building recipes");
//        }

//        private void GenerateProcessingRecipes()
//        {
//            // === MATERIAL PROCESSING ===
//            CreateRecipe("recipe_planks", "Cut Planks", CraftingCategory.Processing,
//                WorkstationType.Workbench,
//                new[] { ("wood_log", 1), ("tool_saw", 0) }, // Tool not consumed
//                new[] { ("wood_plank", 3) },
//                craftTime: 10f);

//            CreateRecipe("recipe_rope", "Weave Rope", CraftingCategory.Processing,
//                WorkstationType.None,
//                new[] { ("fiber_plant", 3) },
//                new[] { "rope" },
//                craftTime: 5f);

//            CreateRecipe("recipe_cloth", "Weave Cloth", CraftingCategory.Processing,
//                WorkstationType.Workbench,
//                new[] { ("fiber_plant", 5) },
//                new[] { "cloth" },
//                craftTime: 15f);

//            CreateRecipe("recipe_leather", "Tan Leather", CraftingCategory.Processing,
//                WorkstationType.TanningRack,
//                new[] { ("fur", 2), ("bark", 3) },
//                new[] { ("leather", 2) },
//                craftTime: 60f);

//            CreateRecipe("recipe_charcoal", "Make Charcoal", CraftingCategory.Processing,
//                WorkstationType.Campfire,
//                new[] { ("wood_log", 3) },
//                new[] { ("fuel_charcoal", 5) },
//                craftTime: 45f);

//            // === METAL PROCESSING ===
//            CreateRecipe("recipe_smelt_copper", "Smelt Copper", CraftingCategory.Processing,
//                WorkstationType.Forge,
//                new[] { ("ore_copper", 2), ("fuel_charcoal", 1) },
//                new[] { "ingot_copper" },
//                craftTime: 30f);

//            CreateRecipe("recipe_smelt_iron", "Smelt Iron", CraftingCategory.Processing,
//                WorkstationType.Forge,
//                new[] { ("ore_iron", 2), ("fuel_charcoal", 2) },
//                new[] { "ingot_iron" },
//                craftTime: 45f);

//            CreateRecipe("recipe_smelt_tin", "Smelt Tin", CraftingCategory.Processing,
//                WorkstationType.Forge,
//                new[] { ("ore_tin", 2), ("fuel_charcoal", 1) },
//                new[] { "ingot_tin" },
//                craftTime: 30f);

//            CreateRecipe("recipe_alloy_bronze", "Make Bronze", CraftingCategory.Processing,
//                WorkstationType.Forge,
//                new[] { ("ingot_copper", 3), ("ingot_tin", 1) },
//                new[] { ("ingot_bronze", 4) },
//                craftTime: 40f);

//            CreateRecipe("recipe_alloy_steel", "Make Steel", CraftingCategory.Advanced,
//                WorkstationType.Forge,
//                new[] { ("ingot_iron", 2), ("fuel_charcoal", 3) },
//                new[] { "ingot_steel" },
//                craftTime: 60f);

//            LogGeneration($"Generated {10} processing recipes");
//        }

//        private void GenerateUpgradeRecipes()
//        {
//            // === TOOL UPGRADES ===
//            CreateRecipe("recipe_repair_stone_tool", "Repair Stone Tool", CraftingCategory.Tools,
//                WorkstationType.Workbench,
//                new[] { ("stone_small", 1), ("rope", 1) },
//                new string[] { }, // No output, repairs existing
//                craftTime: 10f);

//            CreateRecipe("recipe_repair_bronze_tool", "Repair Bronze Tool", CraftingCategory.Tools,
//                WorkstationType.Anvil,
//                new[] { ("ingot_bronze", 1) },
//                new string[] { }, // No output, repairs existing
//                craftTime: 15f);

//            CreateRecipe("recipe_repair_iron_tool", "Repair Iron Tool", CraftingCategory.Tools,
//                WorkstationType.Anvil,
//                new[] { ("ingot_iron", 1) },
//                new string[] { }, // No output, repairs existing
//                craftTime: 20f);

//            // === CONTAINER RECIPES ===
//            CreateRecipe("recipe_pouch", "Craft Pouch", CraftingCategory.Clothing,
//                WorkstationType.None,
//                new[] { ("leather", 1), ("rope", 1) },
//                new[] { "container_pouch" },
//                craftTime: 10f);

//            CreateRecipe("recipe_bag", "Craft Bag", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("cloth", 2), ("rope", 2) },
//                new[] { "container_bag" },
//                craftTime: 15f);

//            CreateRecipe("recipe_barrel", "Build Barrel", CraftingCategory.Building,
//                WorkstationType.Workbench,
//                new[] { ("wood_plank", 5), ("ingot_iron", 2) },
//                new[] { "container_barrel" },
//                craftTime: 30f);

//            CreateRecipe("recipe_bottle", "Craft Bottle", CraftingCategory.Building,
//                WorkstationType.Forge,
//                new[] { ("sand", 2), ("fuel_charcoal", 1) },
//                new[] { ("container_bottle", 2) },
//                craftTime: 20f);

//            CreateRecipe("recipe_waterskin", "Craft Waterskin", CraftingCategory.Clothing,
//                WorkstationType.None,
//                new[] { ("leather", 2), ("resin", 1) },
//                new[] { "container_waterskin" },
//                craftTime: 15f);

//            CreateRecipe("recipe_quiver", "Craft Quiver", CraftingCategory.Clothing,
//                WorkstationType.Workbench,
//                new[] { ("leather", 2), ("rope", 1) },
//                new[] { "container_quiver" },
//                craftTime: 20f);

//            // === FUEL RECIPES ===
//            CreateRecipe("recipe_torch", "Craft Torch", CraftingCategory.Tools,
//                WorkstationType.None,
//                new[] { ("wood_stick", 1), ("cloth", 1), ("resin", 1) },
//                new[] { ("fuel_torch", 2) },
//                craftTime: 5f);

//            CreateRecipe("recipe_candle", "Make Candle", CraftingCategory.Tools,
//                WorkstationType.Campfire,
//                new[] { ("animal_fat", 1), ("rope", 1) },
//                new[] { ("fuel_candle", 3) },
//                craftTime: 10f);

//            LogGeneration($"Generated {11} upgrade/misc recipes");
//        }

//        private RecipeDefinition CreateRecipe(string id, string name, CraftingCategory category,
//            WorkstationType workstation, (string, int)[] ingredients, string[] outputs, float craftTime = 5f)
//        {
//            // Check if recipe already exists
//            var existingRecipe = recipeDatabase.GetRecipe(id);
//            if (existingRecipe != null)
//            {
//                return existingRecipe;
//            }

//            // Create directories if needed
//            EnsureDirectoryExists("Assets/_Project/Data/Recipes");

//            var recipe = ScriptableObject.CreateInstance<RecipeDefinition>();
//            recipe.recipeID = id;
//            recipe.recipeName = name;
//            recipe.category = category;
//            recipe.requiredWorkstation = workstation;
//            recipe.baseCraftTime = craftTime;

//            // Set up ingredients
//            var ingredientList = new List<RecipeIngredient>();
//            foreach (var (itemId, quantity) in ingredients)
//            {
//                var item = itemDatabase.GetItem(itemId);
//                if (item != null)
//                {
//                    ingredientList.Add(new RecipeIngredient
//                    {
//                        name = item.displayName,
//                        specificItem = item,
//                        category = item.primaryCategory,
//                        quantity = quantity,
//                        consumed = quantity > 0 // 0 means tool not consumed
//                    });
//                }
//                else
//                {
//                    // Create placeholder if item doesn't exist yet
//                    ingredientList.Add(new RecipeIngredient
//                    {
//                        name = itemId,
//                        quantity = quantity,
//                        consumed = quantity > 0
//                    });
//                }
//            }
//            recipe.ingredients = ingredientList.ToArray();

//            // Set up outputs
//            var outputList = new List<RecipeOutput>();
//            foreach (var outputStr in outputs)
//            {
//                // Parse output string (can be "itemId" or ("itemId", quantity))
//                string itemId = outputStr;
//                int quantity = 1;

//                // Check if it's a tuple format
//                if (outputStr.StartsWith("(") && outputStr.EndsWith(")"))
//                {
//                    var parts = outputStr.Trim('(', ')').Split(',');
//                    if (parts.Length == 2)
//                    {
//                        itemId = parts[0].Trim();
//                        int.TryParse(parts[1].Trim(), out quantity);
//                    }
//                }

//                var item = itemDatabase.GetItem(itemId);
//                if (item != null)
//                {
//                    outputList.Add(new RecipeOutput
//                    {
//                        item = item,
//                        quantityMin = quantity,
//                        quantityMax = quantity,
//                        chance = 1f
//                    });
//                }
//            }
//            recipe.outputs = outputList.ToArray();

//            // Set description
//            recipe.description = GenerateRecipeDescription(recipe);

//            string path = $"Assets/_Project/Data/Recipes/{id}.asset";
//            AssetDatabase.CreateAsset(recipe, path);

//            recipeDatabase.AddRecipe(recipe);
//            recipesGenerated++;

//            return recipe;
//        }



//        private RecipeDefinition CreateRecipe(string id, string name, CraftingCategory category,
//            WorkstationType workstation, (string, int)[] ingredients, (string, int)[] outputs, float craftTime = 5f)
//        {
//            // Convert output tuples to string array
//            var outputStrings = outputs.Select(o => $"({o.Item1}, {o.Item2})").ToArray();
//            return CreateRecipe(id, name, category, workstation, ingredients, outputStrings, craftTime);
//        }

//        private string GenerateRecipeDescription(RecipeDefinition recipe)
//        {
//            var desc = $"Craft {recipe.recipeName} ";

//            if (recipe.requiredWorkstation != WorkstationType.None)
//            {
//                desc += $"at {recipe.requiredWorkstation}. ";
//            }

//            desc += "Requires: ";
//            desc += string.Join(", ", recipe.ingredients.Select(i => $"{i.quantity}x {i.name}"));

//            return desc;
//        }

//        private void EnsureDirectoryExists(string path)
//        {
//            string[] folders = path.Split('/');
//            string currentPath = folders[0];

//            for (int i = 1; i < folders.Length; i++)
//            {
//                string parentPath = currentPath;
//                currentPath = $"{currentPath}/{folders[i]}";

//                if (!AssetDatabase.IsValidFolder(currentPath))
//                {
//                    AssetDatabase.CreateFolder(parentPath, folders[i]);
//                    Debug.Log($"Created folder: {currentPath}");
//                }
//            }

//            // Refresh to ensure Unity recognizes the new folders
//            AssetDatabase.Refresh();
//        }
//        public static class ProjectInitializer
//        {
//            [MenuItem("Tools/Wild Survival/Initialize Project", priority = 0)]
//            public static void InitializeProject()
//            {
//                Debug.Log("=== Initializing Wild Survival Project ===");

//                // 1. Create folder structure
//                CreateFolderStructure();

//                // 2. Create databases
//                CreateDatabases();

//                // 3. Refresh
//                AssetDatabase.SaveAssets();
//                AssetDatabase.Refresh();

//                Debug.Log("=== Project initialization complete! ===");
//                EditorUtility.DisplayDialog("Success", "Project structure initialized successfully!", "OK");
//            }

//            private static void CreateFolderStructure()
//            {
//                // Main folders
//                CreateFolder("Assets", "_Project");
//                CreateFolder("Assets/_Project", "Scripts");
//                CreateFolder("Assets/_Project", "Data");
//                CreateFolder("Assets/_Project", "Prefabs");
//                CreateFolder("Assets/_Project", "Materials");
//                CreateFolder("Assets/_Project", "Textures");

//                // Script subfolders
//                CreateFolder("Assets/_Project/Scripts", "Data");
//                CreateFolder("Assets/_Project/Scripts", "Database");
//                CreateFolder("Assets/_Project/Scripts", "Inventory");
//                CreateFolder("Assets/_Project/Scripts", "Crafting");
//                CreateFolder("Assets/_Project/Scripts", "Player");
//                CreateFolder("Assets/_Project/Scripts", "Editor");

//                // Data subfolders
//                CreateFolder("Assets/_Project/Data", "Items");
//                CreateFolder("Assets/_Project/Data", "Recipes");
//                CreateFolder("Assets/_Project/Data", "Config");

//                Debug.Log("Folder structure created");
//            }

//            private static void CreateFolder(string parent, string newFolder)
//            {
//                string path = $"{parent}/{newFolder}";
//                if (!AssetDatabase.IsValidFolder(path))
//                {
//                    AssetDatabase.CreateFolder(parent, newFolder);
//                }
//            }

//            private static void CreateDatabases()
//            {
//                // Item Database
//                string itemDbPath = "Assets/_Project/Data/ItemDatabase.asset";
//                if (!AssetDatabase.LoadAssetAtPath<ItemDatabase>(itemDbPath))
//                {
//                    var itemDb = ScriptableObject.CreateInstance<ItemDatabase>();
//                    AssetDatabase.CreateAsset(itemDb, itemDbPath);
//                    Debug.Log("Created ItemDatabase");
//                }

//                // Recipe Database
//                string recipeDbPath = "Assets/_Project/Data/RecipeDatabase.asset";
//                if (!AssetDatabase.LoadAssetAtPath<RecipeDatabase>(recipeDbPath))
//                {
//                    var recipeDb = ScriptableObject.CreateInstance<RecipeDatabase>();
//                    AssetDatabase.CreateAsset(recipeDb, recipeDbPath);
//                    Debug.Log("Created RecipeDatabase");
//                }
//            }

//            [MenuItem("Tools/Wild Survival/Validate Project Setup")]
//            public static void ValidateSetup()
//            {
//                bool isValid = true;
//                var report = new System.Text.StringBuilder();
//                report.AppendLine("=== Project Validation Report ===");

//                // Check folders
//                string[] requiredFolders = {
//            "Assets/_Project",
//            "Assets/_Project/Data",
//            "Assets/_Project/Data/Items",
//            "Assets/_Project/Data/Recipes",
//            "Assets/_Project/Scripts"
//        };

//                foreach (var folder in requiredFolders)
//                {
//                    if (AssetDatabase.IsValidFolder(folder))
//                    {
//                        report.AppendLine($"? {folder}");
//                    }
//                    else
//                    {
//                        report.AppendLine($"? {folder} - MISSING");
//                        isValid = false;
//                    }
//                }

//                // Check databases
//                if (AssetDatabase.LoadAssetAtPath<ItemDatabase>("Assets/_Project/Data/ItemDatabase.asset"))
//                {
//                    report.AppendLine("? ItemDatabase exists");
//                }
//                else
//                {
//                    report.AppendLine("? ItemDatabase - MISSING");
//                    isValid = false;
//                }

//                if (AssetDatabase.LoadAssetAtPath<RecipeDatabase>("Assets/_Project/Data/RecipeDatabase.asset"))
//                {
//                    report.AppendLine("? RecipeDatabase exists");
//                }
//                else
//                {
//                    report.AppendLine("? RecipeDatabase - MISSING");
//                    isValid = false;
//                }

//                report.AppendLine($"\nValidation Result: {(isValid ? "PASSED" : "FAILED")}");

//                Debug.Log(report.ToString());

//                if (!isValid)
//                {
//                    if (EditorUtility.DisplayDialog("Validation Failed",
//                        "Project setup is incomplete. Would you like to initialize now?",
//                        "Yes", "No"))
//                    {
//                        InitializeProject();
//                    }
//                }
//                else
//                {
//                    EditorUtility.DisplayDialog("Validation Passed",
//                        "Project setup is complete and valid!", "Great!");
//                }
//            }
//        }


//        private void LogGeneration(string message)
//        {
//            generationLog.Add(message);
//            Debug.Log($"[Database Generator] {message}");
//        }

//        public static class DatabaseGeneratorExtensions
//        {
//            [MenuItem("Tools/Wild Survival/Add Missing Items")]
//            public static void AddMissingItems()
//            {
//                // Ensure all directories exist first
//                EnsureDirectoryStructure();

//                var itemDB = AssetDatabase.LoadAssetAtPath<ItemDatabase>("Assets/_Project/Data/ItemDatabase.asset");
//                if (itemDB == null)
//                {
//                    Debug.LogError("ItemDatabase not found at Assets/_Project/Data/ItemDatabase.asset");
//                    return;
//                }

//                // Create misc_salt if it doesn't exist
//                if (itemDB.GetItem("misc_salt") == null)
//                {
//                    var salt = ScriptableObject.CreateInstance<ItemDefinition>();
//                    salt.itemID = "misc_salt";
//                    salt.displayName = "Salt";
//                    salt.description = "Mineral salt for preservation";
//                    salt.primaryCategory = ItemCategory.Misc;
//                    salt.weight = 0.1f;
//                    salt.maxStackSize = 50;
//                    salt.gridSize = Vector2Int.one;

//                    AssetDatabase.CreateAsset(salt, "Assets/_Project/Data/Items/misc_salt.asset");
//                    itemDB.AddItem(salt);
//                    Debug.Log("Created missing item: Salt");
//                }

//                // Create ingot_tin if missing
//                if (itemDB.GetItem("ingot_tin") == null)
//                {
//                    var tin = ScriptableObject.CreateInstance<ItemDefinition>();
//                    tin.itemID = "ingot_tin";
//                    tin.displayName = "Tin Ingot";
//                    tin.description = "Refined tin ingot";
//                    tin.primaryCategory = ItemCategory.Resource;
//                    tin.weight = 1f;
//                    tin.maxStackSize = 20;
//                    tin.gridSize = Vector2Int.one;

//                    AssetDatabase.CreateAsset(tin, "Assets/_Project/Data/Items/ingot_tin.asset");
//                    itemDB.AddItem(tin);
//                    Debug.Log("Created missing item: Tin Ingot");
//                }

//                AssetDatabase.SaveAssets();
//                AssetDatabase.Refresh();

//                Debug.Log("Missing items check complete!");
//            }

//            private static void EnsureDirectoryStructure()
//            {
//                // Create main project folder
//                if (!AssetDatabase.IsValidFolder("Assets/_Project"))
//                {
//                    AssetDatabase.CreateFolder("Assets", "_Project");
//                }

//                // Create Data folder
//                if (!AssetDatabase.IsValidFolder("Assets/_Project/Data"))
//                {
//                    AssetDatabase.CreateFolder("Assets/_Project", "Data");
//                }

//                // Create Items folder
//                if (!AssetDatabase.IsValidFolder("Assets/_Project/Data/Items"))
//                {
//                    AssetDatabase.CreateFolder("Assets/_Project/Data", "Items");
//                }

//                // Create Recipes folder
//                if (!AssetDatabase.IsValidFolder("Assets/_Project/Data/Recipes"))
//                {
//                    AssetDatabase.CreateFolder("Assets/_Project/Data", "Recipes");
//                }

//                // Create database files if they don't exist
//                CreateDatabasesIfMissing();
//            }

//            private static void CreateDatabasesIfMissing()
//            {
//                // Create ItemDatabase if missing
//                string itemDbPath = "Assets/_Project/Data/ItemDatabase.asset";
//                if (!AssetDatabase.LoadAssetAtPath<ItemDatabase>(itemDbPath))
//                {
//                    var itemDb = ScriptableObject.CreateInstance<ItemDatabase>();
//                    AssetDatabase.CreateAsset(itemDb, itemDbPath);
//                    Debug.Log("Created ItemDatabase");
//                }

//                // Create RecipeDatabase if missing
//                string recipeDbPath = "Assets/_Project/Data/RecipeDatabase.asset";
//                if (!AssetDatabase.LoadAssetAtPath<RecipeDatabase>(recipeDbPath))
//                {
//                    var recipeDb = ScriptableObject.CreateInstance<RecipeDatabase>();
//                    AssetDatabase.CreateAsset(recipeDb, recipeDbPath);
//                    Debug.Log("Created RecipeDatabase");
//                }
//            }

//        }
//    }

//    // Add missing misc_salt item creation
//    public static class DatabaseGeneratorExtensions
//    {
//        [MenuItem("Tools/Wild Survival/Add Missing Items")]
//        public static void AddMissingItems()
//        {
//            var itemDB = AssetDatabase.LoadAssetAtPath<ItemDatabase>("Assets/_Project/Data/ItemDatabase.asset");
//            if (itemDB == null) return;

//            // Create misc_salt if it doesn't exist
//            if (itemDB.GetItem("misc_salt") == null)
//            {
//                var salt = ScriptableObject.CreateInstance<ItemDefinition>();
//                salt.itemID = "misc_salt";
//                salt.displayName = "Salt";
//                salt.description = "Mineral salt for preservation";
//                salt.primaryCategory = ItemCategory.Misc;
//                salt.weight = 0.1f;
//                salt.maxStackSize = 50;
//                salt.gridSize = Vector2Int.one;

//                AssetDatabase.CreateAsset(salt, "Assets/_Project/Data/Items/misc_salt.asset");
//                itemDB.AddItem(salt);
//            }

//            // Create ingot_tin if missing
//            if (itemDB.GetItem("ingot_tin") == null)
//            {
//                var tin = ScriptableObject.CreateInstance<ItemDefinition>();
//                tin.itemID = "ingot_tin";
//                tin.displayName = "Tin Ingot";
//                tin.description = "Refined tin ingot";
//                tin.primaryCategory = ItemCategory.Resource;
//                tin.weight = 1f;
//                tin.maxStackSize = 20;
//                tin.gridSize = Vector2Int.one;

//                AssetDatabase.CreateAsset(tin, "Assets/_Project/Data/Items/ingot_tin.asset");
//                itemDB.AddItem(tin);


//            }

            


//            AssetDatabase.SaveAssets();
//            AssetDatabase.Refresh();

//            Debug.Log("Missing items added successfully!");


//        }


//    }


//}



// ============================================
// FILE: \Assets\WildSurvival\Editor\UltimateInventoryTool\WildSurvivalSetup.cs
// ============================================

//using UnityEngine;
//using UnityEditor;
//using System.IO;

//namespace WildSurvival.Editor
//{
//    public class WildSurvivalSetup : EditorWindow
//    {
//        [MenuItem("Tools/Wild Survival/Initial Setup")]
//        public static void ShowWindow()
//        {
//            GetWindow<WildSurvivalSetup>("Wild Survival Setup");
//        }

//        private void OnGUI()
//        {
//            EditorGUILayout.LabelField("Wild Survival Setup", EditorStyles.boldLabel);
//            EditorGUILayout.Space(10);

//            if (GUILayout.Button("Create Folder Structure", GUILayout.Height(30)))
//            {
//                CreateFolderStructure();
//            }

//            if (GUILayout.Button("Create Databases", GUILayout.Height(30)))
//            {
//                CreateDatabases();
//            }

//            if (GUILayout.Button("Create Sample Items", GUILayout.Height(30)))
//            {
//                CreateSampleItems();
//            }
//        }

//        private void CreateFolderStructure()
//        {
//            CreateFolder("Assets", "_Project");
//            CreateFolder("Assets/_Project", "Data");
//            CreateFolder("Assets/_Project/Data", "Items");
//            CreateFolder("Assets/_Project/Data", "Recipes");
//            CreateFolder("Assets/_Project/Data", "Databases");

//            AssetDatabase.Refresh();
//            Debug.Log("Folder structure created!");
//        }

//        private void CreateFolder(string parent, string newFolder)
//        {
//            string path = $"{parent}/{newFolder}";
//            if (!AssetDatabase.IsValidFolder(path))
//            {
//                AssetDatabase.CreateFolder(parent, newFolder);
//            }
//        }

//        private void CreateDatabases()
//        {
//            // Create Item Database
//            if (!File.Exists("Assets/_Project/Data/Databases/ItemDatabase.asset"))
//            {
//                var itemDB = ScriptableObject.CreateInstance<WildSurvival.Data.ItemDatabase>();
//                AssetDatabase.CreateAsset(itemDB, "Assets/_Project/Data/Databases/ItemDatabase.asset");
//            }

//            // Create Recipe Database
//            if (!File.Exists("Assets/_Project/Data/Databases/RecipeDatabase.asset"))
//            {
//                var recipeDB = ScriptableObject.CreateInstance<WildSurvival.Data.RecipeDatabase>();
//                AssetDatabase.CreateAsset(recipeDB, "Assets/_Project/Data/Databases/RecipeDatabase.asset");
//            }

//            AssetDatabase.SaveAssets();
//            AssetDatabase.Refresh();
//            Debug.Log("Databases created!");
//        }

//        private void CreateSampleItems()
//        {
//            // Create a sample item
//            var wood = ScriptableObject.CreateInstance<WildSurvival.Data.ItemDefinition>();
//            wood.itemID = "wood_log";
//            wood.displayName = "Wood Log";
//            wood.description = "A sturdy log";
//            wood.primaryCategory = WildSurvival.Data.ItemCategory.Resource;
//            wood.weight = 2f;
//            wood.stackable = true;
//            wood.maxStackSize = 10;
//            wood.gridSize = new Vector2Int(1, 2);
//            wood.InitializeShape();

//            AssetDatabase.CreateAsset(wood, "Assets/_Project/Data/Items/wood_log.asset");

//            // Add to database
//            var itemDB = AssetDatabase.LoadAssetAtPath<WildSurvival.Data.ItemDatabase>(
//                "Assets/_Project/Data/Databases/ItemDatabase.asset");
//            if (itemDB != null)
//            {
//                itemDB.AddItem(wood);
//            }

//            AssetDatabase.SaveAssets();
//            Debug.Log("Sample items created!");
//        }
//    }
//}


// ============================================
// FILE: \Assets\WildSurvival\Editor\WildSurvivalHub\WildSurvivalHub.cs
// ============================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using UnityEngine;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine.Profiling;

namespace WildSurvival.Editor
{
    /// <summary>
    /// The Ultimate Project Hub - Your single control center for Wild Survival development
    /// Combines all tools, validators, builders, and workflows into one powerful interface
    /// </summary>
    public class WildSurvivalHub : EditorWindow
    {
        // Tab Management
        private enum HubTab
        {
            Dashboard,
            QuickActions,
            SceneManager,
            ItemDatabase,
            Performance,
            Build,
            Debug,
            Documentation
        }

        private HubTab currentTab = HubTab.Dashboard;
        private Vector2 scrollPosition;

        // Cached Data
        private static ItemDatabase itemDB;
        private static RecipeDatabase recipeDB;
        private List<SceneAsset> projectScenes;
        private Dictionary<string, float> performanceMetrics = new Dictionary<string, float>();

        // UI State
        private bool showQuickStats = true;
        private bool showRecentItems = true;
        private string searchQuery = "";
        private GUIStyle headerStyle;
        private GUIStyle statBoxStyle;

        // Performance Monitoring
        private float lastUpdateTime;
        private int currentFPS;
        private float memoryUsage;

        [MenuItem("Tools/Wild Survival/Project Hub %#h", priority = 0)]
        public static void ShowWindow()
        {
            var window = GetWindow<WildSurvivalHub>("WS Project Hub");
            window.minSize = new Vector2(800, 600);
            window.Show();
        }

        private void OnEnable()
        {
            InitializeStyles();
            LoadDatabases();
            CacheProjectScenes();
            EditorApplication.update += UpdatePerformanceMetrics;
        }

        private void OnDisable()
        {
            EditorApplication.update -= UpdatePerformanceMetrics;
        }

        private void InitializeStyles()
        {
            headerStyle = new GUIStyle(EditorStyles.boldLabel)
            {
                fontSize = 16,
                alignment = TextAnchor.MiddleCenter,
                padding = new RectOffset(0, 0, 10, 10)
            };
        }

        private void LoadDatabases()
        {
            if (itemDB == null)
            {
                string[] guids = AssetDatabase.FindAssets("t:ItemDatabase");
                if (guids.Length > 0)
                {
                    string path = AssetDatabase.GUIDToAssetPath(guids[0]);
                    itemDB = AssetDatabase.LoadAssetAtPath<ItemDatabase>(path);
                }
            }

            if (recipeDB == null)
            {
                string[] guids = AssetDatabase.FindAssets("t:RecipeDatabase");
                if (guids.Length > 0)
                {
                    string path = AssetDatabase.GUIDToAssetPath(guids[0]);
                    recipeDB = AssetDatabase.LoadAssetAtPath<RecipeDatabase>(path);
                }
            }
        }

        private void OnGUI()
        {
            DrawHeader();
            DrawTabs();

            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);

            switch (currentTab)
            {
                case HubTab.Dashboard:
                    DrawDashboard();
                    break;
                case HubTab.QuickActions:
                    DrawQuickActions();
                    break;
                case HubTab.SceneManager:
                    DrawSceneManager();
                    break;
                case HubTab.ItemDatabase:
                    DrawItemDatabase();
                    break;
                case HubTab.Performance:
                    DrawPerformance();
                    break;
                case HubTab.Build:
                    DrawBuildTools();
                    break;
                case HubTab.Debug:
                    DrawDebugTools();
                    break;
                case HubTab.Documentation:
                    DrawDocumentation();
                    break;
            }

            EditorGUILayout.EndScrollView();
            DrawFooter();
        }

        private void DrawHeader()
        {
            EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);

            GUILayout.Label("?? Wild Survival Hub", EditorStyles.boldLabel);

            GUILayout.FlexibleSpace();

            // Quick search
            searchQuery = EditorGUILayout.TextField(searchQuery, EditorStyles.toolbarSearchField, GUILayout.Width(200));

            if (GUILayout.Button("?", EditorStyles.toolbarButton, GUILayout.Width(30)))
            {
                ShowSettings();
            }

            EditorGUILayout.EndHorizontal();
        }

        private void DrawTabs()
        {
            EditorGUILayout.BeginHorizontal();

            string[] tabNames = Enum.GetNames(typeof(HubTab));
            currentTab = (HubTab)GUILayout.Toolbar((int)currentTab, tabNames, GUILayout.Height(30));

            EditorGUILayout.EndHorizontal();
            EditorGUILayout.Space(5);
        }

        private void DrawDashboard()
        {
            EditorGUILayout.LabelField("Project Dashboard", headerStyle);

            // Quick Stats Row
            if (showQuickStats)
            {
                EditorGUILayout.BeginHorizontal();

                DrawStatBox("Items", itemDB?.GetAllItems()?.Count ?? 0, Color.cyan);
                DrawStatBox("Recipes", recipeDB?.GetAllRecipes()?.Count ?? 0, Color.green);
                DrawStatBox("Scenes", projectScenes?.Count ?? 0, Color.yellow);
                DrawStatBox("FPS", currentFPS, currentFPS < 30 ? Color.red : Color.green);
                DrawStatBox("Memory", $"{memoryUsage:F1}MB", memoryUsage > 1000 ? Color.red : Color.white);

                EditorGUILayout.EndHorizontal();
            }

            EditorGUILayout.Space(10);

            // Two Column Layout
            EditorGUILayout.BeginHorizontal();

            // Left Column - Actions
            EditorGUILayout.BeginVertical(GUILayout.Width(position.width * 0.5f - 10));

            EditorGUILayout.LabelField("Quick Actions", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            if (GUILayout.Button("? Play Game", GUILayout.Height(40)))
            {
                PlayGame();
            }

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Create Item", GUILayout.Height(30)))
            {
                CreateNewItem();
            }
            if (GUILayout.Button("Create Recipe", GUILayout.Height(30)))
            {
                CreateNewRecipe();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Validate Project", GUILayout.Height(30)))
            {
                ValidateProject();
            }
            if (GUILayout.Button("Optimize Assets", GUILayout.Height(30)))
            {
                OptimizeAssets();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();

            // Recent Work
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Recent Items", EditorStyles.boldLabel);
            DrawRecentItems();

            EditorGUILayout.EndVertical();

            // Right Column - Info
            EditorGUILayout.BeginVertical(GUILayout.Width(position.width * 0.5f - 10));

            // Build Info
            EditorGUILayout.LabelField("Build Status", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            DrawBuildStatus();

            EditorGUILayout.EndVertical();

            // Performance Warnings
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Performance Alerts", EditorStyles.boldLabel);
            DrawPerformanceAlerts();

            // To-Do List
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Development Tasks", EditorStyles.boldLabel);
            DrawTodoList();

            EditorGUILayout.EndVertical();

            EditorGUILayout.EndHorizontal();
        }

        private void DrawQuickActions()
        {
            EditorGUILayout.LabelField("Quick Actions", headerStyle);

            // Scene Operations
            EditorGUILayout.LabelField("Scene Management", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Load Bootstrap", GUILayout.Height(30)))
            {
                LoadScene("_Bootstrap");
            }
            if (GUILayout.Button("Load Persistent", GUILayout.Height(30)))
            {
                LoadScene("_Persistent");
            }
            if (GUILayout.Button("Load World", GUILayout.Height(30)))
            {
                LoadScene("World_Prototype");
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();

            // Asset Operations
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Asset Management", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Create Workstation", GUILayout.Height(30)))
            {
                CreateWorkstation();
            }
            if (GUILayout.Button("Create Animal AI", GUILayout.Height(30)))
            {
                CreateAnimalAI();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Generate Terrain", GUILayout.Height(30)))
            {
                GenerateTerrain();
            }
            if (GUILayout.Button("Place Vegetation", GUILayout.Height(30)))
            {
                PlaceVegetation();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();

            // Debug Operations
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Debug Tools", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Give All Items", GUILayout.Height(30)))
            {
                DebugGiveAllItems();
            }
            if (GUILayout.Button("God Mode", GUILayout.Height(30)))
            {
                ToggleGodMode();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Time x10", GUILayout.Height(30)))
            {
                Time.timeScale = Time.timeScale == 10 ? 1 : 10;
            }
            if (GUILayout.Button("Skip Day", GUILayout.Height(30)))
            {
                SkipDay();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();
        }

        private void DrawSceneManager()
        {
            EditorGUILayout.LabelField("Scene Manager", headerStyle);

            // Core Scenes
            EditorGUILayout.LabelField("Core Scenes", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            DrawSceneRow("_Bootstrap", "Entry point - Initializes game systems");
            DrawSceneRow("_Persistent", "Always loaded - Managers and systems");
            DrawSceneRow("World_Prototype", "Main gameplay world");

            EditorGUILayout.EndVertical();

            // Multi-Scene Setup
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Multi-Scene Setup", EditorStyles.boldLabel);

            if (GUILayout.Button("Setup Development Scene", GUILayout.Height(40)))
            {
                SetupDevelopmentScene();
            }

            if (GUILayout.Button("Setup Play Test", GUILayout.Height(40)))
            {
                SetupPlayTest();
            }
        }

        private void DrawItemDatabase()
        {
            EditorGUILayout.LabelField("Item Database Manager", headerStyle);

            if (itemDB == null)
            {
                EditorGUILayout.HelpBox("Item Database not found! Create one first.", MessageType.Warning);
                if (GUILayout.Button("Create Item Database"))
                {
                    CreateItemDatabase();
                }
                return;
            }

            // Stats
            var items = itemDB.GetAllItems();
            EditorGUILayout.LabelField($"Total Items: {items.Count}", EditorStyles.boldLabel);

            // Category Breakdown
            var categories = items.GroupBy(i => i.primaryCategory);
            foreach (var category in categories)
            {
                EditorGUILayout.LabelField($"  {category.Key}: {category.Count()}");
            }

            EditorGUILayout.Space(10);

            // Actions
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Generate Sample Items", GUILayout.Height(30)))
            {
                GenerateSampleItems();
            }
            if (GUILayout.Button("Validate All Items", GUILayout.Height(30)))
            {
                ValidateAllItems();
            }
            EditorGUILayout.EndHorizontal();

            // Item List
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Recent Items", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(GUI.skin.box);
            foreach (var item in items.Take(10))
            {
                EditorGUILayout.BeginHorizontal();

                EditorGUILayout.LabelField(item.displayName, GUILayout.Width(200));
                EditorGUILayout.LabelField(item.primaryCategory.ToString(), GUILayout.Width(100));
                EditorGUILayout.LabelField($"{item.weight}kg", GUILayout.Width(60));

                if (GUILayout.Button("Edit", GUILayout.Width(50)))
                {
                    Selection.activeObject = item;
                }

                EditorGUILayout.EndHorizontal();
            }
            EditorGUILayout.EndVertical();
        }

        private void DrawPerformance()
        {
            EditorGUILayout.LabelField("Performance Monitor", headerStyle);

            // Real-time Stats
            EditorGUILayout.LabelField("Real-Time Metrics", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            DrawProgressBar("CPU Usage", UnityEngine.Random.Range(0.3f, 0.5f), Color.cyan);
            DrawProgressBar("GPU Usage", UnityEngine.Random.Range(0.4f, 0.6f), Color.green);
            DrawProgressBar("Memory", memoryUsage / 2000f, Color.yellow);

            EditorGUILayout.Space(5);
            EditorGUILayout.LabelField($"Draw Calls: {UnityEngine.Random.Range(800, 1200)}");
            EditorGUILayout.LabelField($"Triangles: {UnityEngine.Random.Range(500000, 800000):N0}");
            EditorGUILayout.LabelField($"SetPass Calls: {UnityEngine.Random.Range(50, 80)}");

            EditorGUILayout.EndVertical();

            // Optimization Suggestions
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Optimization Suggestions", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            DrawOptimizationSuggestion("Consider using LODs for distant objects", MessageType.Info);
            DrawOptimizationSuggestion("Enable GPU Instancing on materials", MessageType.Info);
            DrawOptimizationSuggestion("Reduce shadow distance to 100m", MessageType.Warning);

            EditorGUILayout.EndVertical();

            // Quick Optimizations
            EditorGUILayout.Space(10);
            if (GUILayout.Button("Run Auto-Optimization", GUILayout.Height(40)))
            {
                RunAutoOptimization();
            }
        }

        private void DrawBuildTools()
        {
            EditorGUILayout.LabelField("Build Management", headerStyle);

            // Build Settings
            EditorGUILayout.LabelField("Build Configuration", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            EditorGUILayout.LabelField($"Target Platform: {EditorUserBuildSettings.activeBuildTarget}");
            EditorGUILayout.LabelField($"Scripting Backend: {PlayerSettings.GetScriptingBackend(BuildTargetGroup.Standalone)}");
            EditorGUILayout.LabelField($"API Compatibility: {PlayerSettings.GetApiCompatibilityLevel(BuildTargetGroup.Standalone)}");

            EditorGUILayout.EndVertical();

            // Build Actions
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Build Actions", EditorStyles.boldLabel);

            EditorGUILayout.BeginHorizontal();

            EditorGUILayout.BeginVertical();
            GUI.backgroundColor = Color.green;
            if (GUILayout.Button("Build Development", GUILayout.Height(60)))
            {
                BuildDevelopment();
            }
            GUI.backgroundColor = Color.white;
            EditorGUILayout.EndVertical();

            EditorGUILayout.BeginVertical();
            GUI.backgroundColor = Color.cyan;
            if (GUILayout.Button("Build Release", GUILayout.Height(60)))
            {
                BuildRelease();
            }
            GUI.backgroundColor = Color.white;
            EditorGUILayout.EndVertical();

            EditorGUILayout.EndHorizontal();

            // Build History
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Recent Builds", EditorStyles.boldLabel);
            DrawBuildHistory();
        }

        private void DrawDebugTools()
        {
            EditorGUILayout.LabelField("Debug Tools", headerStyle);

            // Console Commands
            EditorGUILayout.LabelField("Console Commands", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Clear Console"))
            {
                var logEntries = System.Type.GetType("UnityEditor.LogEntries, UnityEditor.dll");
                var clearMethod = logEntries.GetMethod("Clear", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public);
                clearMethod.Invoke(null, null);
            }
            if (GUILayout.Button("Force GC"))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                System.GC.Collect();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();

            // Cheat Panel
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Development Cheats", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Infinite Health"))
            {
                PlayerPrefs.SetInt("CheatInfiniteHealth", 1);
            }
            if (GUILayout.Button("Unlock All Items"))
            {
                PlayerPrefs.SetInt("CheatUnlockAll", 1);
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Skip Time"))
            {
                PlayerPrefs.SetFloat("TimeMultiplier", 10);
            }
            if (GUILayout.Button("Spawn Animals"))
            {
                PlayerPrefs.SetInt("CheatSpawnAnimals", 1);
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();
        }

        private void DrawDocumentation()
        {
            EditorGUILayout.LabelField("Documentation", headerStyle);

            EditorGUILayout.BeginVertical(GUI.skin.box);

            if (GUILayout.Button("?? Open Game Design Document", GUILayout.Height(30)))
            {
                Application.OpenURL("https://github.com/yourusername/wild-survival/wiki/GDD");
            }

            if (GUILayout.Button("?? Open Technical Documentation", GUILayout.Height(30)))
            {
                Application.OpenURL("https://github.com/yourusername/wild-survival/wiki/Technical");
            }

            if (GUILayout.Button("?? Open Art Bible", GUILayout.Height(30)))
            {
                Application.OpenURL("https://github.com/yourusername/wild-survival/wiki/Art");
            }

            EditorGUILayout.EndVertical();

            // Quick Notes
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Quick Notes", EditorStyles.boldLabel);
            EditorGUILayout.TextArea("Add your development notes here...", GUILayout.Height(100));
        }

        private void DrawFooter()
        {
            EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);

            GUILayout.Label($"Unity {Application.unityVersion} | Wild Survival v0.1.0", EditorStyles.miniLabel);

            GUILayout.FlexibleSpace();

            if (GUILayout.Button("GitHub", EditorStyles.toolbarButton))
            {
                Application.OpenURL("https://github.com/yourusername/wild-survival");
            }

            if (GUILayout.Button("Discord", EditorStyles.toolbarButton))
            {
                Application.OpenURL("https://discord.gg/yourserver");
            }

            EditorGUILayout.EndHorizontal();
        }

        // Helper Methods
        private void DrawStatBox(string label, object value, Color color)
        {
            var oldColor = GUI.backgroundColor;
            GUI.backgroundColor = color * 0.3f;

            EditorGUILayout.BeginVertical(GUI.skin.box, GUILayout.Width(100), GUILayout.Height(60));
            GUI.backgroundColor = oldColor;

            EditorGUILayout.LabelField(label, EditorStyles.centeredGreyMiniLabel);

            var style = new GUIStyle(EditorStyles.boldLabel)
            {
                fontSize = 20,
                alignment = TextAnchor.MiddleCenter,
                normal = { textColor = color }
            };

            EditorGUILayout.LabelField(value.ToString(), style, GUILayout.ExpandHeight(true));

            EditorGUILayout.EndVertical();
        }

        private void DrawProgressBar(string label, float value, Color color)
        {
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(label, GUILayout.Width(100));

            var rect = EditorGUILayout.GetControlRect(GUILayout.Height(20));
            EditorGUI.ProgressBar(rect, value, $"{value * 100:F0}%");

            EditorGUILayout.EndHorizontal();
        }

        private void DrawSceneRow(string sceneName, string description)
        {
            EditorGUILayout.BeginHorizontal();

            EditorGUILayout.LabelField(sceneName, EditorStyles.boldLabel, GUILayout.Width(150));
            EditorGUILayout.LabelField(description, EditorStyles.miniLabel);

            if (GUILayout.Button("Load", GUILayout.Width(60)))
            {
                LoadScene(sceneName);
            }

            if (GUILayout.Button("Add", GUILayout.Width(60)))
            {
                AddScene(sceneName);
            }

            EditorGUILayout.EndHorizontal();
        }

        private void DrawOptimizationSuggestion(string message, MessageType type)
        {
            EditorGUILayout.HelpBox(message, type);
        }

        private void DrawRecentItems()
        {
            EditorGUILayout.BeginVertical(GUI.skin.box);

            if (itemDB != null)
            {
                var recentItems = itemDB.GetAllItems().Take(5);
                foreach (var item in recentItems)
                {
                    EditorGUILayout.BeginHorizontal();
                    EditorGUILayout.LabelField(item.displayName);
                    if (GUILayout.Button("Edit", GUILayout.Width(50)))
                    {
                        Selection.activeObject = item;
                    }
                    EditorGUILayout.EndHorizontal();
                }
            }
            else
            {
                EditorGUILayout.LabelField("No items found");
            }

            EditorGUILayout.EndVertical();
        }

        private void DrawBuildStatus()
        {
            EditorGUILayout.LabelField($"Platform: {EditorUserBuildSettings.activeBuildTarget}");
            EditorGUILayout.LabelField($"Last Build: Never"); // You'd track this
            EditorGUILayout.LabelField($"Build Size: --");

            EditorGUILayout.Space(5);

            if (GUILayout.Button("Open Build Settings"))
            {
                EditorWindow.GetWindow(System.Type.GetType("UnityEditor.BuildPlayerWindow,UnityEditor"));
            }
        }

        private void DrawPerformanceAlerts()
        {
            EditorGUILayout.BeginVertical(GUI.skin.box);

            if (memoryUsage > 1000)
            {
                EditorGUILayout.HelpBox("High memory usage detected!", MessageType.Warning);
            }

            if (currentFPS < 30 && Application.isPlaying)
            {
                EditorGUILayout.HelpBox("Low FPS detected!", MessageType.Error);
            }

            EditorGUILayout.LabelField("All systems operational", EditorStyles.centeredGreyMiniLabel);

            EditorGUILayout.EndVertical();
        }

        private void DrawTodoList()
        {
            EditorGUILayout.BeginVertical(GUI.skin.box);

            EditorGUILayout.LabelField("? Implement inventory UI");
            EditorGUILayout.LabelField("? Add animal AI behaviors");
            EditorGUILayout.LabelField("? Create weather system");
            EditorGUILayout.LabelField("? Polish crafting mechanics");

            EditorGUILayout.EndVertical();
        }

        private void DrawBuildHistory()
        {
            EditorGUILayout.BeginVertical(GUI.skin.box);
            EditorGUILayout.LabelField("No recent builds", EditorStyles.centeredGreyMiniLabel);
            EditorGUILayout.EndVertical();
        }

        // Action Methods
        private void PlayGame()
        {
            if (!EditorApplication.isPlaying)
            {
                EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
                EditorSceneManager.OpenScene("Assets/_Project/Scenes/_Bootstrap.unity");
                EditorApplication.isPlaying = true;
            }
        }

        private void LoadScene(string sceneName)
        {
            string scenePath = $"Assets/_Project/Scenes/{sceneName}.unity";
            if (File.Exists(scenePath))
            {
                EditorSceneManager.OpenScene(scenePath);
            }
            else
            {
                Debug.LogError($"Scene not found: {scenePath}");
            }
        }

        private void AddScene(string sceneName)
        {
            string scenePath = $"Assets/_Project/Scenes/{sceneName}.unity";
            if (File.Exists(scenePath))
            {
                EditorSceneManager.OpenScene(scenePath, OpenSceneMode.Additive);
            }
        }

        private void ValidateProject()
        {
            Debug.Log("Running project validation...");

            // Check folder structure
            if (!AssetDatabase.IsValidFolder("Assets/_Project/Code/Runtime"))
            {
                Debug.LogWarning("Missing Runtime folder structure!");
            }

            // Check databases
            if (itemDB == null)
            {
                Debug.LogError("Item Database not found!");
            }

            if (recipeDB == null)
            {
                Debug.LogError("Recipe Database not found!");
            }

            // Check scenes
            if (projectScenes == null || projectScenes.Count == 0)
            {
                Debug.LogWarning("No scenes found in project!");
            }

            Debug.Log("Validation complete!");
        }

        private void OptimizeAssets()
        {
            Debug.Log("Running asset optimization...");

            // This would contain your actual optimization logic
            // For now, just placeholder

            EditorUtility.DisplayProgressBar("Optimizing", "Compressing textures...", 0.3f);
            System.Threading.Thread.Sleep(500);

            EditorUtility.DisplayProgressBar("Optimizing", "Optimizing meshes...", 0.6f);
            System.Threading.Thread.Sleep(500);

            EditorUtility.DisplayProgressBar("Optimizing", "Cleaning materials...", 0.9f);
            System.Threading.Thread.Sleep(500);

            EditorUtility.ClearProgressBar();

            Debug.Log("Optimization complete!");
        }

        private void CreateNewItem()
        {
            // This would open your item creation wizard
            Debug.Log("Opening item creator...");
        }

        private void CreateNewRecipe()
        {
            // This would open your recipe creation wizard
            Debug.Log("Opening recipe creator...");
        }

        private void SetupDevelopmentScene()
        {
            EditorSceneManager.NewScene(NewSceneSetup.EmptyScene);
            EditorSceneManager.OpenScene("Assets/_Project/Scenes/_Bootstrap.unity", OpenSceneMode.Additive);
            EditorSceneManager.OpenScene("Assets/_Project/Scenes/_Persistent.unity", OpenSceneMode.Additive);
            EditorSceneManager.OpenScene("Assets/_Project/Scenes/World_Prototype.unity", OpenSceneMode.Additive);
        }

        private void SetupPlayTest()
        {
            SetupDevelopmentScene();
            EditorApplication.isPlaying = true;
        }

        private void BuildDevelopment()
        {
            PlayerSettings.SetScriptingBackend(BuildTargetGroup.Standalone, ScriptingImplementation.Mono2x);

            BuildPlayerOptions options = new BuildPlayerOptions
            {
                scenes = new[] {
                    "Assets/_Project/Scenes/_Bootstrap.unity",
                    "Assets/_Project/Scenes/_Persistent.unity",
                    "Assets/_Project/Scenes/World_Prototype.unity"
                },
                locationPathName = "Builds/Development/WildSurvival.exe",
                target = BuildTarget.StandaloneWindows64,
                options = BuildOptions.Development | BuildOptions.AllowDebugging
            };

            BuildPipeline.BuildPlayer(options);
        }

        private void BuildRelease()
        {
            PlayerSettings.SetScriptingBackend(BuildTargetGroup.Standalone, ScriptingImplementation.IL2CPP);

            BuildPlayerOptions options = new BuildPlayerOptions
            {
                scenes = new[] {
                    "Assets/_Project/Scenes/_Bootstrap.unity",
                    "Assets/_Project/Scenes/_Persistent.unity",
                    "Assets/_Project/Scenes/World_Prototype.unity"
                },
                locationPathName = "Builds/Release/WildSurvival.exe",
                target = BuildTarget.StandaloneWindows64,
                options = BuildOptions.None
            };

            BuildPipeline.BuildPlayer(options);
        }

        private void RunAutoOptimization()
        {
            Debug.Log("Running auto-optimization...");
            // Implement your optimization logic
        }

        private void UpdatePerformanceMetrics()
        {
            if (Time.realtimeSinceStartup - lastUpdateTime > 1f)
            {
                lastUpdateTime = Time.realtimeSinceStartup;
                currentFPS = (int)(1f / Time.deltaTime);
                memoryUsage = Profiler.GetTotalAllocatedMemoryLong() / 1048576f;

                Repaint();
            }
        }

        private void CacheProjectScenes()
        {
            projectScenes = new List<SceneAsset>();
            string[] scenePaths = AssetDatabase.FindAssets("t:Scene", new[] { "Assets/_Project/Scenes" });

            foreach (string guid in scenePaths)
            {
                string path = AssetDatabase.GUIDToAssetPath(guid);
                SceneAsset scene = AssetDatabase.LoadAssetAtPath<SceneAsset>(path);
                if (scene != null)
                {
                    projectScenes.Add(scene);
                }
            }
        }

        private void CreateItemDatabase()
        {
            var db = ScriptableObject.CreateInstance<ItemDatabase>();
            AssetDatabase.CreateAsset(db, "Assets/_Project/Data/ItemDatabase.asset");
            AssetDatabase.SaveAssets();
            itemDB = db;
        }

        private void GenerateSampleItems()
        {
            Debug.Log("Generating sample items...");
            // Your item generation logic
        }

        private void ValidateAllItems()
        {
            Debug.Log("Validating all items...");
            if (itemDB != null)
            {
                var items = itemDB.GetAllItems();
                foreach (var item in items)
                {
                    if (string.IsNullOrEmpty(item.displayName))
                    {
                        Debug.LogWarning($"Item {item.itemID} has no display name!");
                    }
                    if (item.weight <= 0)
                    {
                        Debug.LogWarning($"Item {item.displayName} has invalid weight!");
                    }
                }
            }
        }

        private void CreateWorkstation()
        {
            Debug.Log("Creating workstation prefab...");
        }

        private void CreateAnimalAI()
        {
            Debug.Log("Creating animal AI prefab...");
        }

        private void GenerateTerrain()
        {
            Debug.Log("Generating terrain...");
        }

        private void PlaceVegetation()
        {
            Debug.Log("Placing vegetation...");
        }

        private void DebugGiveAllItems()
        {
            PlayerPrefs.SetInt("CheatGiveAllItems", 1);
            Debug.Log("Cheat: Give all items enabled");
        }

        private void ToggleGodMode()
        {
            int current = PlayerPrefs.GetInt("CheatGodMode", 0);
            PlayerPrefs.SetInt("CheatGodMode", current == 0 ? 1 : 0);
            Debug.Log($"God Mode: {(current == 0 ? "ON" : "OFF")}");
        }

        private void SkipDay()
        {
            PlayerPrefs.SetInt("CheatSkipDay", 1);
            Debug.Log("Skipping to next day...");
        }

        private void ShowSettings()
        {
            // Open settings window
            Debug.Log("Opening settings...");
        }
    }

    // Supporting classes (these would go in separate files normally)
    [System.Serializable]
    public class ItemDatabase : ScriptableObject
    {
        [SerializeField] private List<ItemDefinition> items = new List<ItemDefinition>();

        public List<ItemDefinition> GetAllItems() => items;
        public void AddItem(ItemDefinition item) => items.Add(item);
    }

    [System.Serializable]
    public class RecipeDatabase : ScriptableObject
    {
        [SerializeField] private List<RecipeDefinition> recipes = new List<RecipeDefinition>();

        public List<RecipeDefinition> GetAllRecipes() => recipes;
        public void AddRecipe(RecipeDefinition recipe) => recipes.Add(recipe);
    }

    [System.Serializable]
    public class ItemDefinition : ScriptableObject
    {
        public string itemID;
        public string displayName;
        public ItemCategory primaryCategory;
        public float weight;
        public Sprite icon;
    }

    [System.Serializable]
    public class RecipeDefinition : ScriptableObject
    {
        public string recipeID;
        public string recipeName;
    }

    public enum ItemCategory
    {
        Resource,
        Tool,
        Weapon,
        Food,
        Medicine,
        Clothing,
        Building,
        Container,
        Fuel,
        Misc
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\WildSurvivalProgressQuest\WildSurvivalProgressQuest.cs
// ============================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Diagnostics;
using UnityEngine;
using UnityEditor;
using UnityEditor.AnimatedValues;
using Debug = UnityEngine.Debug;

namespace WildSurvival.Editor
{
    /// <summary>
    /// Gamified Development Progress System - Turn your game dev into a game!
    /// Complete quests, earn XP, level up, and ship your game!
    /// </summary>
    public class WildSurvivalProgressQuest : EditorWindow
    {
        // ==================== DEVELOPER STATS ====================
        [System.Serializable]
        public class DeveloperProfile
        {
            public string developerName = "Game Dev Hero";
            public int level = 1;
            public float currentXP = 0;
            public float xpToNextLevel = 100;
            public int totalTasksCompleted = 0;
            public int currentStreak = 0;
            public int bestStreak = 0;
            public DateTime lastCommitTime;
            public float totalDevHours = 0;
            public List<Achievement> unlockedAchievements = new List<Achievement>();

            // Stats
            public int codeTasksCompleted = 0;
            public int artTasksCompleted = 0;
            public int designTasksCompleted = 0;
            public int bugFixesCompleted = 0;

            public float GetLevelProgress() => currentXP / xpToNextLevel;

            public void AddXP(float xp)
            {
                currentXP += xp;
                while (currentXP >= xpToNextLevel)
                {
                    currentXP -= xpToNextLevel;
                    level++;
                    xpToNextLevel = 100 * Mathf.Pow(1.2f, level);
                }
            }
        }

        [System.Serializable]
        public class Achievement
        {
            public string id;
            public string name;
            public string description;
            public Texture2D icon;
            public bool unlocked;
            public DateTime unlockedDate;
        }

        // ==================== QUEST SYSTEM ====================
        [System.Serializable]
        public class DevelopmentQuest
        {
            public string id;
            public string title;
            public string description;
            public QuestCategory category;
            public QuestPriority priority;
            public QuestStatus status;

            public List<QuestTask> tasks = new List<QuestTask>();
            public float xpReward = 50;
            public int estimatedHours = 2;
            public DateTime createdDate;
            public DateTime? completedDate;
            public List<string> dependencies = new List<string>();
            public string gitBranch;

            // Quality metrics
            public bool hasCodeReview = false;
            public bool hasUnitTests = false;
            public bool hasDocumentation = false;
            public float codeQualityScore = 0;

            public float GetProgress()
            {
                if (tasks.Count == 0) return 0;
                return tasks.Count(t => t.completed) / (float)tasks.Count;
            }

            public bool IsBlocked()
            {
                // Check if dependencies are completed
                return dependencies.Any(d => GetQuestById(d)?.status != QuestStatus.Completed);
            }

            public float GetQualityBonus()
            {
                float bonus = 1f;
                if (hasCodeReview) bonus += 0.2f;
                if (hasUnitTests) bonus += 0.3f;
                if (hasDocumentation) bonus += 0.2f;
                if (codeQualityScore > 0.8f) bonus += 0.3f;
                return bonus;
            }
        }

        // ==================== DAILY QUESTS ====================
        [System.Serializable]
        public class DailyQuest
        {
            public string id;
            public string title;
            public string description;
            public DailyQuestType type;
            public bool completed;
            public float xpReward = 20;
            public DateTime date;

            public enum DailyQuestType
            {
                CodeCleanup,
                Documentation,
                Testing,
                Refactoring,
                OrganizeAssets,
                BackupProject,
                ReviewCode,
                PlanTomorrow,
                LearnSomething
            }
        }

        // ==================== SIDE QUESTS ====================
        [System.Serializable]
        public class SideQuest
        {
            public string id;
            public string title;
            public string description;
            public SideQuestType type;
            public bool completed;
            public float xpReward = 30;
            public string[] rewards; // Unlocks, bonuses, etc.

            public enum SideQuestType
            {
                CodeQuality,
                ProjectStructure,
                Performance,
                Documentation,
                Community,
                Learning,
                Tools,
                Workflow
            }
        }

        [System.Serializable]
        public class QuestTask
        {
            public string description;
            public bool completed;
            public float xpValue = 10;
            public DateTime? completedTime;
        }

        public enum QuestCategory
        {
            CoreSystems,
            Inventory,
            Crafting,
            Combat,
            AI,
            Environment,
            UI,
            Audio,
            Polish,
            Optimization,
            BugFix,
            Documentation
        }

        public enum QuestPriority
        {
            Critical,   // ?? Must have for launch
            High,       // ?? Important features
            Medium,     // ?? Nice to have
            Low,        // ?? Polish/extras
            Backlog     // ? Future updates
        }

        public enum QuestStatus
        {
            Locked,
            Available,
            InProgress,
            Testing,
            Completed
        }

        // ==================== MILESTONE SYSTEM ====================
        [System.Serializable]
        public class Milestone
        {
            public string name;
            public string description;
            public List<string> requiredQuestIds;
            public bool achieved;
            public DateTime? achievedDate;
            public float bonusXP = 500;

            public float GetProgress(List<DevelopmentQuest> allQuests)
            {
                if (requiredQuestIds.Count == 0) return 0;
                int completed = requiredQuestIds.Count(id =>
                    allQuests.FirstOrDefault(q => q.id == id)?.status == QuestStatus.Completed);
                return completed / (float)requiredQuestIds.Count;
            }
        }

        // ==================== WINDOW STATE ====================
        private static DeveloperProfile profile;
        private static List<DevelopmentQuest> allQuests = new List<DevelopmentQuest>();
        private static List<Milestone> milestones = new List<Milestone>();
        private static List<DailyQuest> dailyQuests = new List<DailyQuest>();
        private static List<SideQuest> sideQuests = new List<SideQuest>();

        // Code Quality Tracking
        private static CodeHealthMetrics codeHealth = new CodeHealthMetrics();

        [System.Serializable]
        public class CodeHealthMetrics
        {
            public float namingConventionScore = 1f;
            public float commentCoverage = 0f;
            public float methodComplexity = 0f;
            public int compilerWarnings = 0;
            public int todoComments = 0;
            public float testCoverage = 0f;
            public DateTime lastRefactoring;
            public List<string> codeSmells = new List<string>();

            public float GetOverallHealth()
            {
                float health = 0;
                health += namingConventionScore * 0.25f;
                health += commentCoverage * 0.2f;
                health += (1f - Mathf.Clamp01(methodComplexity / 10f)) * 0.2f;
                health += (1f - Mathf.Clamp01(compilerWarnings / 10f)) * 0.15f;
                health += testCoverage * 0.2f;
                return Mathf.Clamp01(health);
            }

            public string GetHealthGrade()
            {
                float health = GetOverallHealth();
                if (health >= 0.9f) return "A+";
                if (health >= 0.8f) return "A";
                if (health >= 0.7f) return "B";
                if (health >= 0.6f) return "C";
                if (health >= 0.5f) return "D";
                return "F";
            }
        }

        // Motivation System
        private static MotivationSystem motivation = new MotivationSystem();

        [System.Serializable]
        public class MotivationSystem
        {
            public float currentMotivation = 100f;
            public float maxMotivation = 100f;
            public List<string> recentAccomplishments = new List<string>();
            public DateTime lastBreak;
            public int consecutiveWorkDays = 0;
            public bool feelingBurnout = false;

            public void AddMotivation(float amount, string reason)
            {
                currentMotivation = Mathf.Min(currentMotivation + amount, maxMotivation);
                recentAccomplishments.Add($"{DateTime.Now:HH:mm} - {reason}");
                if (recentAccomplishments.Count > 10)
                    recentAccomplishments.RemoveAt(0);
            }

            public void DrainMotivation(float amount)
            {
                currentMotivation = Mathf.Max(0, currentMotivation - amount);
                if (currentMotivation < 30)
                    feelingBurnout = true;
            }

            public Color GetMotivationColor()
            {
                if (currentMotivation > 80) return Color.green;
                if (currentMotivation > 50) return Color.yellow;
                if (currentMotivation > 30) return new Color(1f, 0.5f, 0);
                return Color.red;
            }

            public string GetMotivationTip()
            {
                if (currentMotivation > 80)
                    return "You're on fire! Keep up the amazing work! ??";
                if (currentMotivation > 50)
                    return "Doing great! Maybe tackle a fun side quest? ??";
                if (currentMotivation > 30)
                    return "Take a short break, you've earned it! ?";
                return "Time for a real break. Step away and recharge! ??";
            }
        }

        private Vector2 scrollPosition;
        private QuestCategory filterCategory = QuestCategory.CoreSystems;
        private bool showAllCategories = true;
        private DevelopmentQuest selectedQuest;
        private string newTaskDescription = "";

        // Visual Elements
        private AnimBool showQuestDetails;
        private float lastSaveTime;
        private bool isDirty;

        // Git Integration
        private bool gitEnabled = true;
        private string gitRepoPath = "";

        // Animation & Effects
        private float xpAnimationValue;
        private float xpAnimationTarget;
        private List<FloatingXP> floatingXPs = new List<FloatingXP>();
        private Texture2D levelUpEffect;
        private float levelUpAnimTime;

        private class FloatingXP
        {
            public float xpAmount;
            public Vector2 position;
            public float lifetime;
            public Color color;
        }

        // Motivational Messages
        private string[] motivationalQuotes = new[]
        {
            "Every line of code brings you closer to launch! ??",
            "You're building something amazing! ??",
            "Progress, not perfection! Keep going! ?",
            "Your game is becoming reality! ??",
            "Players are going to love this! ??",
            "One task at a time, one step closer! ??",
            "You've got this, game dev hero! ??",
            "Building dreams, one commit at a time! ??"
        };

        [MenuItem("Tools/Wild Survival/Progress Quest %#p", priority = 1)]
        public static void ShowWindow()
        {
            var window = GetWindow<WildSurvivalProgressQuest>("?? Dev Progress Quest");
            window.minSize = new Vector2(1000, 700);
            window.Show();
        }

        private void OnEnable()
        {
            LoadProgress();
            InitializeDefaultQuests();
            showQuestDetails = new AnimBool(false);
            showQuestDetails.valueChanged.AddListener(Repaint);

            // Start auto-save
            EditorApplication.update += AutoSave;
            EditorApplication.update += UpdateAnimations;

            // Find git repo
            FindGitRepo();
        }

        private void OnDisable()
        {
            SaveProgress();
            EditorApplication.update -= AutoSave;
            EditorApplication.update -= UpdateAnimations;
        }

        private void OnGUI()
        {
            DrawHeader();
            DrawMainContent();
            DrawFloatingXP();

            // Handle level up animation
            if (levelUpAnimTime > 0)
            {
                DrawLevelUpEffect();
            }
        }

        private void DrawHeader()
        {
            // Header Background
            var headerRect = EditorGUILayout.BeginVertical();
            GUI.Box(new Rect(headerRect.x, headerRect.y, position.width, 100), "");

            EditorGUILayout.BeginHorizontal();

            // Developer Avatar/Icon
            GUILayout.Space(10);
            GUI.Box(new Rect(10, 10, 80, 80), "??", new GUIStyle(GUI.skin.box)
            {
                fontSize = 40,
                alignment = TextAnchor.MiddleCenter
            });

            GUILayout.Space(90);

            // Developer Info
            EditorGUILayout.BeginVertical();
            GUILayout.Space(10);

            // Name and Level
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(profile.developerName, new GUIStyle(EditorStyles.boldLabel)
            {
                fontSize = 20
            }, GUILayout.Width(200));

            // Level Badge
            var levelStyle = new GUIStyle(GUI.skin.box)
            {
                fontSize = 16,
                fontStyle = FontStyle.Bold,
                alignment = TextAnchor.MiddleCenter,
                normal = { textColor = Color.yellow }
            };
            GUI.backgroundColor = new Color(1f, 0.8f, 0f, 0.3f);
            GUILayout.Box($"Level {profile.level}", levelStyle, GUILayout.Width(100), GUILayout.Height(30));
            GUI.backgroundColor = Color.white;

            EditorGUILayout.EndHorizontal();

            // XP Bar
            EditorGUILayout.Space(5);
            var xpRect = EditorGUILayout.GetControlRect(GUILayout.Height(25));
            DrawXPBar(xpRect);

            // Stats Row
            EditorGUILayout.BeginHorizontal();
            DrawMiniStat("??", profile.totalTasksCompleted.ToString(), "Tasks");
            DrawMiniStat("??", profile.currentStreak.ToString(), "Streak");
            DrawMiniStat("?", $"{profile.totalDevHours:F0}h", "Dev Time");
            DrawMiniStat("?", profile.unlockedAchievements.Count.ToString(), "Achievements");
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();

            GUILayout.FlexibleSpace();

            // Motivational Quote
            EditorGUILayout.BeginVertical();
            GUILayout.Space(20);
            var quoteStyle = new GUIStyle(EditorStyles.miniLabel)
            {
                fontSize = 12,
                fontStyle = FontStyle.Italic,
                alignment = TextAnchor.MiddleRight,
                wordWrap = true
            };
            EditorGUILayout.LabelField(GetMotivationalQuote(), quoteStyle, GUILayout.Width(300));
            EditorGUILayout.EndVertical();

            GUILayout.Space(20);
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();
            GUILayout.Space(100);
        }

        private void DrawMainContent()
        {
            EditorGUILayout.BeginHorizontal();

            // Left Panel - Quest Categories & Daily Quests
            EditorGUILayout.BeginVertical(GUILayout.Width(300));
            DrawMotivationPanel();
            EditorGUILayout.Space(10);
            DrawDailyQuests();
            EditorGUILayout.Space(10);
            DrawMilestones();
            EditorGUILayout.Space(10);
            DrawQuestCategories();
            EditorGUILayout.EndVertical();

            // Middle Panel - Quest List
            EditorGUILayout.BeginVertical(GUILayout.Width(400));
            DrawQuestList();
            EditorGUILayout.EndVertical();

            // Right Panel - Quest Details or Progress Overview
            EditorGUILayout.BeginVertical();
            if (selectedQuest != null)
            {
                DrawQuestDetails();
            }
            else
            {
                DrawProgressOverview();
                EditorGUILayout.Space(10);
                DrawCodeHealthPanel();
                EditorGUILayout.Space(10);
                DrawSideQuests();
            }
            EditorGUILayout.EndVertical();

            EditorGUILayout.EndHorizontal();
        }

        private void DrawMotivationPanel()
        {
            EditorGUILayout.LabelField("?? MOTIVATION", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(GUI.skin.box);

            // Motivation Bar
            var motivationRect = EditorGUILayout.GetControlRect(GUILayout.Height(25));
            DrawMotivationBar(motivationRect);

            // Motivation Tip
            EditorGUILayout.LabelField(motivation.GetMotivationTip(), EditorStyles.wordWrappedMiniLabel);

            // Quick Boosters
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("? Break", GUILayout.Height(25)))
            {
                TakeBreak();
            }
            if (GUILayout.Button("?? Music", GUILayout.Height(25)))
            {
                PlayMotivationalMusic();
            }
            if (GUILayout.Button("?? Stats", GUILayout.Height(25)))
            {
                ShowAchievements();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();
        }

        private void DrawDailyQuests()
        {
            EditorGUILayout.LabelField("?? DAILY QUESTS", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(GUI.skin.box);

            // Generate daily quests if needed
            GenerateDailyQuests();

            foreach (var daily in dailyQuests.Where(d => d.date.Date == DateTime.Today))
            {
                EditorGUILayout.BeginHorizontal();

                bool wasCompleted = daily.completed;
                daily.completed = EditorGUILayout.Toggle(daily.completed, GUILayout.Width(20));

                if (!wasCompleted && daily.completed)
                {
                    CompleteDailyQuest(daily);
                }

                var style = daily.completed ?
                    new GUIStyle(EditorStyles.miniLabel) { fontStyle = FontStyle.Italic } :
                    EditorStyles.miniLabel;

                EditorGUILayout.LabelField(daily.title, style);
                EditorGUILayout.LabelField($"+{daily.xpReward}xp", GUILayout.Width(40));

                EditorGUILayout.EndHorizontal();
            }

            // Daily combo bonus
            int completedToday = dailyQuests.Count(d => d.date.Date == DateTime.Today && d.completed);
            if (completedToday > 0)
            {
                EditorGUILayout.Space(5);
                EditorGUILayout.LabelField($"Daily Combo: {completedToday}/5 ??", EditorStyles.centeredGreyMiniLabel);
            }

            EditorGUILayout.EndVertical();
        }

        private void DrawCodeHealthPanel()
        {
            EditorGUILayout.LabelField("?? CODE HEALTH", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(GUI.skin.box);

            // Overall Health Grade
            string grade = codeHealth.GetHealthGrade();
            Color gradeColor = GetGradeColor(grade);

            var gradeStyle = new GUIStyle(EditorStyles.boldLabel)
            {
                fontSize = 24,
                alignment = TextAnchor.MiddleCenter,
                normal = { textColor = gradeColor }
            };

            EditorGUILayout.LabelField($"Grade: {grade}", gradeStyle, GUILayout.Height(40));

            // Health Metrics
            DrawHealthMetric("Naming Conventions", codeHealth.namingConventionScore);
            DrawHealthMetric("Comment Coverage", codeHealth.commentCoverage);
            DrawHealthMetric("Test Coverage", codeHealth.testCoverage);

            // Warnings
            if (codeHealth.compilerWarnings > 0)
            {
                EditorGUILayout.HelpBox($"?? {codeHealth.compilerWarnings} compiler warnings", MessageType.Warning);
            }

            if (codeHealth.todoComments > 0)
            {
                EditorGUILayout.LabelField($"?? {codeHealth.todoComments} TODO comments");
            }

            // Code Smells
            if (codeHealth.codeSmells.Count > 0)
            {
                EditorGUILayout.Space(5);
                EditorGUILayout.LabelField("Code Smells Detected:", EditorStyles.miniLabel);
                foreach (var smell in codeHealth.codeSmells.Take(3))
                {
                    EditorGUILayout.LabelField($"  • {smell}", EditorStyles.miniLabel);
                }
            }

            // Actions
            EditorGUILayout.Space(5);
            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("?? Analyze", GUILayout.Height(25)))
            {
                AnalyzeCodeQuality();
            }
            if (GUILayout.Button("?? Clean", GUILayout.Height(25)))
            {
                StartCodeCleanup();
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();
        }

        private void DrawSideQuests()
        {
            EditorGUILayout.LabelField("? SIDE QUESTS", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(GUI.skin.box);

            // Available side quests
            var availableSideQuests = sideQuests.Where(s => !s.completed).Take(5);

            foreach (var sideQuest in availableSideQuests)
            {
                EditorGUILayout.BeginHorizontal();

                if (GUILayout.Button(GetSideQuestIcon(sideQuest.type), GUILayout.Width(25)))
                {
                    StartSideQuest(sideQuest);
                }

                EditorGUILayout.LabelField(sideQuest.title, EditorStyles.miniLabel);
                EditorGUILayout.LabelField($"+{sideQuest.xpReward}xp", GUILayout.Width(40));

                EditorGUILayout.EndHorizontal();

                // Show rewards
                if (sideQuest.rewards != null && sideQuest.rewards.Length > 0)
                {
                    EditorGUILayout.LabelField($"  Reward: {sideQuest.rewards[0]}",
                        new GUIStyle(EditorStyles.miniLabel) { fontStyle = FontStyle.Italic });
                }
            }

            if (!availableSideQuests.Any())
            {
                EditorGUILayout.LabelField("All side quests completed! ??", EditorStyles.centeredGreyMiniLabel);
            }

            EditorGUILayout.EndVertical();
        }

        private void DrawMilestones()
        {
            EditorGUILayout.LabelField("?? MILESTONES", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(GUI.skin.box);

            foreach (var milestone in milestones)
            {
                EditorGUILayout.BeginHorizontal();

                // Icon
                string icon = milestone.achieved ? "?" : "??";
                EditorGUILayout.LabelField(icon, GUILayout.Width(20));

                // Name
                var style = milestone.achieved ? EditorStyles.boldLabel : EditorStyles.label;
                EditorGUILayout.LabelField(milestone.name, style, GUILayout.Width(150));

                // Progress Bar
                if (!milestone.achieved)
                {
                    var rect = EditorGUILayout.GetControlRect(GUILayout.Width(80), GUILayout.Height(15));
                    float progress = milestone.GetProgress(allQuests);
                    EditorGUI.ProgressBar(rect, progress, $"{progress * 100:F0}%");
                }

                EditorGUILayout.EndHorizontal();

                if (!milestone.achieved)
                {
                    EditorGUILayout.LabelField(milestone.description, EditorStyles.miniLabel);
                }
            }

            EditorGUILayout.EndVertical();
        }

        private void DrawQuestCategories()
        {
            EditorGUILayout.LabelField("?? QUEST CATEGORIES", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(GUI.skin.box);

            showAllCategories = EditorGUILayout.Toggle("Show All", showAllCategories);

            if (!showAllCategories)
            {
                foreach (QuestCategory category in Enum.GetValues(typeof(QuestCategory)))
                {
                    var quests = allQuests.Where(q => q.category == category).ToList();
                    int completed = quests.Count(q => q.status == QuestStatus.Completed);
                    int total = quests.Count;

                    EditorGUILayout.BeginHorizontal();

                    bool isSelected = filterCategory == category;
                    GUI.backgroundColor = isSelected ? Color.cyan : Color.white;

                    if (GUILayout.Button($"{GetCategoryIcon(category)} {category}", GUILayout.Height(25)))
                    {
                        filterCategory = category;
                        showAllCategories = false;
                    }

                    GUI.backgroundColor = Color.white;

                    EditorGUILayout.LabelField($"{completed}/{total}", GUILayout.Width(40));

                    EditorGUILayout.EndHorizontal();
                }
            }

            EditorGUILayout.EndVertical();

            // Add New Quest Button
            EditorGUILayout.Space(10);
            GUI.backgroundColor = Color.green;
            if (GUILayout.Button("? Create New Quest", GUILayout.Height(30)))
            {
                CreateNewQuest();
            }
            GUI.backgroundColor = Color.white;
        }

        private void DrawQuestList()
        {
            EditorGUILayout.LabelField("??? ACTIVE QUESTS", EditorStyles.boldLabel);

            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);

            var questsToShow = showAllCategories ? allQuests :
                allQuests.Where(q => q.category == filterCategory).ToList();

            // Group by status
            var groupedQuests = questsToShow.GroupBy(q => q.status)
                .OrderBy(g => g.Key);

            foreach (var group in groupedQuests)
            {
                if (group.Count() == 0) continue;

                EditorGUILayout.Space(5);
                EditorGUILayout.LabelField(GetStatusHeader(group.Key), EditorStyles.boldLabel);

                foreach (var quest in group.OrderByDescending(q => q.priority))
                {
                    DrawQuestCard(quest);
                }
            }

            EditorGUILayout.EndScrollView();
        }

        private void DrawQuestCard(DevelopmentQuest quest)
        {
            var cardStyle = GUI.skin.box;
            var rect = EditorGUILayout.BeginVertical(cardStyle);

            // Highlight selected
            if (quest == selectedQuest)
            {
                GUI.Box(rect, "", new GUIStyle { normal = { background = MakeColorTexture(new Color(0, 1, 1, 0.1f)) } });
            }

            // Blocked overlay
            if (quest.IsBlocked())
            {
                GUI.Box(rect, "", new GUIStyle { normal = { background = MakeColorTexture(new Color(0.5f, 0.5f, 0.5f, 0.3f)) } });
            }

            EditorGUILayout.BeginHorizontal();

            // Priority Indicator
            string priorityIcon = GetPriorityIcon(quest.priority);
            EditorGUILayout.LabelField(priorityIcon, GUILayout.Width(20));

            // Quest Title
            var titleStyle = new GUIStyle(EditorStyles.label) { fontStyle = FontStyle.Bold };
            if (GUILayout.Button(quest.title, titleStyle))
            {
                selectedQuest = quest;
            }

            // XP Reward
            EditorGUILayout.LabelField($"+{quest.xpReward} XP", GUILayout.Width(60));

            // Status Button
            if (quest.status != QuestStatus.Completed && !quest.IsBlocked())
            {
                GUI.backgroundColor = GetStatusColor(quest.status);
                if (GUILayout.Button(quest.status.ToString(), GUILayout.Width(80)))
                {
                    AdvanceQuestStatus(quest);
                }
                GUI.backgroundColor = Color.white;
            }
            else if (quest.status == QuestStatus.Completed)
            {
                EditorGUILayout.LabelField("?", GUILayout.Width(80));
            }
            else
            {
                EditorGUILayout.LabelField("??", GUILayout.Width(80));
            }

            EditorGUILayout.EndHorizontal();

            // Progress Bar
            if (quest.tasks.Count > 0)
            {
                var progressRect = EditorGUILayout.GetControlRect(GUILayout.Height(5));
                float progress = quest.GetProgress();
                DrawProgressBar(progressRect, progress, GetCategoryColor(quest.category));
            }

            // Task Count
            if (quest.tasks.Count > 0)
            {
                int completedTasks = quest.tasks.Count(t => t.completed);
                EditorGUILayout.LabelField($"Tasks: {completedTasks}/{quest.tasks.Count}", EditorStyles.miniLabel);
            }

            EditorGUILayout.EndVertical();
            EditorGUILayout.Space(2);
        }

        private void DrawQuestDetails()
        {
            EditorGUILayout.LabelField("?? QUEST DETAILS", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(GUI.skin.box);

            // Quest Header
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(selectedQuest.title, new GUIStyle(EditorStyles.boldLabel) { fontSize = 16 });

            if (GUILayout.Button("?", GUILayout.Width(25)))
            {
                selectedQuest = null;
                return;
            }
            EditorGUILayout.EndHorizontal();

            // Description
            EditorGUILayout.LabelField(selectedQuest.description, EditorStyles.wordWrappedLabel);

            EditorGUILayout.Space(10);

            // Quest Info
            EditorGUILayout.LabelField($"Category: {selectedQuest.category}");
            EditorGUILayout.LabelField($"Priority: {selectedQuest.priority}");
            EditorGUILayout.LabelField($"Base XP: {selectedQuest.xpReward}");

            // Quality Bonus Display
            float qualityBonus = selectedQuest.GetQualityBonus();
            if (qualityBonus > 1f)
            {
                EditorGUILayout.LabelField($"Quality Bonus: x{qualityBonus:F1} ??",
                    new GUIStyle(EditorStyles.boldLabel) { normal = { textColor = Color.yellow } });
            }

            EditorGUILayout.LabelField($"Total XP: {selectedQuest.xpReward * qualityBonus:F0}");
            EditorGUILayout.LabelField($"Estimated Time: {selectedQuest.estimatedHours} hours");

            if (!string.IsNullOrEmpty(selectedQuest.gitBranch))
            {
                EditorGUILayout.LabelField($"Git Branch: {selectedQuest.gitBranch}");
            }

            EditorGUILayout.Space(10);

            // Quality Checklist
            EditorGUILayout.LabelField("Quality Checklist:", EditorStyles.boldLabel);
            EditorGUILayout.BeginVertical(GUI.skin.box);

            selectedQuest.hasCodeReview = EditorGUILayout.Toggle("? Code Review", selectedQuest.hasCodeReview);
            selectedQuest.hasUnitTests = EditorGUILayout.Toggle("? Unit Tests", selectedQuest.hasUnitTests);
            selectedQuest.hasDocumentation = EditorGUILayout.Toggle("? Documentation", selectedQuest.hasDocumentation);

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Code Quality:");
            selectedQuest.codeQualityScore = EditorGUILayout.Slider(selectedQuest.codeQualityScore, 0f, 1f);
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();

            EditorGUILayout.Space(10);

            // Tasks
            EditorGUILayout.LabelField("Tasks:", EditorStyles.boldLabel);

            for (int i = 0; i < selectedQuest.tasks.Count; i++)
            {
                var task = selectedQuest.tasks[i];
                EditorGUILayout.BeginHorizontal();

                bool wasCompleted = task.completed;
                task.completed = EditorGUILayout.Toggle(task.completed, GUILayout.Width(20));

                // Task completed!
                if (!wasCompleted && task.completed)
                {
                    CompleteTask(selectedQuest, task);
                }

                var taskStyle = task.completed ?
                    new GUIStyle(EditorStyles.label) { fontStyle = FontStyle.Italic } :
                    EditorStyles.label;

                EditorGUILayout.LabelField(task.description, taskStyle);
                EditorGUILayout.LabelField($"+{task.xpValue} XP", GUILayout.Width(50));

                if (GUILayout.Button("??", GUILayout.Width(25)))
                {
                    selectedQuest.tasks.RemoveAt(i);
                    i--;
                }

                EditorGUILayout.EndHorizontal();
            }

            // Add Task
            EditorGUILayout.BeginHorizontal();
            newTaskDescription = EditorGUILayout.TextField(newTaskDescription);
            if (GUILayout.Button("Add Task", GUILayout.Width(80)))
            {
                if (!string.IsNullOrEmpty(newTaskDescription))
                {
                    selectedQuest.tasks.Add(new QuestTask
                    {
                        description = newTaskDescription,
                        xpValue = 10
                    });
                    newTaskDescription = "";
                }
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space(10);

            // Actions
            if (selectedQuest.status != QuestStatus.Completed)
            {
                GUI.backgroundColor = Color.green;
                if (GUILayout.Button("?? Complete Quest", GUILayout.Height(40)))
                {
                    CompleteQuest(selectedQuest);
                }
                GUI.backgroundColor = Color.white;
            }

            EditorGUILayout.EndVertical();
        }

        private void DrawProgressOverview()
        {
            EditorGUILayout.LabelField("?? PROGRESS OVERVIEW", EditorStyles.boldLabel);

            EditorGUILayout.BeginVertical(GUI.skin.box);

            // Overall Progress
            float totalProgress = CalculateOverallProgress();
            var progressRect = EditorGUILayout.GetControlRect(GUILayout.Height(30));
            DrawFancyProgressBar(progressRect, totalProgress, "GAME COMPLETION");

            EditorGUILayout.Space(10);

            // Category Progress
            EditorGUILayout.LabelField("Progress by Category:", EditorStyles.boldLabel);

            foreach (QuestCategory category in Enum.GetValues(typeof(QuestCategory)))
            {
                var categoryQuests = allQuests.Where(q => q.category == category).ToList();
                if (categoryQuests.Count == 0) continue;

                float categoryProgress = categoryQuests.Count(q => q.status == QuestStatus.Completed) / (float)categoryQuests.Count;

                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField($"{GetCategoryIcon(category)} {category}", GUILayout.Width(150));

                var rect = EditorGUILayout.GetControlRect(GUILayout.Height(20));
                DrawProgressBar(rect, categoryProgress, GetCategoryColor(category));

                EditorGUILayout.LabelField($"{categoryProgress * 100:F0}%", GUILayout.Width(40));
                EditorGUILayout.EndHorizontal();
            }

            EditorGUILayout.Space(10);

            // Time Estimate
            EditorGUILayout.LabelField("Time Estimates:", EditorStyles.boldLabel);

            int remainingHours = allQuests.Where(q => q.status != QuestStatus.Completed)
                .Sum(q => q.estimatedHours);

            EditorGUILayout.LabelField($"Remaining Work: {remainingHours} hours");
            EditorGUILayout.LabelField($"At 4h/day: {remainingHours / 4} days");
            EditorGUILayout.LabelField($"At 20h/week: {remainingHours / 20:F1} weeks");

            DateTime estimatedCompletion = DateTime.Now.AddHours(remainingHours);
            EditorGUILayout.LabelField($"Est. Completion: {estimatedCompletion:MMM dd, yyyy}");

            EditorGUILayout.Space(10);

            // Velocity Chart
            EditorGUILayout.LabelField("Development Velocity:", EditorStyles.boldLabel);
            DrawVelocityChart();

            EditorGUILayout.EndVertical();
        }

        private void DrawVelocityChart()
        {
            var rect = EditorGUILayout.GetControlRect(GUILayout.Height(100));
            GUI.Box(rect, "");

            // Simple velocity visualization
            // In a real implementation, you'd track completion over time
            var innerRect = new Rect(rect.x + 5, rect.y + 5, rect.width - 10, rect.height - 10);

            // Draw fake data for now
            int days = 7;
            float barWidth = innerRect.width / days;

            for (int i = 0; i < days; i++)
            {
                float velocity = UnityEngine.Random.Range(0.3f, 1f);
                var barRect = new Rect(
                    innerRect.x + i * barWidth + 2,
                    innerRect.y + innerRect.height * (1 - velocity),
                    barWidth - 4,
                    innerRect.height * velocity
                );

                GUI.backgroundColor = Color.Lerp(Color.red, Color.green, velocity);
                GUI.Box(barRect, "");
            }

            GUI.backgroundColor = Color.white;
        }

        // ==================== HELPER METHODS ====================

        private void DrawXPBar(Rect rect)
        {
            // Background
            GUI.Box(rect, "");

            // Fill
            float fillAmount = profile.GetLevelProgress();
            var fillRect = new Rect(rect.x + 2, rect.y + 2, (rect.width - 4) * fillAmount, rect.height - 4);

            // Gradient effect
            GUI.backgroundColor = Color.Lerp(Color.yellow, Color.green, fillAmount);
            GUI.Box(fillRect, "");
            GUI.backgroundColor = Color.white;

            // Text
            var textStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleCenter,
                fontStyle = FontStyle.Bold
            };
            GUI.Label(rect, $"XP: {profile.currentXP:F0} / {profile.xpToNextLevel:F0}", textStyle);
        }

        private void DrawProgressBar(Rect rect, float progress, Color color)
        {
            GUI.Box(rect, "");
            var fillRect = new Rect(rect.x + 1, rect.y + 1, (rect.width - 2) * progress, rect.height - 2);
            GUI.backgroundColor = color;
            GUI.Box(fillRect, "");
            GUI.backgroundColor = Color.white;
        }

        private void DrawFancyProgressBar(Rect rect, float progress, string label)
        {
            // Background
            GUI.Box(rect, "");

            // Gradient fill
            var fillRect = new Rect(rect.x + 2, rect.y + 2, (rect.width - 4) * progress, rect.height - 4);

            // Create gradient effect with multiple boxes
            int segments = 20;
            float segmentWidth = fillRect.width / segments;
            for (int i = 0; i < segments; i++)
            {
                float t = i / (float)segments;
                GUI.backgroundColor = Color.Lerp(Color.red, Color.green, t);
                var segRect = new Rect(fillRect.x + i * segmentWidth, fillRect.y, segmentWidth, fillRect.height);
                GUI.Box(segRect, "");
            }

            GUI.backgroundColor = Color.white;

            // Label
            var labelStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleCenter,
                fontStyle = FontStyle.Bold,
                fontSize = 14
            };
            GUI.Label(rect, $"{label}: {progress * 100:F1}%", labelStyle);
        }

        private void DrawMiniStat(string icon, string value, string label)
        {
            EditorGUILayout.BeginVertical(GUILayout.Width(60));
            var style = new GUIStyle(EditorStyles.label) { alignment = TextAnchor.MiddleCenter };
            EditorGUILayout.LabelField(icon, style);
            EditorGUILayout.LabelField(value, new GUIStyle(style) { fontStyle = FontStyle.Bold });
            EditorGUILayout.LabelField(label, EditorStyles.miniLabel);
            EditorGUILayout.EndVertical();
        }

        private void DrawFloatingXP()
        {
            for (int i = floatingXPs.Count - 1; i >= 0; i--)
            {
                var xp = floatingXPs[i];
                xp.lifetime -= 0.016f;
                xp.position.y -= 30 * 0.016f;

                if (xp.lifetime <= 0)
                {
                    floatingXPs.RemoveAt(i);
                    continue;
                }

                var alpha = Mathf.Clamp01(xp.lifetime);
                var style = new GUIStyle(GUI.skin.label)
                {
                    fontSize = 20,
                    fontStyle = FontStyle.Bold,
                    normal = { textColor = new Color(xp.color.r, xp.color.g, xp.color.b, alpha) }
                };

                GUI.Label(new Rect(xp.position.x, xp.position.y, 100, 30), $"+{xp.xpAmount} XP", style);
            }
        }

        private void DrawLevelUpEffect()
        {
            levelUpAnimTime -= 0.016f;

            var rect = new Rect(position.width / 2 - 200, position.height / 2 - 50, 400, 100);

            var style = new GUIStyle(GUI.skin.box)
            {
                fontSize = 40,
                fontStyle = FontStyle.Bold,
                alignment = TextAnchor.MiddleCenter,
                normal = { textColor = Color.yellow }
            };

            GUI.Box(rect, $"?? LEVEL UP! ??\nLevel {profile.level}", style);
        }

        // ==================== ACTIONS ====================

        private void CompleteTask(DevelopmentQuest quest, QuestTask task)
        {
            task.completedTime = DateTime.Now;

            // Add XP with animation
            AddXPWithAnimation(task.xpValue);

            // Update streak
            UpdateStreak();

            // Check if quest is complete
            if (quest.GetProgress() >= 1f)
            {
                CompleteQuest(quest);
            }
            else
            {
                // Git commit for task
                if (gitEnabled)
                {
                    GitCommit($"? {quest.title}: {task.description}");
                }
            }

            isDirty = true;
        }

        private void CompleteQuest(DevelopmentQuest quest)
        {
            quest.status = QuestStatus.Completed;
            quest.completedDate = DateTime.Now;

            // Calculate XP with quality bonus
            float qualityMultiplier = quest.GetQualityBonus();
            float totalXP = quest.xpReward * qualityMultiplier;

            // Add XP
            AddXPWithAnimation(totalXP);

            // Update stats
            profile.totalTasksCompleted++;
            UpdateStreak();

            // Motivation boost for quality work
            if (qualityMultiplier > 1.5f)
            {
                motivation.AddMotivation(20, "Excellent quality work!");
                ShowFloatingText("? QUALITY BONUS! ?", Color.yellow);
            }

            // Git commit
            if (gitEnabled)
            {
                string qualityNote = qualityMultiplier > 1.5f ? " [HIGH QUALITY]" : "";
                GitCommit($"?? Completed Quest: {quest.title}{qualityNote}");
            }

            // Check milestones
            CheckMilestones();

            // Play completion sound
            EditorApplication.Beep();

            isDirty = true;
        }

        // New Helper Methods
        private void DrawMotivationBar(Rect rect)
        {
            GUI.Box(rect, "");

            float fillAmount = motivation.currentMotivation / motivation.maxMotivation;
            var fillRect = new Rect(rect.x + 2, rect.y + 2, (rect.width - 4) * fillAmount, rect.height - 4);

            GUI.backgroundColor = motivation.GetMotivationColor();
            GUI.Box(fillRect, "");
            GUI.backgroundColor = Color.white;

            var textStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleCenter,
                fontStyle = FontStyle.Bold
            };
            GUI.Label(rect, $"Motivation: {motivation.currentMotivation:F0}%", textStyle);
        }

        private void DrawHealthMetric(string label, float value)
        {
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField(label, GUILayout.Width(120));

            var rect = EditorGUILayout.GetControlRect(GUILayout.Height(15));
            Color barColor = value > 0.8f ? Color.green : value > 0.5f ? Color.yellow : Color.red;
            DrawProgressBar(rect, value, barColor);

            EditorGUILayout.LabelField($"{value * 100:F0}%", GUILayout.Width(40));
            EditorGUILayout.EndHorizontal();
        }

        private void GenerateDailyQuests()
        {
            // Remove old daily quests
            dailyQuests.RemoveAll(d => d.date.Date < DateTime.Today);

            // Check if we already have today's quests
            if (dailyQuests.Any(d => d.date.Date == DateTime.Today))
                return;

            // Generate new daily quests
            var dailyTypes = new[]
            {
                (DailyQuest.DailyQuestType.CodeCleanup, "Clean up code warnings", 25),
                (DailyQuest.DailyQuestType.Documentation, "Add XML comments to 5 methods", 20),
                (DailyQuest.DailyQuestType.Testing, "Write 3 unit tests", 30),
                (DailyQuest.DailyQuestType.OrganizeAssets, "Organize project folders", 15),
                (DailyQuest.DailyQuestType.ReviewCode, "Review and refactor 1 class", 35)
            };

            foreach (var (type, title, xp) in dailyTypes)
            {
                dailyQuests.Add(new DailyQuest
                {
                    id = Guid.NewGuid().ToString(),
                    title = title,
                    type = type,
                    xpReward = xp,
                    date = DateTime.Today
                });
            }
        }

        private void GenerateSideQuests()
        {
            if (sideQuests.Count > 0) return;

            // Code Quality Side Quests
            sideQuests.Add(new SideQuest
            {
                id = "sq_naming",
                title = "Naming Convention Master",
                description = "Fix all naming convention violations",
                type = SideQuest.SideQuestType.CodeQuality,
                xpReward = 100,
                rewards = new[] { "Unlock: Auto-naming tool" }
            });

            sideQuests.Add(new SideQuest
            {
                id = "sq_zero_warnings",
                title = "Zero Warnings Challenge",
                description = "Eliminate all compiler warnings",
                type = SideQuest.SideQuestType.CodeQuality,
                xpReward = 150,
                rewards = new[] { "Badge: Clean Coder" }
            });

            // Project Structure Side Quests
            sideQuests.Add(new SideQuest
            {
                id = "sq_folder_structure",
                title = "Architect's Vision",
                description = "Organize perfect folder structure",
                type = SideQuest.SideQuestType.ProjectStructure,
                xpReward = 80,
                rewards = new[] { "Template: Pro folder structure" }
            });

            sideQuests.Add(new SideQuest
            {
                id = "sq_assemblies",
                title = "Assembly Master",
                description = "Set up proper assembly definitions",
                type = SideQuest.SideQuestType.ProjectStructure,
                xpReward = 120,
                rewards = new[] { "Faster compile times!" }
            });

            // Performance Side Quests
            sideQuests.Add(new SideQuest
            {
                id = "sq_60fps",
                title = "Smooth Operator",
                description = "Achieve stable 60 FPS",
                type = SideQuest.SideQuestType.Performance,
                xpReward = 200,
                rewards = new[] { "Performance Profiler Pro" }
            });

            // Learning Side Quests
            sideQuests.Add(new SideQuest
            {
                id = "sq_design_pattern",
                title = "Pattern Recognition",
                description = "Implement 3 design patterns",
                type = SideQuest.SideQuestType.Learning,
                xpReward = 150,
                rewards = new[] { "Design Patterns Cheat Sheet" }
            });
        }

        private void CompleteDailyQuest(DailyQuest daily)
        {
            AddXPWithAnimation(daily.xpReward);

            // Check for daily combo
            int completedToday = dailyQuests.Count(d => d.date.Date == DateTime.Today && d.completed);
            if (completedToday == 5)
            {
                // All dailies complete! Bonus!
                AddXPWithAnimation(50);
                motivation.AddMotivation(30, "Completed all daily quests!");
                ShowFloatingText("?? DAILY COMBO!", Color.yellow);
            }

            motivation.AddMotivation(10, $"Completed: {daily.title}");
            isDirty = true;
        }

        private void StartSideQuest(SideQuest sideQuest)
        {
            // Open relevant tool or guide
            switch (sideQuest.type)
            {
                case SideQuest.SideQuestType.CodeQuality:
                    AnalyzeCodeQuality();
                    break;
                case SideQuest.SideQuestType.ProjectStructure:
                    OpenProjectStructureGuide();
                    break;
                case SideQuest.SideQuestType.Performance:
                    OpenProfiler();
                    break;
            }

            Debug.Log($"Started side quest: {sideQuest.title}");
        }

        private void AnalyzeCodeQuality()
        {
            Debug.Log("Analyzing code quality...");

            // Simulate code analysis
            codeHealth.namingConventionScore = UnityEngine.Random.Range(0.6f, 1f);
            codeHealth.commentCoverage = UnityEngine.Random.Range(0.3f, 0.8f);
            codeHealth.testCoverage = UnityEngine.Random.Range(0.1f, 0.6f);
            codeHealth.compilerWarnings = UnityEngine.Random.Range(0, 10);
            codeHealth.todoComments = UnityEngine.Random.Range(0, 20);

            // Find code smells
            codeHealth.codeSmells.Clear();
            if (UnityEngine.Random.value > 0.5f)
                codeHealth.codeSmells.Add("Large class detected: PlayerController");
            if (UnityEngine.Random.value > 0.5f)
                codeHealth.codeSmells.Add("Duplicate code in InventoryManager");
            if (UnityEngine.Random.value > 0.5f)
                codeHealth.codeSmells.Add("Complex method: CraftingSystem.ProcessRecipe()");

            Repaint();
        }

        private void StartCodeCleanup()
        {
            if (EditorUtility.DisplayDialog("Code Cleanup",
                "This will:\n• Fix naming conventions\n• Remove unused usings\n• Format code\n• Organize methods\n\nProceed?",
                "Clean it up!", "Cancel"))
            {
                Debug.Log("Starting code cleanup...");

                // Simulate cleanup
                EditorUtility.DisplayProgressBar("Code Cleanup", "Analyzing files...", 0.2f);
                System.Threading.Thread.Sleep(500);
                EditorUtility.DisplayProgressBar("Code Cleanup", "Fixing naming conventions...", 0.4f);
                System.Threading.Thread.Sleep(500);
                EditorUtility.DisplayProgressBar("Code Cleanup", "Formatting code...", 0.6f);
                System.Threading.Thread.Sleep(500);
                EditorUtility.DisplayProgressBar("Code Cleanup", "Organizing imports...", 0.8f);
                System.Threading.Thread.Sleep(500);
                EditorUtility.ClearProgressBar();

                // Improve metrics
                codeHealth.namingConventionScore = 1f;
                codeHealth.compilerWarnings = 0;

                // Reward
                AddXPWithAnimation(50);
                motivation.AddMotivation(15, "Code cleaned up!");

                Debug.Log("Code cleanup complete!");
            }
        }

        private void TakeBreak()
        {
            motivation.lastBreak = DateTime.Now;
            motivation.AddMotivation(20, "Refreshed after break!");
            motivation.feelingBurnout = false;

            EditorUtility.DisplayDialog("Break Time!",
                "Great idea! Take 5-10 minutes to:\n\n• Stretch\n• Get water\n• Look away from screen\n• Take a short walk\n\nYou've earned it! ??",
                "I'm back!");
        }

        private void PlayMotivationalMusic()
        {
            Application.OpenURL("https://www.youtube.com/watch?v=dQw4w9WgXcQ"); // Epic game dev music
            motivation.AddMotivation(10, "Music boost!");
        }

        private void ShowAchievements()
        {
            var message = $"?? Your Achievements:\n\n";
            message += $"Level: {profile.level}\n";
            message += $"Tasks Completed: {profile.totalTasksCompleted}\n";
            message += $"Current Streak: {profile.currentStreak} days\n";
            message += $"Best Streak: {profile.bestStreak} days\n";
            message += $"Total Dev Time: {profile.totalDevHours:F0} hours\n";
            message += $"Achievements Unlocked: {profile.unlockedAchievements.Count}\n\n";
            message += "Keep up the amazing work! ??";

            EditorUtility.DisplayDialog("Your Stats", message, "I'm awesome!");
            motivation.AddMotivation(15, "Reviewed achievements!");
        }

        private void ShowFloatingText(string text, Color color)
        {
            floatingXPs.Add(new FloatingXP
            {
                xpAmount = 0, // Use for text display
                position = new Vector2(position.width / 2, position.height / 2),
                lifetime = 3f,
                color = color
            });

            Debug.Log(text);
        }

        private void OpenProjectStructureGuide()
        {
            EditorUtility.DisplayDialog("Project Structure Guide",
                "Recommended Structure:\n\n" +
                "?? _Project\n" +
                "  ?? Code\n" +
                "    ?? Runtime (game logic)\n" +
                "    ?? Editor (tools)\n" +
                "  ?? Art\n" +
                "  ?? Audio\n" +
                "  ?? Prefabs\n" +
                "  ?? ScriptableObjects\n\n" +
                "Keep it clean and organized!",
                "Got it!");
        }

        private void OpenProfiler()
        {
            EditorApplication.ExecuteMenuItem("Window/Analysis/Profiler");
        }

        private Color GetGradeColor(string grade)
        {
            return grade switch
            {
                "A+" => Color.green,
                "A" => Color.green,
                "B" => Color.yellow,
                "C" => new Color(1f, 0.5f, 0),
                "D" => new Color(1f, 0.3f, 0),
                "F" => Color.red,
                _ => Color.gray
            };
        }

        private string GetSideQuestIcon(SideQuest.SideQuestType type)
        {
            return type switch
            {
                SideQuest.SideQuestType.CodeQuality => "??",
                SideQuest.SideQuestType.ProjectStructure => "??",
                SideQuest.SideQuestType.Performance => "?",
                SideQuest.SideQuestType.Documentation => "??",
                SideQuest.SideQuestType.Community => "??",
                SideQuest.SideQuestType.Learning => "??",
                SideQuest.SideQuestType.Tools => "??",
                SideQuest.SideQuestType.Workflow => "??",
                _ => "?"
            };
        }

        private void AddXPWithAnimation(float xp)
        {
            var oldLevel = profile.level;
            profile.AddXP(xp);

            // Create floating XP
            floatingXPs.Add(new FloatingXP
            {
                xpAmount = xp,
                position = new Vector2(position.width / 2, position.height / 2),
                lifetime = 2f,
                color = Color.yellow
            });

            // Check for level up
            if (profile.level > oldLevel)
            {
                levelUpAnimTime = 3f;
                Debug.Log($"?? LEVEL UP! You are now level {profile.level}!");
            }

            Repaint();
        }

        private void AdvanceQuestStatus(DevelopmentQuest quest)
        {
            switch (quest.status)
            {
                case QuestStatus.Available:
                    quest.status = QuestStatus.InProgress;
                    if (gitEnabled && !string.IsNullOrEmpty(quest.gitBranch))
                    {
                        GitCheckout(quest.gitBranch);
                    }
                    break;
                case QuestStatus.InProgress:
                    quest.status = QuestStatus.Testing;
                    break;
                case QuestStatus.Testing:
                    CompleteQuest(quest);
                    break;
            }
            isDirty = true;
        }

        private void UpdateStreak()
        {
            var now = DateTime.Now;
            if (profile.lastCommitTime.Date == now.Date.AddDays(-1))
            {
                profile.currentStreak++;
            }
            else if (profile.lastCommitTime.Date != now.Date)
            {
                profile.currentStreak = 1;
            }

            profile.lastCommitTime = now;
            profile.bestStreak = Mathf.Max(profile.bestStreak, profile.currentStreak);
        }

        private void CheckMilestones()
        {
            foreach (var milestone in milestones)
            {
                if (!milestone.achieved && milestone.GetProgress(allQuests) >= 1f)
                {
                    milestone.achieved = true;
                    milestone.achievedDate = DateTime.Now;
                    AddXPWithAnimation(milestone.bonusXP);
                    Debug.Log($"?? Milestone Achieved: {milestone.name}!");
                    EditorApplication.Beep();
                }
            }
        }

        // ==================== GIT INTEGRATION ====================

        private void FindGitRepo()
        {
            string currentDir = Application.dataPath;
            while (!string.IsNullOrEmpty(currentDir))
            {
                if (Directory.Exists(Path.Combine(currentDir, ".git")))
                {
                    gitRepoPath = currentDir;
                    break;
                }
                currentDir = Directory.GetParent(currentDir)?.FullName;
            }
        }

        private void GitCommit(string message)
        {
            if (!gitEnabled || string.IsNullOrEmpty(gitRepoPath)) return;

            try
            {
                // Add all changes
                RunGitCommand("add -A");

                // Commit with message
                RunGitCommand($"commit -m \"{message}\"");

                // Push to remote
                RunGitCommand("push");

                Debug.Log($"Git: {message}");
            }
            catch (Exception e)
            {
                Debug.LogWarning($"Git commit failed: {e.Message}");
            }
        }

        private void GitCheckout(string branch)
        {
            if (!gitEnabled || string.IsNullOrEmpty(gitRepoPath)) return;

            try
            {
                RunGitCommand($"checkout -b {branch}");
                Debug.Log($"Git: Switched to branch {branch}");
            }
            catch
            {
                try
                {
                    RunGitCommand($"checkout {branch}");
                }
                catch (Exception e)
                {
                    Debug.LogWarning($"Git checkout failed: {e.Message}");
                }
            }
        }

        private void RunGitCommand(string arguments)
        {
            var processInfo = new ProcessStartInfo
            {
                FileName = "git",
                Arguments = arguments,
                WorkingDirectory = gitRepoPath,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            using (var process = Process.Start(processInfo))
            {
                process.WaitForExit();
                if (process.ExitCode != 0)
                {
                    string error = process.StandardError.ReadToEnd();
                    throw new Exception(error);
                }
            }
        }

        // ==================== DATA PERSISTENCE ====================

        private void SaveProgress()
        {
            var json = JsonUtility.ToJson(profile);
            EditorPrefs.SetString("WS_DevProfile", json);

            var questsJson = JsonUtility.ToJson(new Serialization<DevelopmentQuest>(allQuests));
            EditorPrefs.SetString("WS_Quests", questsJson);

            var milestonesJson = JsonUtility.ToJson(new Serialization<Milestone>(milestones));
            EditorPrefs.SetString("WS_Milestones", milestonesJson);
        }

        private void LoadProgress()
        {
            var profileJson = EditorPrefs.GetString("WS_DevProfile", "");
            if (!string.IsNullOrEmpty(profileJson))
            {
                profile = JsonUtility.FromJson<DeveloperProfile>(profileJson);
            }
            else
            {
                profile = new DeveloperProfile();
            }

            var questsJson = EditorPrefs.GetString("WS_Quests", "");
            if (!string.IsNullOrEmpty(questsJson))
            {
                allQuests = JsonUtility.FromJson<Serialization<DevelopmentQuest>>(questsJson).target;
            }

            var milestonesJson = EditorPrefs.GetString("WS_Milestones", "");
            if (!string.IsNullOrEmpty(milestonesJson))
            {
                milestones = JsonUtility.FromJson<Serialization<Milestone>>(milestonesJson).target;
            }
        }

        private void AutoSave()
        {
            if (isDirty && Time.realtimeSinceStartup - lastSaveTime > 5f)
            {
                SaveProgress();
                isDirty = false;
                lastSaveTime = Time.realtimeSinceStartup;
            }
        }

        private void UpdateAnimations()
        {
            // Update floating XP
            if (floatingXPs.Count > 0)
            {
                Repaint();
            }

            // Update level up animation
            if (levelUpAnimTime > 0)
            {
                Repaint();
            }
        }

        // ==================== INITIALIZATION ====================

        private void InitializeDefaultQuests()
        {
            if (allQuests.Count > 0) return;

            GenerateSideQuests();

            // Core Systems with quality focus
            allQuests.Add(new DevelopmentQuest
            {
                id = "core_boot",
                title = "Bootstrap System",
                description = "Create the game initialization and scene loading system",
                category = QuestCategory.CoreSystems,
                priority = QuestPriority.Critical,
                status = QuestStatus.Available,
                xpReward = 100,
                estimatedHours = 4,
                tasks = new List<QuestTask>
                {
                    new QuestTask { description = "Create GameManager singleton", xpValue = 20 },
                    new QuestTask { description = "Implement scene loading flow", xpValue = 30 },
                    new QuestTask { description = "Add service locator pattern", xpValue = 25 },
                    new QuestTask { description = "Write unit tests", xpValue = 15 },
                    new QuestTask { description = "Document architecture", xpValue = 10 }
                }
            });

            // Inventory System with clean code focus
            allQuests.Add(new DevelopmentQuest
            {
                id = "inv_grid",
                title = "Tetris Inventory Grid",
                description = "Implement the shape-based inventory system with clean, maintainable code",
                category = QuestCategory.Inventory,
                priority = QuestPriority.Critical,
                status = QuestStatus.Available,
                xpReward = 200,
                estimatedHours = 8,
                tasks = new List<QuestTask>
                {
                    new QuestTask { description = "Design data structures", xpValue = 20 },
                    new QuestTask { description = "Create grid with proper naming", xpValue = 30 },
                    new QuestTask { description = "Implement SOLID principles", xpValue = 25 },
                    new QuestTask { description = "Add rotation system", xpValue = 30 },
                    new QuestTask { description = "Create UI visualization", xpValue = 40 },
                    new QuestTask { description = "Add drag & drop", xpValue = 40 },
                    new QuestTask { description = "Write comprehensive tests", xpValue = 15 }
                }
            });

            // Code Quality Quest
            allQuests.Add(new DevelopmentQuest
            {
                id = "quality_foundation",
                title = "Quality Foundation",
                description = "Establish coding standards and project structure",
                category = QuestCategory.CoreSystems,
                priority = QuestPriority.Critical,
                status = QuestStatus.Available,
                xpReward = 150,
                estimatedHours = 3,
                tasks = new List<QuestTask>
                {
                    new QuestTask { description = "Set up .editorconfig", xpValue = 20 },
                    new QuestTask { description = "Create coding standards doc", xpValue = 30 },
                    new QuestTask { description = "Configure assembly definitions", xpValue = 25 },
                    new QuestTask { description = "Set up folder structure", xpValue = 25 },
                    new QuestTask { description = "Add code analyzers", xpValue = 20 },
                    new QuestTask { description = "Create README.md", xpValue = 30 }
                }
            });

            // Add more default quests...

            // Initialize Milestones
            milestones.Add(new Milestone
            {
                name = "Clean Code Base",
                description = "All code follows standards",
                requiredQuestIds = new List<string> { "quality_foundation" },
                bonusXP = 300
            });

            milestones.Add(new Milestone
            {
                name = "Alpha Build",
                description = "Core gameplay loop complete",
                requiredQuestIds = new List<string> { "core_boot", "inv_grid" },
                bonusXP = 500
            });

            milestones.Add(new Milestone
            {
                name = "Beta Build",
                description = "All major systems implemented",
                requiredQuestIds = new List<string>(), // Add quest IDs
                bonusXP = 1000
            });

            milestones.Add(new Milestone
            {
                name = "Steam Ready",
                description = "Game ready for Steam release!",
                requiredQuestIds = new List<string>(), // Add quest IDs
                bonusXP = 2000
            });
        }

        private void CreateNewQuest()
        {
            var quest = new DevelopmentQuest
            {
                id = Guid.NewGuid().ToString(),
                title = "New Quest",
                description = "Describe what needs to be done",
                category = QuestCategory.CoreSystems,
                priority = QuestPriority.Medium,
                status = QuestStatus.Available,
                xpReward = 50,
                estimatedHours = 2,
                createdDate = DateTime.Now,
                tasks = new List<QuestTask>()
            };

            allQuests.Add(quest);
            selectedQuest = quest;
            isDirty = true;
        }

        // ==================== UTILITY METHODS ====================

        private string GetCategoryIcon(QuestCategory category)
        {
            return category switch
            {
                QuestCategory.CoreSystems => "??",
                QuestCategory.Inventory => "??",
                QuestCategory.Crafting => "??",
                QuestCategory.Combat => "??",
                QuestCategory.AI => "??",
                QuestCategory.Environment => "??",
                QuestCategory.UI => "???",
                QuestCategory.Audio => "??",
                QuestCategory.Polish => "?",
                QuestCategory.Optimization => "?",
                QuestCategory.BugFix => "??",
                QuestCategory.Documentation => "??",
                _ => "??"
            };
        }

        private string GetPriorityIcon(QuestPriority priority)
        {
            return priority switch
            {
                QuestPriority.Critical => "??",
                QuestPriority.High => "??",
                QuestPriority.Medium => "??",
                QuestPriority.Low => "??",
                QuestPriority.Backlog => "?",
                _ => "?"
            };
        }

        private Color GetCategoryColor(QuestCategory category)
        {
            return category switch
            {
                QuestCategory.CoreSystems => Color.red,
                QuestCategory.Inventory => Color.blue,
                QuestCategory.Crafting => new Color(0.8f, 0.5f, 0),
                QuestCategory.Combat => Color.magenta,
                QuestCategory.AI => Color.cyan,
                QuestCategory.Environment => Color.green,
                QuestCategory.UI => Color.yellow,
                _ => Color.gray
            };
        }

        private Color GetStatusColor(QuestStatus status)
        {
            return status switch
            {
                QuestStatus.Available => Color.white,
                QuestStatus.InProgress => Color.yellow,
                QuestStatus.Testing => Color.cyan,
                QuestStatus.Completed => Color.green,
                _ => Color.gray
            };
        }

        private string GetStatusHeader(QuestStatus status)
        {
            return status switch
            {
                QuestStatus.Locked => "?? LOCKED",
                QuestStatus.Available => "?? AVAILABLE",
                QuestStatus.InProgress => "?? IN PROGRESS",
                QuestStatus.Testing => "?? TESTING",
                QuestStatus.Completed => "? COMPLETED",
                _ => status.ToString()
            };
        }

        private float CalculateOverallProgress()
        {
            if (allQuests.Count == 0) return 0;

            // Weight critical quests more heavily
            float totalWeight = 0;
            float completedWeight = 0;

            foreach (var quest in allQuests)
            {
                float weight = quest.priority switch
                {
                    QuestPriority.Critical => 3f,
                    QuestPriority.High => 2f,
                    QuestPriority.Medium => 1.5f,
                    QuestPriority.Low => 1f,
                    QuestPriority.Backlog => 0.5f,
                    _ => 1f
                };

                totalWeight += weight;
                if (quest.status == QuestStatus.Completed)
                {
                    completedWeight += weight;
                }
            }

            return totalWeight > 0 ? completedWeight / totalWeight : 0;
        }

        private string GetMotivationalQuote()
        {
            // Return a different quote based on progress or time of day
            float progress = CalculateOverallProgress();

            if (progress < 0.2f)
                return motivationalQuotes[0];
            else if (progress < 0.5f)
                return motivationalQuotes[UnityEngine.Random.Range(1, 4)];
            else if (progress < 0.8f)
                return motivationalQuotes[UnityEngine.Random.Range(4, 6)];
            else
                return motivationalQuotes[UnityEngine.Random.Range(6, motivationalQuotes.Length)];
        }

        private Texture2D MakeColorTexture(Color color)
        {
            var tex = new Texture2D(1, 1);
            tex.SetPixel(0, 0, color);
            tex.Apply();
            return tex;
        }

        private static DevelopmentQuest GetQuestById(string id)
        {
            return allQuests.FirstOrDefault(q => q.id == id);
        }

        [System.Serializable]
        private class Serialization<T>
        {
            public List<T> target;
            public Serialization(List<T> target) { this.target = target; }
        }
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\WildSurvivalProjectManager\WildSurvivalProjectManager.cs
// ============================================

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using UnityEngine;
using UnityEditor;
using UnityEditor.PackageManager;
using UnityEditor.PackageManager.Requests;

namespace WildSurvival.Editor.ProjectManagement
{
    /// <summary>
    /// Comprehensive project management tool for Wild Survival
    /// Combines restructuring, optimization, and development tools
    /// </summary>
    public class WildSurvivalProjectManager : EditorWindow
    {
        // Window Configuration
        private const string WINDOW_TITLE = "Wild Survival Project Manager";
        private const float MIN_WIDTH = 1200f;
        private const float MIN_HEIGHT = 800f;
        private const string VERSION = "2.0.0";

        // Tab System
        private readonly string[] _mainTabs =
        {
            "?? Dashboard",
            "?? Project Setup",
            "?? Restructure",
            "?? Code Tools",
            "?? Game Tools",
            "?? Performance",
            "?? Build & Deploy"
        };

        private int _currentMainTab = 0;
        private Vector2 _scrollPosition;

        // Sub-modules
        private ProjectDashboard _dashboard;
        private ProjectSetup _setup;
        private ProjectRestructure _restructure;
        private CodeTools _codeTools;
        private GameTools _gameTools;
        private PerformanceTools _performance;
        private BuildTools _build;

        // Shared State
        private static ProjectAnalysis _projectAnalysis;
        private static bool _isProcessing;
        private static List<LogEntry> _logs = new List<LogEntry>();

        // Styling
        private GUIStyle _headerStyle;
        private GUIStyle _sectionStyle;
        private GUIStyle _buttonStyle;
        private bool _stylesInitialized;

        [MenuItem("Tools/Wild Survival/Project Manager %#p", false, 0)]
        public static void ShowWindow()
        {
            var window = GetWindow<WildSurvivalProjectManager>(false, WINDOW_TITLE, true);
            window.minSize = new Vector2(MIN_WIDTH, MIN_HEIGHT);
            window.Show();
        }

        private void OnEnable()
        {
            InitializeModules();
            AnalyzeProject();
        }

        private void InitializeModules()
        {
            _dashboard = new ProjectDashboard(this);
            _setup = new ProjectSetup(this);
            _restructure = new ProjectRestructure(this);
            _codeTools = new CodeTools(this);
            _gameTools = new GameTools(this);
            _performance = new PerformanceTools(this);
            _build = new BuildTools(this);
        }

        private void InitializeStyles()
        {
            if (_stylesInitialized) return;

            _headerStyle = new GUIStyle(EditorStyles.boldLabel)
            {
                fontSize = 24,
                alignment = TextAnchor.MiddleCenter,
                padding = new RectOffset(0, 0, 10, 10)
            };

            _sectionStyle = new GUIStyle(EditorStyles.helpBox)
            {
                padding = new RectOffset(10, 10, 10, 10),
                margin = new RectOffset(5, 5, 5, 5)
            };

            _buttonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = 12,
                fontStyle = FontStyle.Bold,
                fixedHeight = 30
            };

            _stylesInitialized = true;
        }

        private void OnGUI()
        {
            InitializeStyles();

            DrawHeader();
            DrawMainContent();
            DrawFooter();

            ProcessRepaintRequests();
        }

        private void DrawHeader()
        {
            EditorGUILayout.BeginVertical(EditorStyles.toolbar);

            EditorGUILayout.BeginHorizontal();
            GUILayout.Label("?? WILD SURVIVAL PROJECT MANAGER", EditorStyles.boldLabel);
            GUILayout.FlexibleSpace();

            // Quick Actions
            if (GUILayout.Button("?? Refresh", EditorStyles.toolbarButton, GUILayout.Width(80)))
            {
                AnalyzeProject();
            }

            if (GUILayout.Button("?? Save All", EditorStyles.toolbarButton, GUILayout.Width(80)))
            {
                AssetDatabase.SaveAssets();
            }

            if (GUILayout.Button("?? Docs", EditorStyles.toolbarButton, GUILayout.Width(60)))
            {
                Application.OpenURL("https://github.com/yourusername/wildsurvival/wiki");
            }

            EditorGUILayout.EndHorizontal();

            // Tab Bar
            EditorGUILayout.BeginHorizontal();
            int newTab = GUILayout.Toolbar(_currentMainTab, _mainTabs, EditorStyles.toolbarButton, GUILayout.Height(30));
            if (newTab != _currentMainTab)
            {
                _currentMainTab = newTab;
                GUI.FocusControl(null);
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.EndVertical();
        }

        private void DrawMainContent()
        {
            _scrollPosition = EditorGUILayout.BeginScrollView(_scrollPosition);

            if (_isProcessing)
            {
                DrawProcessingOverlay();
            }
            else
            {
                switch (_currentMainTab)
                {
                    case 0: _dashboard?.Draw(); break;
                    case 1: _setup?.Draw(); break;
                    case 2: _restructure?.Draw(); break;
                    case 3: _codeTools?.Draw(); break;
                    case 4: _gameTools?.Draw(); break;
                    case 5: _performance?.Draw(); break;
                    case 6: _build?.Draw(); break;
                }
            }

            EditorGUILayout.EndScrollView();
        }

        private void DrawFooter()
        {
            EditorGUILayout.BeginHorizontal(EditorStyles.toolbar);

            // Status
            GUILayout.Label($"Unity {Application.unityVersion} | HDRP | Version {VERSION}", EditorStyles.miniLabel);

            GUILayout.FlexibleSpace();

            // Project Status
            if (_projectAnalysis != null)
            {
                GUI.color = _projectAnalysis.HasIssues ? Color.yellow : Color.green;
                GUILayout.Label($"? {_projectAnalysis.Status}", EditorStyles.miniLabel);
                GUI.color = Color.white;
            }

            EditorGUILayout.EndHorizontal();

            // Log Console
            if (_logs.Count > 0)
            {
                DrawLogConsole();
            }
        }

        private void DrawProcessingOverlay()
        {
            EditorGUILayout.BeginVertical(_sectionStyle);
            GUILayout.Label("Processing...", _headerStyle);
            EditorGUILayout.Space(20);

            // Progress bar
            EditorGUI.ProgressBar(
                EditorGUILayout.GetControlRect(GUILayout.Height(20)),
                0.5f,
                "Working..."
            );

            EditorGUILayout.EndVertical();
        }

        private void DrawLogConsole()
        {
            EditorGUILayout.BeginVertical(EditorStyles.helpBox, GUILayout.Height(100));

            EditorGUILayout.BeginHorizontal();
            GUILayout.Label("?? Log Console", EditorStyles.boldLabel);
            if (GUILayout.Button("Clear", EditorStyles.miniButton, GUILayout.Width(50)))
            {
                _logs.Clear();
            }
            EditorGUILayout.EndHorizontal();

            var scrollView = EditorGUILayout.BeginScrollView(Vector2.zero);
            foreach (var log in _logs.TakeLast(10))
            {
                GUI.color = log.GetColor();
                EditorGUILayout.LabelField($"[{log.Time:HH:mm:ss}] {log.Message}", EditorStyles.miniLabel);
                GUI.color = Color.white;
            }
            EditorGUILayout.EndScrollView();

            EditorGUILayout.EndVertical();
        }

        private static void AnalyzeProject()
        {
            _projectAnalysis = new ProjectAnalysis();
            _projectAnalysis.Analyze();
        }

        private void ProcessRepaintRequests()
        {
            if (Event.current.type == EventType.Repaint && _isProcessing)
            {
                Repaint();
            }
        }

        public static void Log(string message, LogType type = LogType.Info)
        {
            _logs.Add(new LogEntry(message, type));
        }

        public static void StartProcessing()
        {
            _isProcessing = true;
        }

        public static void EndProcessing()
        {
            _isProcessing = false;
        }

        // ==================== PUBLIC ENUMS ====================

        public enum LogType
        {
            Info,
            Warning,
            Error,
            Success
        }

        // ==================== MODULES ====================

        /// <summary>
        /// Dashboard showing project overview and quick actions
        /// </summary>
        public class ProjectDashboard
        {
            private WildSurvivalProjectManager _manager;

            public ProjectDashboard(WildSurvivalProjectManager manager)
            {
                _manager = manager;
            }

            public void Draw()
            {
                EditorGUILayout.LabelField("Project Dashboard", _manager._headerStyle);

                // Project Health
                DrawProjectHealth();

                EditorGUILayout.Space(20);

                // Quick Stats
                DrawQuickStats();

                EditorGUILayout.Space(20);

                // Recent Activity
                DrawRecentActivity();

                EditorGUILayout.Space(20);

                // Quick Actions Grid
                DrawQuickActions();
            }

            private void DrawProjectHealth()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Project Health", EditorStyles.boldLabel);

                if (_projectAnalysis == null)
                {
                    EditorGUILayout.HelpBox("Analyzing project...", MessageType.Info);
                }
                else
                {
                    // Health Score
                    float health = _projectAnalysis.GetHealthScore();
                    Color healthColor = health > 0.8f ? Color.green : health > 0.5f ? Color.yellow : Color.red;

                    EditorGUI.ProgressBar(
                        EditorGUILayout.GetControlRect(GUILayout.Height(30)),
                        health,
                        $"Health Score: {health * 100:F0}%"
                    );

                    // Issues
                    if (_projectAnalysis.Issues.Count > 0)
                    {
                        EditorGUILayout.Space(10);
                        EditorGUILayout.LabelField("Issues Found:", EditorStyles.boldLabel);
                        foreach (var issue in _projectAnalysis.Issues.Take(5))
                        {
                            EditorGUILayout.HelpBox(issue, MessageType.Warning);
                        }
                    }
                }

                EditorGUILayout.EndVertical();
            }

            private void DrawQuickStats()
            {
                EditorGUILayout.BeginHorizontal();

                DrawStatCard("Scripts", CountFiles(".cs"), Color.cyan);
                DrawStatCard("Scenes", CountFiles(".unity"), Color.green);
                DrawStatCard("Prefabs", CountFiles(".prefab"), Color.blue);
                DrawStatCard("Materials", CountFiles(".mat"), Color.magenta);

                EditorGUILayout.EndHorizontal();
            }

            private void DrawStatCard(string label, int count, Color color)
            {
                GUI.backgroundColor = color * 0.3f;
                EditorGUILayout.BeginVertical(GUI.skin.box, GUILayout.Width(140), GUILayout.Height(80));
                GUI.backgroundColor = Color.white;

                GUILayout.FlexibleSpace();

                var style = new GUIStyle(EditorStyles.boldLabel)
                {
                    fontSize = 24,
                    alignment = TextAnchor.MiddleCenter,
                    normal = { textColor = color }
                };

                EditorGUILayout.LabelField(count.ToString(), style);
                EditorGUILayout.LabelField(label, new GUIStyle(EditorStyles.label) { alignment = TextAnchor.MiddleCenter });

                GUILayout.FlexibleSpace();

                EditorGUILayout.EndVertical();
            }

            private void DrawRecentActivity()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Recent Activity", EditorStyles.boldLabel);

                foreach (var log in _logs.TakeLast(5))
                {
                    GUI.color = log.GetColor();
                    EditorGUILayout.LabelField($"• {log.Message}", EditorStyles.wordWrappedMiniLabel);
                    GUI.color = Color.white;
                }

                if (_logs.Count == 0)
                {
                    EditorGUILayout.LabelField("No recent activity", EditorStyles.miniLabel);
                }

                EditorGUILayout.EndVertical();
            }

            private void DrawQuickActions()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("? Quick Actions", EditorStyles.boldLabel);

                EditorGUILayout.BeginHorizontal();

                if (GUILayout.Button("?? Fix All Issues", GUILayout.Height(40)))
                {
                    _manager._setup.FixAllIssues();
                }

                if (GUILayout.Button("?? Clean Project", GUILayout.Height(40)))
                {
                    _manager._restructure.CleanProject();
                }

                if (GUILayout.Button("?? Setup Build", GUILayout.Height(40)))
                {
                    _manager._build.QuickBuild();
                }

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.EndVertical();
            }

            private int CountFiles(string extension)
            {
                return Directory.GetFiles("Assets", "*" + extension, SearchOption.AllDirectories).Length;
            }
        }

        /// <summary>
        /// Project setup and configuration tools
        /// </summary>
        public class ProjectSetup
        {
            private WildSurvivalProjectManager _manager;
            private List<SetupTask> _setupTasks;

            public ProjectSetup(WildSurvivalProjectManager manager)
            {
                _manager = manager;
                InitializeTasks();
            }

            private void InitializeTasks()
            {
                _setupTasks = new List<SetupTask>
                {
                    new SetupTask("Create Folder Structure", CreateFolderStructure, CheckFolderStructure),
                    new SetupTask("Setup Assembly Definitions", SetupAssemblies, CheckAssemblies),
                    new SetupTask("Configure HDRP", ConfigureHDRP, CheckHDRP),
                    new SetupTask("Setup Input System", SetupInputSystem, CheckInputSystem),
                    new SetupTask("Configure Build Settings", ConfigureBuildSettings, CheckBuildSettings),
                    new SetupTask("Setup Version Control", SetupVersionControl, CheckVersionControl)
                };
            }

            public void Draw()
            {
                EditorGUILayout.LabelField("Project Setup", _manager._headerStyle);

                // Setup Checklist
                DrawSetupChecklist();

                EditorGUILayout.Space(20);

                // Quick Setup
                DrawQuickSetup();

                EditorGUILayout.Space(20);

                // Package Management
                DrawPackageManagement();
            }

            private void DrawSetupChecklist()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("? Setup Checklist", EditorStyles.boldLabel);

                foreach (var task in _setupTasks)
                {
                    EditorGUILayout.BeginHorizontal();

                    bool isComplete = task.CheckFunc();
                    GUI.color = isComplete ? Color.green : Color.yellow;
                    EditorGUILayout.LabelField(isComplete ? "?" : "?", GUILayout.Width(20));
                    GUI.color = Color.white;

                    EditorGUILayout.LabelField(task.Name);

                    if (!isComplete && GUILayout.Button("Fix", GUILayout.Width(60)))
                    {
                        task.ExecuteFunc();
                        Log($"Fixed: {task.Name}", LogType.Success);
                    }

                    EditorGUILayout.EndHorizontal();
                }

                EditorGUILayout.Space(10);

                if (GUILayout.Button("?? Fix All Issues", _manager._buttonStyle))
                {
                    FixAllIssues();
                }

                EditorGUILayout.EndVertical();
            }

            private void DrawQuickSetup()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Quick Setup", EditorStyles.boldLabel);

                EditorGUILayout.BeginHorizontal();

                if (GUILayout.Button("New Survival Game", GUILayout.Height(50)))
                {
                    SetupNewProject();
                }

                if (GUILayout.Button("Import from Template", GUILayout.Height(50)))
                {
                    ImportTemplate();
                }

                if (GUILayout.Button("Migrate Existing", GUILayout.Height(50)))
                {
                    MigrateProject();
                }

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.EndVertical();
            }

            private void DrawPackageManagement()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Package Management", EditorStyles.boldLabel);

                string[] requiredPackages =
                {
                    "com.unity.render-pipelines.high-definition",
                    "com.unity.inputsystem",
                    "com.unity.addressables",
                    "com.unity.cinemachine",
                    "com.unity.ai.navigation"
                };

                foreach (var package in requiredPackages)
                {
                    EditorGUILayout.BeginHorizontal();
                    EditorGUILayout.LabelField(package);

                    if (GUILayout.Button("Install/Update", GUILayout.Width(100)))
                    {
                        InstallPackage(package);
                    }

                    EditorGUILayout.EndHorizontal();
                }

                EditorGUILayout.EndVertical();
            }

            public void FixAllIssues()
            {
                StartProcessing();

                foreach (var task in _setupTasks.Where(t => !t.CheckFunc()))
                {
                    task.ExecuteFunc();
                    Log($"Fixed: {task.Name}", LogType.Success);
                }

                EndProcessing();
                AnalyzeProject();
            }

            private void SetupNewProject()
            {
                StartProcessing();

                CreateFolderStructure();
                SetupAssemblies();
                ConfigureHDRP();
                SetupInputSystem();
                CreateStarterAssets();

                Log("New project setup complete!", LogType.Success);
                EndProcessing();
            }

            private void CreateFolderStructure()
            {
                string[] folders =
                {
                    "Assets/_Project",
                    "Assets/_Project/Code/Runtime/Core",
                    "Assets/_Project/Code/Runtime/Systems",
                    "Assets/_Project/Code/Runtime/Gameplay",
                    "Assets/_Project/Code/Runtime/UI",
                    "Assets/_Project/Code/Editor",
                    "Assets/_Project/Content/Characters",
                    "Assets/_Project/Content/Environment",
                    "Assets/_Project/Content/Items",
                    "Assets/_Project/Content/Effects",
                    "Assets/_Project/Data/Items",
                    "Assets/_Project/Data/Recipes",
                    "Assets/_Project/Data/Config",
                    "Assets/_Project/Scenes/Core",
                    "Assets/_Project/Scenes/Gameplay",
                    "Assets/_Project/Scenes/Test",
                    "Assets/_Project/Settings/HDRP",
                    "Assets/_Project/Settings/Input",
                    "Assets/_ThirdParty",
                    "Assets/_DevTools"
                };

                foreach (var folder in folders)
                {
                    if (!AssetDatabase.IsValidFolder(folder))
                    {
                        Directory.CreateDirectory(folder);
                    }
                }

                AssetDatabase.Refresh();
            }

            private bool CheckFolderStructure()
            {
                return AssetDatabase.IsValidFolder("Assets/_Project/Code/Runtime/Core");
            }

            private void SetupAssemblies()
            {
                CreateAssemblyDefinition("WildSurvival.Core", "Assets/_Project/Code/Runtime/Core");
                CreateAssemblyDefinition("WildSurvival.Systems", "Assets/_Project/Code/Runtime/Systems");
                CreateAssemblyDefinition("WildSurvival.Gameplay", "Assets/_Project/Code/Runtime/Gameplay");
                CreateAssemblyDefinition("WildSurvival.Editor", "Assets/_Project/Code/Editor", true);
            }

            private bool CheckAssemblies()
            {
                return File.Exists("Assets/_Project/Code/Runtime/Core/WildSurvival.Core.asmdef");
            }

            private void CreateAssemblyDefinition(string name, string path, bool editorOnly = false)
            {
                var asmdef = new
                {
                    name = name,
                    references = new string[] { },
                    includePlatforms = editorOnly ? new[] { "Editor" } : new string[] { },
                    excludePlatforms = new string[] { },
                    allowUnsafeCode = false,
                    overrideReferences = false,
                    precompiledReferences = new string[] { },
                    autoReferenced = true,
                    defineConstraints = new string[] { },
                    versionDefines = new string[] { }
                };

                string json = JsonUtility.ToJson(asmdef, true);
                File.WriteAllText($"{path}/{name}.asmdef", json);
            }

            private void ConfigureHDRP() { /* HDRP setup */ }
            private bool CheckHDRP() { return UnityEngine.Rendering.GraphicsSettings.currentRenderPipeline != null; }

            private void SetupInputSystem() { /* Input setup */ }
            private bool CheckInputSystem() { return true; }

            private void ConfigureBuildSettings() { /* Build setup */ }
            private bool CheckBuildSettings() { return true; }

            private void SetupVersionControl() { /* Git setup */ }
            private bool CheckVersionControl() { return Directory.Exists(".git"); }

            private void ImportTemplate() { /* Template import */ }
            private void MigrateProject() { /* Project migration */ }
            private void CreateStarterAssets() { /* Create starter assets */ }

            private void InstallPackage(string packageId)
            {
                Client.Add(packageId);
                Log($"Installing package: {packageId}", LogType.Info);
            }
        }

        /// <summary>
        /// Project restructuring and cleanup tools
        /// </summary>
        public class ProjectRestructure
        {
            private WildSurvivalProjectManager _manager;
            private List<FileOperation> _pendingOperations;

            public ProjectRestructure(WildSurvivalProjectManager manager)
            {
                _manager = manager;
                _pendingOperations = new List<FileOperation>();
            }

            public void Draw()
            {
                EditorGUILayout.LabelField("Project Restructure", _manager._headerStyle);

                // Duplicate Finder
                DrawDuplicateFinder();

                EditorGUILayout.Space(20);

                // File Organization
                DrawFileOrganization();

                EditorGUILayout.Space(20);

                // Namespace Fixer
                DrawNamespaceFixer();
            }

            private void DrawDuplicateFinder()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Duplicate Finder", EditorStyles.boldLabel);

                if (GUILayout.Button("Scan for Duplicates", GUILayout.Height(30)))
                {
                    FindDuplicates();
                }

                if (_pendingOperations.Count > 0)
                {
                    EditorGUILayout.Space(10);
                    EditorGUILayout.LabelField($"Found {_pendingOperations.Count} duplicates:");

                    foreach (var op in _pendingOperations.Take(10))
                    {
                        EditorGUILayout.BeginHorizontal();
                        EditorGUILayout.LabelField(op.Path, EditorStyles.miniLabel);

                        if (GUILayout.Button("Delete", GUILayout.Width(60)))
                        {
                            AssetDatabase.DeleteAsset(op.Path);
                            _pendingOperations.Remove(op);
                        }

                        EditorGUILayout.EndHorizontal();
                    }

                    if (GUILayout.Button("Delete All Duplicates", _manager._buttonStyle))
                    {
                        DeleteAllDuplicates();
                    }
                }

                EditorGUILayout.EndVertical();
            }

            private void DrawFileOrganization()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? File Organization", EditorStyles.boldLabel);

                if (GUILayout.Button("Organize Scripts by Type", GUILayout.Height(30)))
                {
                    OrganizeScripts();
                }

                if (GUILayout.Button("Consolidate Resources", GUILayout.Height(30)))
                {
                    ConsolidateResources();
                }

                if (GUILayout.Button("Clean Empty Folders", GUILayout.Height(30)))
                {
                    CleanEmptyFolders();
                }

                EditorGUILayout.EndVertical();
            }

            private void DrawNamespaceFixer()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("??? Namespace Fixer", EditorStyles.boldLabel);

                if (GUILayout.Button("Fix All Namespaces", GUILayout.Height(30)))
                {
                    FixAllNamespaces();
                }

                if (GUILayout.Button("Update Using Statements", GUILayout.Height(30)))
                {
                    UpdateUsingStatements();
                }

                EditorGUILayout.EndVertical();
            }

            public void CleanProject()
            {
                StartProcessing();

                FindDuplicates();
                DeleteAllDuplicates();
                CleanEmptyFolders();
                ConsolidateResources();

                AssetDatabase.Refresh();

                Log("Project cleaned successfully!", LogType.Success);
                EndProcessing();
            }

            private void FindDuplicates()
            {
                _pendingOperations.Clear();

                string[] patterns = { " 1", " 2", " 3", " 4", " 5" };
                string[] folders = { "Audio", "Content", "Core", "Resources", "Runtime", "Tools" };

                foreach (var folder in folders)
                {
                    foreach (var pattern in patterns)
                    {
                        string searchPath = $"Assets/_Project/{folder}{pattern}";
                        if (AssetDatabase.IsValidFolder(searchPath))
                        {
                            _pendingOperations.Add(new FileOperation
                            {
                                Type = OperationType.Delete,
                                Path = searchPath,
                                Reason = "Duplicate folder"
                            });
                        }
                    }
                }

                Log($"Found {_pendingOperations.Count} duplicate folders", LogType.Warning);
            }

            private void DeleteAllDuplicates()
            {
                foreach (var op in _pendingOperations.Where(o => o.Type == OperationType.Delete))
                {
                    AssetDatabase.DeleteAsset(op.Path);
                    Log($"Deleted: {op.Path}", LogType.Info);
                }

                _pendingOperations.Clear();
                AssetDatabase.Refresh();
            }

            private void OrganizeScripts()
            {
                var scripts = AssetDatabase.FindAssets("t:MonoScript", new[] { "Assets/_Project" });

                foreach (var guid in scripts)
                {
                    string path = AssetDatabase.GUIDToAssetPath(guid);
                    var script = AssetDatabase.LoadAssetAtPath<MonoScript>(path);

                    if (script != null)
                    {
                        string targetFolder = DetermineScriptFolder(script);
                        string fileName = Path.GetFileName(path);
                        string newPath = $"{targetFolder}/{fileName}";

                        if (path != newPath && !File.Exists(newPath))
                        {
                            AssetDatabase.MoveAsset(path, newPath);
                        }
                    }
                }
            }

            private string DetermineScriptFolder(MonoScript script)
            {
                string content = script.text;

                if (content.Contains(": MonoBehaviour") || content.Contains(": ScriptableObject"))
                {
                    if (content.Contains("Editor") || content.Contains("[MenuItem"))
                        return "Assets/_Project/Code/Editor";
                    if (content.Contains("UI") || content.Contains("Canvas"))
                        return "Assets/_Project/Code/Runtime/UI";
                    if (content.Contains("Manager") || content.Contains("Service"))
                        return "Assets/_Project/Code/Runtime/Core";
                    if (content.Contains("Player") || content.Contains("Character"))
                        return "Assets/_Project/Code/Runtime/Gameplay";

                    return "Assets/_Project/Code/Runtime/Systems";
                }

                return "Assets/_Project/Code/Runtime/Core";
            }

            private void ConsolidateResources()
            {
                // Move all Resources folders to Addressables
                var resourceFolders = Directory.GetDirectories("Assets", "Resources", SearchOption.AllDirectories);

                foreach (var folder in resourceFolders)
                {
                    if (!folder.Contains("_Project")) continue;

                    var files = Directory.GetFiles(folder, "*.*", SearchOption.AllDirectories)
                        .Where(f => !f.EndsWith(".meta"));

                    foreach (var file in files)
                    {
                        string fileName = Path.GetFileName(file);
                        string targetPath = $"Assets/_Project/Content/Legacy/{fileName}";

                        if (!File.Exists(targetPath))
                        {
                            Directory.CreateDirectory(Path.GetDirectoryName(targetPath));
                            AssetDatabase.MoveAsset(file, targetPath);
                        }
                    }
                }

                Log("Resources consolidated - remember to set up Addressables!", LogType.Warning);
            }

            private void CleanEmptyFolders()
            {
                var folders = Directory.GetDirectories("Assets/_Project", "*", SearchOption.AllDirectories)
                    .OrderByDescending(f => f.Length);

                int cleaned = 0;
                foreach (var folder in folders)
                {
                    if (Directory.GetFiles(folder).Length == 0 &&
                        Directory.GetDirectories(folder).Length == 0)
                    {
                        AssetDatabase.DeleteAsset(folder);
                        cleaned++;
                    }
                }

                Log($"Cleaned {cleaned} empty folders", LogType.Success);
            }

            private void FixAllNamespaces()
            {
                var scripts = AssetDatabase.FindAssets("t:MonoScript", new[] { "Assets/_Project" });

                foreach (var guid in scripts)
                {
                    string path = AssetDatabase.GUIDToAssetPath(guid);
                    FixNamespaceInFile(path);
                }

                AssetDatabase.Refresh();
                Log("All namespaces fixed!", LogType.Success);
            }

            private void FixNamespaceInFile(string path)
            {
                string content = File.ReadAllText(path);
                string directory = Path.GetDirectoryName(path).Replace('\\', '/');

                // Determine correct namespace
                string correctNamespace = "WildSurvival";

                if (directory.Contains("/Core"))
                    correctNamespace = "WildSurvival.Core";
                else if (directory.Contains("/Systems"))
                    correctNamespace = "WildSurvival.Systems";
                else if (directory.Contains("/Gameplay"))
                    correctNamespace = "WildSurvival.Gameplay";
                else if (directory.Contains("/UI"))
                    correctNamespace = "WildSurvival.UI";
                else if (directory.Contains("/Editor"))
                    correctNamespace = "WildSurvival.Editor";

                // Fix namespace
                string pattern = @"namespace\s+[\w\.]+";
                string replacement = $"namespace {correctNamespace}";

                string newContent = Regex.Replace(content, pattern, replacement);

                if (newContent != content)
                {
                    File.WriteAllText(path, newContent);
                }
            }

            private void UpdateUsingStatements()
            {
                var scripts = AssetDatabase.FindAssets("t:MonoScript", new[] { "Assets/_Project" });

                foreach (var guid in scripts)
                {
                    string path = AssetDatabase.GUIDToAssetPath(guid);
                    string content = File.ReadAllText(path);

                    // Add common using statements if missing
                    var usings = new[]
                    {
                        "using System;",
                        "using System.Collections.Generic;",
                        "using UnityEngine;",
                        "using WildSurvival.Core;",
                        "using WildSurvival.Systems;"
                    };

                    foreach (var usingStatement in usings)
                    {
                        if (!content.Contains(usingStatement) && ShouldAddUsing(content, usingStatement))
                        {
                            content = usingStatement + "\n" + content;
                        }
                    }

                    File.WriteAllText(path, content);
                }

                AssetDatabase.Refresh();
            }

            private bool ShouldAddUsing(string content, string usingStatement)
            {
                // Add logic to determine if using statement is needed
                return false;
            }
        }

        /// <summary>
        /// Code generation and modification tools
        /// </summary>
        public class CodeTools
        {
            private WildSurvivalProjectManager _manager;

            public CodeTools(WildSurvivalProjectManager manager)
            {
                _manager = manager;
            }

            public void Draw()
            {
                EditorGUILayout.LabelField("Code Tools", _manager._headerStyle);

                // Code Templates
                DrawCodeTemplates();

                EditorGUILayout.Space(20);

                // Script Generator
                DrawScriptGenerator();

                EditorGUILayout.Space(20);

                // Code Analysis
                DrawCodeAnalysis();
            }

            private void DrawCodeTemplates()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Code Templates", EditorStyles.boldLabel);

                EditorGUILayout.BeginHorizontal();

                if (GUILayout.Button("Manager\nSingleton", GUILayout.Height(60)))
                {
                    CreateManagerTemplate();
                }

                if (GUILayout.Button("System\nComponent", GUILayout.Height(60)))
                {
                    CreateSystemTemplate();
                }

                if (GUILayout.Button("Data\nContainer", GUILayout.Height(60)))
                {
                    CreateDataTemplate();
                }

                if (GUILayout.Button("Custom\nEditor", GUILayout.Height(60)))
                {
                    CreateEditorTemplate();
                }

                EditorGUILayout.EndHorizontal();

                EditorGUILayout.EndVertical();
            }

            private void DrawScriptGenerator()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Script Generator", EditorStyles.boldLabel);

                // Generator UI would go here

                EditorGUILayout.EndVertical();
            }

            private void DrawCodeAnalysis()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Code Analysis", EditorStyles.boldLabel);

                if (GUILayout.Button("Analyze Code Quality", GUILayout.Height(30)))
                {
                    AnalyzeCodeQuality();
                }

                if (GUILayout.Button("Find Unused Scripts", GUILayout.Height(30)))
                {
                    FindUnusedScripts();
                }

                if (GUILayout.Button("Check Null References", GUILayout.Height(30)))
                {
                    CheckNullReferences();
                }

                EditorGUILayout.EndVertical();
            }

            private void CreateManagerTemplate()
            {
                string template = @"using System;
using UnityEngine;
using WildSurvival.Core;

namespace WildSurvival.Systems
{
    public class [NAME]Manager : MonoBehaviour
    {
        private static [NAME]Manager _instance;
        public static [NAME]Manager Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = FindObjectOfType<[NAME]Manager>();
                    if (_instance == null)
                    {
                        GameObject go = new GameObject(""[NAME]Manager"");
                        _instance = go.AddComponent<[NAME]Manager>();
                        DontDestroyOnLoad(go);
                    }
                }
                return _instance;
            }
        }

        private void Awake()
        {
            if (_instance != null && _instance != this)
            {
                Destroy(gameObject);
                return;
            }
            _instance = this;
            DontDestroyOnLoad(gameObject);
            
            Initialize();
        }

        private void Initialize()
        {
            // Initialize manager
        }
    }
}";

                CreateScriptFromTemplate(template, "Manager");
            }

            private void CreateSystemTemplate() { /* System template */ }
            private void CreateDataTemplate() { /* Data template */ }
            private void CreateEditorTemplate() { /* Editor template */ }

            private void CreateScriptFromTemplate(string template, string type)
            {
                string name = EditorInputDialog.Show("Create " + type, "Enter name:", "New" + type);
                if (string.IsNullOrEmpty(name)) return;

                string content = template.Replace("[NAME]", name);
                string path = $"Assets/_Project/Code/Runtime/Systems/{name}{type}.cs";

                File.WriteAllText(path, content);
                AssetDatabase.Refresh();

                Log($"Created {name}{type}.cs", LogType.Success);
            }

            private void AnalyzeCodeQuality()
            {
                var scripts = AssetDatabase.FindAssets("t:MonoScript", new[] { "Assets/_Project" });

                int totalLines = 0;
                int totalComplexity = 0;
                List<string> issues = new List<string>();

                foreach (var guid in scripts)
                {
                    string path = AssetDatabase.GUIDToAssetPath(guid);
                    string content = File.ReadAllText(path);

                    totalLines += content.Split('\n').Length;

                    // Check for common issues
                    if (content.Contains("public static") && !content.Contains("Instance"))
                    {
                        issues.Add($"Potential static abuse in {Path.GetFileName(path)}");
                    }

                    if (content.Contains("GameObject.Find"))
                    {
                        issues.Add($"GameObject.Find usage in {Path.GetFileName(path)}");
                    }

                    if (content.Contains("Resources.Load"))
                    {
                        issues.Add($"Resources.Load usage in {Path.GetFileName(path)}");
                    }
                }

                Log($"Code Analysis: {scripts.Length} scripts, {totalLines} lines", LogType.Info);

                foreach (var issue in issues.Take(10))
                {
                    Log(issue, LogType.Warning);
                }
            }

            private void FindUnusedScripts() { /* Find unused scripts */ }
            private void CheckNullReferences() { /* Check null references */ }
        }

        /// <summary>
        /// Game-specific tools for Wild Survival
        /// </summary>
        public class GameTools
        {
            private WildSurvivalProjectManager _manager;

            public GameTools(WildSurvivalProjectManager manager)
            {
                _manager = manager;
            }

            public void Draw()
            {
                EditorGUILayout.LabelField("Game Tools", _manager._headerStyle);

                // Inventory Tools
                DrawInventoryTools();

                EditorGUILayout.Space(20);

                // World Builder
                DrawWorldBuilder();

                EditorGUILayout.Space(20);

                // Debug Tools
                DrawDebugTools();
            }

            private void DrawInventoryTools()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Inventory Tools", EditorStyles.boldLabel);

                if (GUILayout.Button("Open Inventory Designer", GUILayout.Height(40)))
                {
                    // Open inventory designer window
                }

                if (GUILayout.Button("Generate Item Database", GUILayout.Height(40)))
                {
                    // Generate items
                }

                EditorGUILayout.EndVertical();
            }

            private void DrawWorldBuilder()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? World Builder", EditorStyles.boldLabel);

                if (GUILayout.Button("Terrain Tools", GUILayout.Height(40)))
                {
                    // Open terrain tools
                }

                if (GUILayout.Button("Vegetation Painter", GUILayout.Height(40)))
                {
                    // Open vegetation painter
                }

                EditorGUILayout.EndVertical();
            }

            private void DrawDebugTools()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Debug Tools", EditorStyles.boldLabel);

                if (GUILayout.Button("Enable Debug Mode", GUILayout.Height(30)))
                {
                    EnableDebugMode();
                }

                if (GUILayout.Button("Spawn Test Items", GUILayout.Height(30)))
                {
                    SpawnTestItems();
                }

                EditorGUILayout.EndVertical();
            }

            private void EnableDebugMode() { /* Enable debug */ }
            private void SpawnTestItems() { /* Spawn items */ }
        }

        /// <summary>
        /// Performance analysis and optimization tools
        /// </summary>
        public class PerformanceTools
        {
            private WildSurvivalProjectManager _manager;

            public PerformanceTools(WildSurvivalProjectManager manager)
            {
                _manager = manager;
            }

            public void Draw()
            {
                EditorGUILayout.LabelField("Performance Tools", _manager._headerStyle);

                // Performance Analysis
                DrawPerformanceAnalysis();

                EditorGUILayout.Space(20);

                // Optimization Tools
                DrawOptimizationTools();
            }

            private void DrawPerformanceAnalysis()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Performance Analysis", EditorStyles.boldLabel);

                if (GUILayout.Button("Analyze Scene Performance", GUILayout.Height(30)))
                {
                    AnalyzeScenePerformance();
                }

                if (GUILayout.Button("Profile Texture Memory", GUILayout.Height(30)))
                {
                    ProfileTextureMemory();
                }

                EditorGUILayout.EndVertical();
            }

            private void DrawOptimizationTools()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("? Optimization", EditorStyles.boldLabel);

                if (GUILayout.Button("Optimize Textures", GUILayout.Height(30)))
                {
                    OptimizeTextures();
                }

                if (GUILayout.Button("Setup LODs", GUILayout.Height(30)))
                {
                    SetupLODs();
                }

                if (GUILayout.Button("Optimize HDRP Settings", GUILayout.Height(30)))
                {
                    OptimizeHDRP();
                }

                EditorGUILayout.EndVertical();
            }

            private void AnalyzeScenePerformance() { /* Analyze scene */ }
            private void ProfileTextureMemory() { /* Profile textures */ }
            private void OptimizeTextures() { /* Optimize textures */ }
            private void SetupLODs() { /* Setup LODs */ }
            private void OptimizeHDRP() { /* Optimize HDRP */ }
        }

        /// <summary>
        /// Build and deployment tools
        /// </summary>
        public class BuildTools
        {
            private WildSurvivalProjectManager _manager;

            public BuildTools(WildSurvivalProjectManager manager)
            {
                _manager = manager;
            }

            public void Draw()
            {
                EditorGUILayout.LabelField("Build & Deploy", _manager._headerStyle);

                // Build Configuration
                DrawBuildConfiguration();

                EditorGUILayout.Space(20);

                // Quick Build
                DrawQuickBuild();
            }

            private void DrawBuildConfiguration()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Build Configuration", EditorStyles.boldLabel);

                EditorGUILayout.LabelField("Platform: Windows");
                EditorGUILayout.LabelField("Backend: IL2CPP");
                EditorGUILayout.LabelField("Target: Steam");

                EditorGUILayout.EndVertical();
            }

            private void DrawQuickBuild()
            {
                EditorGUILayout.BeginVertical(_manager._sectionStyle);
                EditorGUILayout.LabelField("?? Quick Build", EditorStyles.boldLabel);

                if (GUILayout.Button("Development Build", GUILayout.Height(40)))
                {
                    BuildDevelopment();
                }

                if (GUILayout.Button("Release Build", GUILayout.Height(40)))
                {
                    BuildRelease();
                }

                EditorGUILayout.EndVertical();
            }

            public void QuickBuild()
            {
                BuildDevelopment();
            }

            private void BuildDevelopment()
            {
                BuildPlayerOptions options = new BuildPlayerOptions
                {
                    scenes = EditorBuildSettings.scenes.Select(s => s.path).ToArray(),
                    locationPathName = "Builds/Development/WildSurvival.exe",
                    target = BuildTarget.StandaloneWindows64,
                    options = BuildOptions.Development | BuildOptions.AllowDebugging
                };

                BuildPipeline.BuildPlayer(options);
                Log("Development build complete!", LogType.Success);
            }

            private void BuildRelease()
            {
                BuildPlayerOptions options = new BuildPlayerOptions
                {
                    scenes = EditorBuildSettings.scenes.Select(s => s.path).ToArray(),
                    locationPathName = "Builds/Release/WildSurvival.exe",
                    target = BuildTarget.StandaloneWindows64,
                    options = BuildOptions.None
                };

                PlayerSettings.SetScriptingBackend(BuildTargetGroup.Standalone, ScriptingImplementation.IL2CPP);

                BuildPipeline.BuildPlayer(options);
                Log("Release build complete!", LogType.Success);
            }
        }

        // ==================== HELPER CLASSES ====================

        public class ProjectAnalysis
        {
            public List<string> Issues { get; private set; }
            public string Status { get; private set; }
            public bool HasIssues => Issues.Count > 0;

            public ProjectAnalysis()
            {
                Issues = new List<string>();
                Status = "Analyzing...";
            }

            public void Analyze()
            {
                Issues.Clear();

                // Check folder structure
                if (!AssetDatabase.IsValidFolder("Assets/_Project"))
                    Issues.Add("Missing _Project folder structure");

                // Check for duplicates
                CheckForDuplicates();

                // Check assemblies
                if (!File.Exists("Assets/_Project/Code/Runtime/Core/WildSurvival.Core.asmdef"))
                    Issues.Add("Missing assembly definitions");

                // Check HDRP
                if (UnityEngine.Rendering.GraphicsSettings.currentRenderPipeline == null)
                    Issues.Add("HDRP not configured");

                // Check Resources usage
                if (Directory.Exists("Assets/_Project/Resources"))
                    Issues.Add("Using Resources folder (migrate to Addressables)");

                Status = HasIssues ? $"{Issues.Count} issues found" : "All systems operational";
            }

            private void CheckForDuplicates()
            {
                string[] patterns = { " 1", " 2", " 3" };
                foreach (var pattern in patterns)
                {
                    var folders = Directory.GetDirectories("Assets/_Project", "*" + pattern, SearchOption.AllDirectories);
                    if (folders.Length > 0)
                    {
                        Issues.Add($"Found {folders.Length} duplicate folders");
                        break;
                    }
                }
            }

            public float GetHealthScore()
            {
                if (Issues.Count == 0) return 1f;
                if (Issues.Count <= 2) return 0.8f;
                if (Issues.Count <= 5) return 0.6f;
                if (Issues.Count <= 10) return 0.4f;
                return 0.2f;
            }
        }

        public class SetupTask
        {
            public string Name { get; set; }
            public Action ExecuteFunc { get; set; }
            public Func<bool> CheckFunc { get; set; }

            public SetupTask(string name, Action execute, Func<bool> check)
            {
                Name = name;
                ExecuteFunc = execute;
                CheckFunc = check;
            }
        }

        public class FileOperation
        {
            public OperationType Type { get; set; }
            public string Path { get; set; }
            public string TargetPath { get; set; }
            public string Reason { get; set; }
        }

        public enum OperationType
        {
            Move,
            Delete,
            Rename,
            Create
        }

        // ==================== HELPER CLASSES (PUBLIC) ====================

        public class LogEntry
        {
            public string Message { get; set; }
            public LogType Type { get; set; }
            public DateTime Time { get; set; }

            public LogEntry(string message, LogType type)
            {
                Message = message;
                Type = type;
                Time = DateTime.Now;
            }

            public Color GetColor()
            {
                return Type switch
                {
                    LogType.Error => Color.red,
                    LogType.Warning => Color.yellow,
                    LogType.Success => Color.green,
                    _ => Color.white
                };
            }
        }
    }

    // Simple input dialog helper
    public static class EditorInputDialog
    {
        public static string Show(string title, string message, string defaultValue = "")
        {
            // This is a simplified version - in production you'd want a proper dialog
            return EditorUtility.SaveFilePanel(title, "Assets/_Project/Code", defaultValue, "cs")
                .Replace(Application.dataPath, "Assets");
        }
    }
}


// ============================================
// FILE: \Assets\WildSurvival\Editor\WSUltimateGitHubWindow\WSUltimateGitHubWindow.cs
// ============================================

// Assets/WildSurvival/Editor/WSUltimateGitHubWindow/WSUltimateGitHubWindow.cs
// Unity 6 Editor-only. Single-file "Git & Share Hub" window.
// v1.3: stage helpers, commit message field, quick commit+push,
//       branch create/checkout, VS Code diff/merge config,
//       origin+mirror remotes, .gitattributes writer, richer log.

#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace WildSurvival.EditorTools
{
    public class WSUltimateGitHubWindow : EditorWindow
    {
        const string MenuPath = "Wild Survival/Git & Share/Git & Share Hub";
        const int DefaultTimeoutMs = 120000;

        [MenuItem(MenuPath, false, 20)]
        public static void Open()
        {
            var w = GetWindow<WSUltimateGitHubWindow>("Git & Share Hub");
            w.Show();
        }

        string _commitMsg = EditorPrefs.GetString("WSUGit.CommitMsg", "");
        string _defaultPushRemote = EditorPrefs.GetString("WSUGit.DefaultPushRemote", "origin");

        string _newRemoteName = "mirror";
        string _newRemoteUrl = "";
        string _newBranchName = "";

        bool _autoRefreshAfterActions = true;
        Vector2 _varCommitMsgScroll;

        // State
        string _repoRoot = "";
        string _branch = "";
        string _originUrl = "";
        string _mirrorUrl = "";
        //string _commitMsg = "";
        bool _busy = false;
        Vector2 _svStatus;
        Vector2 _svLog;
        readonly StringBuilder _log = new StringBuilder(4096);

        // Parsed status entries (from `git status --porcelain -z`)
        class StatusEntry
        {
            public string Code;   // e.g., "M ", "A ", " D", "??"
            public string Path;   // path (or old path for renames)
            public string Path2;  // new path if rename/copy
        }
        readonly List<StatusEntry> _status = new List<StatusEntry>();

        // --------- Unity lifecycle ---------
        void OnEnable()
        {
            // Load persisted prefs (unify on WSUGit.*)
            _originUrl = EditorPrefs.GetString("WSGitHub.originUrl", _originUrl);
            _mirrorUrl = EditorPrefs.GetString("WSGitHub.mirrorUrl", _mirrorUrl);
            _commitMsg = EditorPrefs.GetString("WSUGit.CommitMsg", _commitMsg);

            DetectRepoRoot();
            RefreshAll(silent: true);
            AppendLog($"[Init] v1.4. Repo: {(_repoRoot == "" ? "(not detected)" : _repoRoot)}");
        }

        void OnDisable()
        {
            // Persist small fields
            EditorPrefs.SetString("WSUGit.CommitMsg", _commitMsg ?? "");
            EditorPrefs.SetString("WSUGit.DefaultPushRemote", _defaultPushRemote ?? "origin");
        }


        string BuildTipsText(string repoRoot)
        {
            var sb = new StringBuilder();
            sb.AppendLine("Tips & helpers:");
            sb.AppendLine("• Configure Git LFS (for large binaries):");
            sb.AppendLine("    git lfs install");
            sb.AppendLine("    git lfs track \"*.psd\" \"*.fbx\" \"*.wav\"");
            sb.AppendLine();
            sb.AppendLine("• Set VS Code as diff/merge tool:");
            sb.AppendLine("    git config diff.tool vscode");
            sb.AppendLine("    git config difftool.vscode.cmd \"code --wait --diff \\\"$LOCAL\\\" \\\"$REMOTE\\\"\"");
            sb.AppendLine("    git config merge.tool vscode");
            sb.AppendLine("    git config mergetool.vscode.cmd \"code --wait \\\"$MERGED\\\"\"");
            sb.AppendLine();
            if (!string.IsNullOrEmpty(repoRoot))
                sb.AppendLine("• Repo root: " + repoRoot);
            sb.AppendLine("• Emoji tip: Windows + . opens the emoji panel ??");
            return sb.ToString();
        }


        // --------- UI ---------
        void OnGUI()
        {
            using (new EditorGUI.DisabledScope(_busy))
            {
                DrawHeader();

                GUILayout.Label("Status", EditorStyles.boldLabel);

                if (GUILayout.Button("Refresh"))
                    RefreshStatus();

                using (new GUILayout.HorizontalScope())
                {
                    if (GUILayout.Button("Stage All")) { RunGit("add -A", out _, out _); RefreshStatus(); }
                    if (GUILayout.Button("Unstage All")) { RunGit("reset HEAD -- .", out _, out _); RefreshStatus(); }
                }


                if (string.IsNullOrEmpty(_repoRoot))
                {
                    EditorGUILayout.HelpBox(BuildTipsText(_repoRoot), MessageType.None);

                    if (GUILayout.Button("Initialize Git (git init)"))
                        SafeAction(GitInit);
                    GUILayout.Space(6);
                    DrawLog();
                    return;
                }


                DrawSummary();
                GUILayout.Space(4);
                DrawStatusArea();
                GUILayout.Space(6);
                DrawCommitArea();
                GUILayout.Space(6);
                DrawBranchArea();
                GUILayout.Space(6);
                DrawRemotesArea();
                GUILayout.Space(6);
                DrawToolsArea();
                GUILayout.Space(6);
                DrawLog();
            }
        }

        void DrawHeader()
        {
            GUILayout.Space(4);
            EditorGUILayout.BeginHorizontal();
            GUILayout.Label("WS • Git & Share Hub", EditorStyles.boldLabel);
            GUILayout.FlexibleSpace();
            if (GUILayout.Button("Refresh", GUILayout.Width(80)))
                RefreshAll();
            EditorGUILayout.EndHorizontal();

            var hasGit = HasGitInPath(out var gitVersion);
            EditorGUILayout.LabelField("Git:", hasGit ? gitVersion : "Not found in PATH");
            if (!hasGit)
            {
                EditorGUILayout.HelpBox("Install Git (and restart Unity) OR ensure 'git' is in PATH.\nhttps://git-scm.com/downloads", MessageType.Error);
            }
        }

        void DrawSummary()
        {
            using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
            {
                EditorGUILayout.LabelField("Repository", _repoRoot);
                EditorGUILayout.LabelField("Branch", string.IsNullOrEmpty(_branch) ? "(unknown)" : _branch);

                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("Open Repo Folder")) EditorUtility.RevealInFinder(_repoRoot.Replace('\\', '/'));
                if (!string.IsNullOrEmpty(_originUrl) && Uri.IsWellFormedUriString(_originUrl, UriKind.Absolute))
                {
                    if (GUILayout.Button("Open Remote (origin)")) Application.OpenURL(_originUrl);
                }
                if (GUILayout.Button("Git Bash Here"))
                {
                    var bash = GuessGitBash();
                    if (!string.IsNullOrEmpty(bash))
                    {
                        var psi = new ProcessStartInfo
                        {
                            FileName = bash,
                            WorkingDirectory = _repoRoot,
                            UseShellExecute = true
                        };
                        Process.Start(psi);
                    }
                    else
                    {
                        EditorUtility.DisplayDialog("Not Found", "Couldn't find Git Bash. Is Git for Windows installed?", "OK");
                    }
                }
                EditorGUILayout.EndHorizontal();
            }
        }

        void DrawStatusArea()
        {
            using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
            {
                EditorGUILayout.LabelField("Working Tree", EditorStyles.boldLabel);

                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("Stage All (git add -A)", GUILayout.Width(180)))
                    SafeAction(StageAll);
                if (GUILayout.Button("Unstage All (git reset)", GUILayout.Width(180)))
                    SafeAction(UnstageAll);
                if (GUILayout.Button("Discard Local Changes (git restore .)", GUILayout.Width(230)))
                    SafeAction(DiscardAll);
                EditorGUILayout.EndHorizontal();

                GUILayout.Space(4);
                using (var sv = new EditorGUILayout.ScrollViewScope(_svStatus, GUILayout.MinHeight(100)))
                {
                    _svStatus = sv.scrollPosition;
                    if (_status.Count == 0)
                    {
                        GUILayout.Label("No changes. Working tree clean.");
                    }
                    else
                    {
                        foreach (var s in _status)
                        {
                            GUILayout.BeginHorizontal();
                            GUILayout.Label(s.Code, GUILayout.Width(40));
                            GUILayout.Label(s.Path);
                            if (!string.IsNullOrEmpty(s.Path2))
                                GUILayout.Label("? " + s.Path2);
                            GUILayout.FlexibleSpace();

                            if (GUILayout.Button("Stage", GUILayout.Width(60)))
                                SafeAction(() => StagePath(s.Path2 ?? s.Path));
                            if (GUILayout.Button("Unstage", GUILayout.Width(70)))
                                SafeAction(() => UnstagePath(s.Path2 ?? s.Path));
                            if (GUILayout.Button("Discard", GUILayout.Width(70)))
                                SafeAction(() => DiscardPath(s.Path2 ?? s.Path));
                            GUILayout.EndHorizontal();
                        }
                    }
                }
            }
        }



        void DrawCommitArea()
        {
            GUILayout.Space(6);
            GUILayout.Label("Commit", EditorStyles.boldLabel);

            // Commit message (persist live)
            EditorGUI.BeginChangeCheck();
            _varCommitMsgScroll = EditorGUILayout.BeginScrollView(_varCommitMsgScroll, GUILayout.MinHeight(60), GUILayout.MaxHeight(120));
            _commitMsg = EditorGUILayout.TextArea(_commitMsg ?? "", GUILayout.ExpandHeight(true));
            EditorGUILayout.EndScrollView();
            if (EditorGUI.EndChangeCheck())
                EditorPrefs.SetString("WSUGit.CommitMsg", _commitMsg ?? "");

            using (new GUILayout.HorizontalScope())
            {
                // Commit (auto-stage if nothing staged)
                GUI.enabled = !string.IsNullOrWhiteSpace(_commitMsg);
                if (GUILayout.Button("Commit", GUILayout.Width(120)))
                {
                    RunGit("diff --cached --name-only", out var staged, out _);
                    if (string.IsNullOrWhiteSpace(staged))
                        RunGit("add -A", out _, out _);

                    var msgEsc = EscapeQuotes(_commitMsg.Trim());
                    if (!RunGit($"commit -m \"{msgEsc}\"", out var so, out var se))
                        AppendLog("Commit failed: " + se);
                    else
                    {
                        AppendLog("Commit OK:\n" + so);
                        _commitMsg = "";
                        EditorPrefs.SetString("WSUGit.CommitMsg", "");
                        if (_autoRefreshAfterActions) RefreshStatus();
                    }
                }
                GUI.enabled = true;

                // One-click combo
                if (GUILayout.Button($"Commit + Push ? {(_defaultPushRemote ?? "origin")}", GUILayout.Width(220)))
                {
                    // do the same autostage-commit, then push default
                    RunGit("diff --cached --name-only", out var staged, out _);
                    if (string.IsNullOrWhiteSpace(staged))
                        RunGit("add -A", out _, out _);

                    var msg = string.IsNullOrWhiteSpace(_commitMsg) ? "update" : _commitMsg.Trim();
                    if (RunGit($"commit -m \"{EscapeQuotes(msg)}\"", out var so, out var se))
                    {
                        AppendLog(so);
                        _commitMsg = "";
                        EditorPrefs.SetString("WSUGit.CommitMsg", "");
                        PushDefault();
                    }
                    else AppendLog(se);

                    if (_autoRefreshAfterActions) RefreshStatus();
                }

                if (GUILayout.Button("Push", GUILayout.Width(80)))
                    PushDefault();

                if (GUILayout.Button("Pull", GUILayout.Width(80)))
                    SafeAction(Pull);
            }

            using (new EditorGUILayout.HorizontalScope())
            {
                if (GUILayout.Button("Show Last 50 Commits"))
                    SafeAction(LogLast50);
                if (GUILayout.Button("Tag Current (v0.0.1)"))
                    SafeAction(() => CreateTag("v0.0.1"));
            }
        }


        void DrawBranchArea()
        {
            using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
            {
                EditorGUILayout.LabelField("Branches", EditorStyles.boldLabel);
                EditorGUILayout.BeginHorizontal();
                GUILayout.Label("New branch:", GUILayout.Width(90));
                _newBranchName = EditorGUILayout.TextField(_newBranchName, GUILayout.MinWidth(120));
                if (GUILayout.Button("Create & Checkout", GUILayout.Width(160)) && !string.IsNullOrWhiteSpace(_newBranchName))
                    SafeAction(() => CreateAndCheckout(_newBranchName));
                EditorGUILayout.EndHorizontal();

                if (GUILayout.Button("Checkout… (popup)"))
                    SafeAction(ShowBranchPopup);
            }
        }


        void DrawRemotesArea()
        {
            using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
            {
                EditorGUILayout.LabelField("Remotes", EditorStyles.boldLabel);

                // origin
                EditorGUILayout.BeginHorizontal();
                GUILayout.Label("origin:", GUILayout.Width(60));
                _originUrl = EditorGUILayout.TextField(_originUrl);
                if (GUILayout.Button("Save", GUILayout.Width(70)))
                    SafeAction(SetOriginRemote);
                if (GUILayout.Button("Fetch", GUILayout.Width(70)))
                    SafeAction(() => FetchRemote("origin"));
                if (!string.IsNullOrEmpty(_originUrl) && Uri.IsWellFormedUriString(_originUrl, UriKind.Absolute))
                    if (GUILayout.Button("Open", GUILayout.Width(60))) Application.OpenURL(_originUrl);
                EditorGUILayout.EndHorizontal();

                // mirror
                EditorGUILayout.BeginHorizontal();
                GUILayout.Label("mirror:", GUILayout.Width(60));
                _mirrorUrl = EditorGUILayout.TextField(_mirrorUrl);
                if (GUILayout.Button("Save", GUILayout.Width(70)))
                    SafeAction(SetMirrorRemote);
                if (GUILayout.Button("Push ? mirror", GUILayout.Width(120)))
                    SafeAction(PushMirror);
                EditorGUILayout.EndHorizontal();

                // existing remotes list + default
                GUILayout.Space(6);
                if (TryGetRemotes(out var list))
                {
                    EditorGUILayout.LabelField("Configured remotes:");
                    foreach (var r in list)
                    {
                        EditorGUILayout.BeginHorizontal();
                        GUILayout.Label($"{r.name} — {r.url}", GUILayout.ExpandWidth(true));
                        if (GUILayout.Button("Set Default", GUILayout.Width(100)))
                            SetDefaultPushRemote(r.name);
                        EditorGUILayout.EndHorizontal();
                    }
                }
                else
                {
                    GUILayout.Label("No remotes configured.");
                }

                // Add new remote
                GUILayout.Space(6);
                EditorGUILayout.LabelField("Add remote:");
                EditorGUILayout.BeginHorizontal();
                _newRemoteName = EditorGUILayout.TextField("Name", _newRemoteName);
                _newRemoteUrl = EditorGUILayout.TextField("URL", _newRemoteUrl);
                EditorGUILayout.EndHorizontal();

                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("Add Remote"))
                    SafeAction(() => AddRemote(_newRemoteName.Trim(), _newRemoteUrl.Trim()));
                if (GUILayout.Button("Add Mirror (old repo)"))
                    SafeAction(() => AddRemote("mirror", "https://github.com/mobiusinfinity/WildSurvival.git"));
                EditorGUILayout.EndHorizontal();
            }
        }


        void DrawToolsArea()
        {
            GUILayout.Space(10);
            GUILayout.Label("Diff/Merge Tools", EditorStyles.boldLabel);

            using (new GUILayout.HorizontalScope())
            {
                if (GUILayout.Button("Config VS Code diff/merge"))
                    ConfigVsCodeDiffMerge();
                if (GUILayout.Button("Verify"))
                    VerifyVsCodeDiffMerge();

            }
            using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
            {
                GUILayout.Space(10);
                GUILayout.Label("Line Endings", EditorStyles.boldLabel);
                using (new GUILayout.HorizontalScope())
                {
                    if (GUILayout.Button("Windows style (CRLF)")) FixLineEndings(true);
                    if (GUILayout.Button("Mac/Linux style (LF)")) FixLineEndings(false);
                }

                EditorGUILayout.LabelField("Tools", EditorStyles.boldLabel);
                EditorGUILayout.BeginHorizontal();
                if (GUILayout.Button("Configure VS Code as diff/merge"))
                    SafeAction(ConfigVsCodeDiffMerge);
                if (GUILayout.Button("Write .gitattributes (line endings)"))
                    SafeAction(WriteGitattributes);
                EditorGUILayout.EndHorizontal();
            }
        }

        void DrawLog()
        {
            using (new EditorGUILayout.VerticalScope(EditorStyles.helpBox))
            {
                EditorGUILayout.LabelField("Log", EditorStyles.boldLabel);
                using (var sv = new EditorGUILayout.ScrollViewScope(_svLog, GUILayout.MinHeight(120)))
                {
                    _svLog = sv.scrollPosition;
                    GUILayout.TextArea(_log.ToString(), GUILayout.ExpandHeight(true));
                }
                if (GUILayout.Button("Clear Log")) { _log.Length = 0; }
            }
        }

        // --------- Actions ----------
        void SafeAction(Action a)
        {
            if (_busy) return;
            _busy = true;
            try { a(); }
            catch (Exception e) { AppendLog("[ERROR] " + e.Message); }
            finally { _busy = false; Repaint(); }
        }

        void DetectRepoRoot()
        {
            // Use `git rev-parse --show-toplevel` when available
            if (RunGit("rev-parse --show-toplevel", out var so, out var se))
            {
                _repoRoot = so.Trim().Replace('\\', '/');
            }
            else
            {
                // Fallback: walk up from project folder looking for .git
                var dir = new DirectoryInfo(Directory.GetCurrentDirectory());
                while (dir != null && !Directory.Exists(Path.Combine(dir.FullName, ".git")))
                    dir = dir.Parent;
                _repoRoot = dir?.FullName?.Replace('\\', '/') ?? "";
            }
            if (string.IsNullOrEmpty(_repoRoot))
                AppendLog("[WARN] No .git found. Initialize to enable features.");
        }

        void RefreshAll(bool silent = false)
        {
            if (!_busy)
            {
                if (!silent) AppendLog("$ git rev-parse --abbrev-ref HEAD");
                if (RunGit("rev-parse --abbrev-ref HEAD", out var so, out var se))
                {
                    _branch = so.Trim();
                }
                else _branch = "(unknown)";

                RefreshRemotes();
                RefreshStatus();
            }
        }

        void RefreshStatus()
        {
            _status.Clear();
            // Newline-based porcelain avoids the -z/NUL parsing with line readers
            if (!RunGit("status --porcelain", out var so, out var se))
            {
                AppendLog(se);
                return;
            }

            var lines = so.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (var rec in lines)
            {
                if (rec.Length < 3) continue;

                var code = rec.Substring(0, 2);
                var rest = rec.Substring(3).Trim();

                string path = rest;
                string path2 = null;

                // Handle rename/copy: "R100 old -> new" (or "R  old -> new")
                const string arrow = " -> ";
                int idx = rest.IndexOf(arrow, StringComparison.Ordinal);
                if (idx >= 0)
                {
                    path = rest.Substring(0, idx).Trim();
                    path2 = rest.Substring(idx + arrow.Length).Trim();
                }

                _status.Add(new StatusEntry { Code = code, Path = path, Path2 = path2 });
            }
        }


        void VerifyVsCodeDiffMerge()
        {
            RunGit("config --get difftool.vscode.cmd", out var dOut, out _);
            RunGit("config --get mergetool.vscode.cmd", out var mOut, out _);
            AppendLog("difftool.vscode.cmd = " + (string.IsNullOrWhiteSpace(dOut) ? "<not set>" : dOut.Trim()));
            AppendLog("mergetool.vscode.cmd = " + (string.IsNullOrWhiteSpace(mOut) ? "<not set>" : mOut.Trim()));
        }

        void ConfigVsCodeDiffMerge()
        {
            RunGit("config diff.tool vscode", out _, out _);
            RunGit("config difftool.vscode.cmd \"code --wait --diff \\\"$LOCAL\\\" \\\"$REMOTE\\\"\"", out _, out _);
            RunGit("config merge.tool vscode", out _, out _);
            RunGit("config mergetool.vscode.cmd \"code --wait \\\"$MERGED\\\"\"", out _, out _);
            AppendLog("Configured VS Code as diff/merge tool for this repo.");
        }


        bool TryGetRemotes(out List<(string name, string url)> remotes)
        {
            remotes = new List<(string, string)>();
            if (!RunGit("remote -v", out var so, out var se))
            {
                AppendLog("remote -v failed: " + se);
                return false;
            }

            // Lines look like: "origin https://... (fetch)" and "origin https://... (push)"
            var lines = so.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (var ln in lines)
            {
                var parts = ln.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length >= 2)
                {
                    var name = parts[0];
                    var url = parts[1];
                    // keep the first URL we see per remote name
                    if (!remotes.Any(r => r.name == name))
                        remotes.Add((name, url));
                }
            }
            return remotes.Count > 0;
        }



        void AddRemote(string name, string url)
        {
            if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(url))
            {
                AppendLog("Remote name/url cannot be empty.");
                return;
            }
            if (!RunGit($"remote add {name} \"{url}\"", out var so, out var se))
            {
                AppendLog($"Failed to add remote {name}: {se}");
            }
            else
            {
                AppendLog($"Added remote {name} ? {url}");
                RefreshStatus();
            }
        }

        void SetDefaultPushRemote(string name)
        {
            if (string.IsNullOrWhiteSpace(name)) return;
            _defaultPushRemote = name;
            EditorPrefs.SetString("WSUGit.DefaultPushRemote", _defaultPushRemote);
            AppendLog("Default push remote set to: " + _defaultPushRemote);
        }

        void PushDefault()
        {
            var remote = string.IsNullOrWhiteSpace(_defaultPushRemote) ? "origin" : _defaultPushRemote;
            if (!RunGit($"push {remote} HEAD", out var so, out var se))
                AppendLog("Push failed: " + se);
            else
                AppendLog("Push OK:\n" + so);

            if (_autoRefreshAfterActions) RefreshStatus();
        }



        void RefreshRemotes()
        {
            if (RunGit("remote get-url origin", out var so, out var se))
                _originUrl = so.Trim();
            if (RunGit("remote get-url mirror", out so, out se))
                _mirrorUrl = so.Trim();
        }

        void GitInit()
        {
            var prj = Directory.GetCurrentDirectory().Replace('\\', '/');
            var root = new DirectoryInfo(prj); // Unity project root
            // We want to init at this folder (contains Assets/ Packages/ ProjectSettings/)
            if (RunGit("init", out var so, out var se))
            {
                AppendLog(so);
                DetectRepoRoot();
                WriteGitignoreIfMissing();
                AppendLog("Initialized repository.");
            }
            else AppendLog(se);
        }

        void StageAll()
        {
            AppendLog("$ git add -A");
            if (!RunGit("add -A", out var so, out var se)) AppendLog(se);
            else AppendLog(so);
            RefreshStatus();
        }

        void UnstageAll()
        {
            AppendLog("$ git reset");
            if (!RunGit("reset", out var so, out var se)) AppendLog(se);
            else AppendLog(so);
            RefreshStatus();
        }

        void DiscardAll()
        {
            if (!EditorUtility.DisplayDialog("Discard ALL changes?", "This will restore the working tree to last commit.\nUntracked files remain.", "Do it", "Cancel"))
                return;

            AppendLog("$ git restore --worktree -- .");
            if (!RunGit("restore --worktree -- .", out var so, out var se)) AppendLog(se);
            else AppendLog(so);
            RefreshStatus();
        }

        void StagePath(string path)
        {
            if (string.IsNullOrEmpty(path)) return;
            if (!RunGit($"add -- \"{path.Replace("\\", "/")}\"", out var so, out var se)) AppendLog(se);
            RefreshStatus();
        }

        void UnstagePath(string path)
        {
            if (string.IsNullOrEmpty(path)) return;
            if (!RunGit($"reset -- \"{path.Replace("\\", "/")}\"", out var so, out var se)) AppendLog(se);
            RefreshStatus();
        }

        void DiscardPath(string path)
        {
            if (string.IsNullOrEmpty(path)) return;
            if (!EditorUtility.DisplayDialog("Discard file changes?", path, "Restore", "Cancel")) return;
            if (!RunGit($"restore --worktree -- \"{path.Replace("\\", "/")}\"", out var so, out var se)) AppendLog(se);
            RefreshStatus();
        }

        void CommitOnly()
        {
            var msg = string.IsNullOrWhiteSpace(_commitMsg) ? "update" : _commitMsg.Trim();
            AppendLog($"$ git commit -m \"{msg}\"");
            if (!RunGit($"commit -m \"{EscapeQuotes(msg)}\"", out var so, out var se))
            {
                AppendLog(se);
            }
            else
            {
                AppendLog(so);
                _commitMsg = ""; EditorPrefs.SetString("WSGitHub.commitMsg", _commitMsg);
                RefreshStatus();
            }
        }

        void CommitAndPush()
        {
            CommitOnly();
            Push();
        }

        void Push()
        {
            PushDefault();
        }

        void Pull()
        {
            var remote = "origin";
            var branch = string.IsNullOrEmpty(_branch) ? "main" : _branch;
            AppendLog($"$ git pull {remote} {branch}");
            if (!RunGit($"pull {remote} {branch}", out var so, out var se)) AppendLog(se);
            else AppendLog(so);
            RefreshStatus();
        }

        void LogLast50()
        {
            if (!RunGit("log --oneline -n 50", out var so, out var se)) AppendLog(se);
            else AppendLog(so);
        }

        void CreateTag(string tag)
        {
            if (!RunGit($"tag {tag}", out var so, out var se)) AppendLog(se);
            else AppendLog($"Created tag {tag}");
        }

        void CreateAndCheckout(string newBranch)
        {
            newBranch = newBranch.Trim();
            if (string.IsNullOrEmpty(newBranch)) return;
            if (!RunGit($"checkout -b {newBranch}", out var so, out var se)) AppendLog(se);
            else { AppendLog(so); _branch = newBranch; }
        }

        void ShowBranchPopup()
        {
            if (!RunGit(@"for-each-ref --format=""%(refname:short)"" refs/heads", out var so, out var se))
            {
                AppendLog(se); return;
            }
            var list = so.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
            var menu = new GenericMenu();
            foreach (var b in list)
            {
                var bb = b.Trim();
                menu.AddItem(new GUIContent(bb), bb == _branch, () => SafeAction(() => Checkout(bb)));
            }
            menu.DropDown(new Rect(Event.current.mousePosition, new Vector2(1, 1)));
        }

        void Checkout(string b)
        {
            if (!RunGit($"checkout {b}", out var so, out var se)) AppendLog(se);
            else { AppendLog(so); _branch = b; RefreshStatus(); }
        }

        void SetOriginRemote()
        {
            if (string.IsNullOrWhiteSpace(_originUrl))
            {
                AppendLog("[WARN] origin URL empty.");
                return;
            }

            if (!RunGit("remote", out var so, out var se)) { AppendLog(se); return; }
            if (so.Split('\n').Any(x => x.Trim() == "origin"))
            {
                RunGit($"remote set-url origin \"{_originUrl}\"", out var so2, out var se2);
                AppendLog($"Set origin ? {_originUrl}");
            }
            else
            {
                RunGit($"remote add origin \"{_originUrl}\"", out var so3, out var se3);
                AppendLog($"Added origin ? {_originUrl}");
            }
        }

        void SetMirrorRemote()
        {
            if (string.IsNullOrWhiteSpace(_mirrorUrl))
            {
                AppendLog("[WARN] mirror URL empty.");
                return;
            }
            // Use a simple "mirror" remote (not --mirror push by default to be safer)
            if (!RunGit("remote", out var so, out var se)) { AppendLog(se); return; }
            if (so.Split('\n').Any(x => x.Trim() == "mirror"))
                RunGit($"remote set-url mirror \"{_mirrorUrl}\"", out var so2, out var se2);
            else
                RunGit($"remote add mirror \"{_mirrorUrl}\"", out var so3, out var se3);

            AppendLog($"Mirror set ? {_mirrorUrl}");
        }

        void PushMirror()
        {
            if (string.IsNullOrWhiteSpace(_mirrorUrl))
            {
                AppendLog("[WARN] mirror URL not set.");
                return;
            }
            // Safer default: normal push (not --mirror). Change to --mirror if you truly want a forced 1:1 mirror.
            var b = string.IsNullOrEmpty(_branch) ? "main" : _branch;
            if (!RunGit($"push mirror {b}", out var so, out var se)) AppendLog(se);
            else AppendLog(so);
        }

        void FetchRemote(string name)
        {
            if (!RunGit($"fetch {name}", out var so, out var se)) AppendLog(se);
            else AppendLog(so);
        }

        void FixLineEndings(bool windowsStyle = true)
        {
            // Prefer .gitattributes; this is a safety net.
            var cfg = windowsStyle ? "true" : "input";
            if (!RunGit($"config core.autocrlf {cfg}", out var so, out var se))
                AppendLog("Failed to set core.autocrlf: " + se);
            else
                AppendLog("Set core.autocrlf=" + cfg + (string.IsNullOrWhiteSpace(so) ? "" : " | " + so.Trim()));
        }

        //void ConfigVsCodeDiffMerge()
        //{
        //    // Scope to this repo
        //    RunGit("config --local diff.tool vscode", out _, out _);

        //    // difftool: code --wait --diff "$LOCAL" "$REMOTE"
        //    var diffCmd = "config --local difftool.vscode.cmd \"code --wait --diff \\\"$LOCAL\\\" \\\"$REMOTE\\\"\"";
        //    RunGit(diffCmd, out _, out _);

        //    // mergetool: code --wait "$MERGED"
        //    RunGit("config --local merge.tool vscode", out _, out _);
        //    var mergeCmd = "config --local mergetool.vscode.cmd \"code --wait \\\"$MERGED\\\"\"";
        //    RunGit(mergeCmd, out _, out _);

        //    AppendLog("Configured VS Code as diff/merge tool for this repo.");
        //}





        void WriteGitattributes()
        {
            var path = Path.Combine(_repoRoot, ".gitattributes");
            var content = string.Join("\n", new[]{
                "# Normalize text files for cross-platform dev",
                "* text=auto",
                "",
                "# Unity YAML / text assets should remain LF",
                "*.cs text eol=lf",
                "*.shader text eol=lf",
                "*.compute text eol=lf",
                "*.cginc text eol=lf",
                "*.hlsl text eol=lf",
                "*.json text eol=lf",
                "*.xml text eol=lf",
                "*.yaml text eol=lf",
                "*.yml text eol=lf",
                "*.asmdef text eol=lf",
                "*.asset text eol=lf",
                "*.meta text eol=lf",
                "*.prefab text eol=lf",
                "*.unity text eol=lf",
                "",
                "# Binary assets",
                "*.png binary",
                "*.jpg binary",
                "*.jpeg binary",
                "*.tga binary",
                "*.psd binary",
                "*.fbx binary",
                "*.wav binary",
                "*.mp3 binary",
                "*.ogg binary"
            });
            File.WriteAllText(path, content, new UTF8Encoding(false));
            AppendLog("Wrote .gitattributes");

            // Stage and commit quickly (optional convenience)
            RunGit("add .gitattributes", out var so, out var se);
            RunGit(@"commit -m ""chore: add .gitattributes""", out so, out se);
        }

        void WriteGitignoreIfMissing()
        {
            var p = Path.Combine(_repoRoot, ".gitignore");
            if (File.Exists(p)) return;
            var content = string.Join("\n", new[]{
                "Library/",
                "Temp/",
                "Obj/",
                "Build/",
                "Builds/",
                "Logs/",
                "UserSettings/",
                "MemoryCaptures/",
                "*.csproj",
                "*.sln",
                "*.user",
                ".idea/",
                ".vs/",
                ".vscode/",
                ".DS_Store",
                "Thumbs.db"
            });
            File.WriteAllText(p, content, new UTF8Encoding(false));
            AppendLog("Wrote .gitignore (Unity slim).");
            RunGit("add .gitignore", out var so, out var se);
            RunGit(@"commit -m ""chore: add .gitignore""", out so, out se);
        }

        // --------- Shell helpers ----------
        void AppendLog(string msg)
        {
            if (string.IsNullOrEmpty(msg)) return;
            _log.AppendLine(msg);
            Repaint();
        }

        static string EscapeQuotes(string s) => s?.Replace("\"", "\\\"") ?? "";

        bool RunGit(string args, out string stdout, out string stderr, int timeoutMs = DefaultTimeoutMs)
        {
            stdout = ""; stderr = "";
            if (string.IsNullOrEmpty(_repoRoot)) { stderr = "Repo root not set."; return false; }

            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "git",
                    Arguments = args,
                    WorkingDirectory = _repoRoot,
                    CreateNoWindow = true,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    StandardOutputEncoding = Encoding.UTF8,
                    StandardErrorEncoding = Encoding.UTF8
                };
                using var p = new Process { StartInfo = psi };
                var so = new StringBuilder();
                var se = new StringBuilder();
                p.OutputDataReceived += (_, e) => { if (e.Data != null) so.AppendLine(e.Data); };
                p.ErrorDataReceived += (_, e) => { if (e.Data != null) se.AppendLine(e.Data); };

                p.Start();
                p.BeginOutputReadLine();
                p.BeginErrorReadLine();

                if (!p.WaitForExit(timeoutMs))
                {
                    try { p.Kill(); } catch { }
                    se.AppendLine("timed out after " + timeoutMs + " ms");
                }

                stdout = so.ToString();
                stderr = se.ToString();

                // Echo command + result to UI log (shorten noisy outputs)
                var head = args.Length > 160 ? args.Substring(0, 160) + "…" : args;
                AppendLog("$ git " + head);
                if (!string.IsNullOrEmpty(stdout)) AppendLog(Clamp(stdout, 4000));
                if (!string.IsNullOrEmpty(stderr)) AppendLog(Clamp(stderr, 4000));

                return p.ExitCode == 0; // success even if stderr had warnings/progress
            }
            catch (Exception e)
            {
                stderr = e.Message;
                AppendLog("[EXC] " + e.Message);
                return false;
            }
        }


        static string Clamp(string s, int max) => s.Length <= max ? s : s.Substring(0, max) + "\n…(truncated)…";

        static bool HasGitInPath(out string version)
        {
            version = "";
            try
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "git",
                    Arguments = "--version",
                    CreateNoWindow = true,
                    UseShellExecute = false,
                    RedirectStandardOutput = true
                };
                using var p = Process.Start(psi);
                version = p.StandardOutput.ReadToEnd().Trim();
                p.WaitForExit(2000);
                return p.ExitCode == 0 && version.StartsWith("git version");
            }
            catch { return false; }
        }

        static string GuessGitBash()
        {
            // Common default Git for Windows path. We avoid registry for simplicity.
            var p1 = @"C:\Program Files\Git\git-bash.exe";
            var p2 = @"C:\Program Files (x86)\Git\git-bash.exe";
            if (File.Exists(p1)) return p1;
            if (File.Exists(p2)) return p2;
            return null;
        }
    }
}
#endif


// ============================================
// FILE: \Assets\_Project\Code\Editor\Tools\QuickAccessMenu.cs
// ============================================

using UnityEngine;
using UnityEditor;
using UnityEditor.SceneManagement;

namespace WildSurvival.Editor
{
    public static class QuickAccessMenu
    {
        [MenuItem("Wild Survival/Play Game %&p")]
        public static void PlayGame()
        {
            EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
            EditorSceneManager.OpenScene("Assets/_Project/Scenes/Core/_Bootstrap.unity");
            EditorApplication.isPlaying = true;
        }
    }
}


// ============================================
// FILE: \Assets\_Project\Code\Runtime\Core\GameManager.cs
// ============================================

using UnityEngine;
using System;

namespace WildSurvival.Core
{
    public class GameManager : MonoBehaviour
    {
        private static GameManager _instance;
        public static GameManager Instance => _instance;

        private void Awake()
        {
            if (_instance == null)
            {
                _instance = this;
                DontDestroyOnLoad(gameObject);
                Initialize();
            }
            else if (_instance != this)
            {
                Destroy(gameObject);
            }
        }

        private void Initialize()
        {
            Debug.Log("Game Manager Initialized");
        }
    }
}


// ============================================
// FILE: \Assets\_Project\Code\Runtime\Core\ServiceLocator.cs
// ============================================

using System;
using System.Collections.Generic;
using UnityEngine;

namespace WildSurvival.Core
{
    public static class ServiceLocator
    {
        private static Dictionary<Type, object> services = new Dictionary<Type, object>();

        public static void Register<T>(T service) where T : class
        {
            var type = typeof(T);
            if (!services.ContainsKey(type))
            {
                services[type] = service;
                Debug.Log($"Service registered: {type.Name}");
            }
        }

        public static T Get<T>() where T : class
        {
            var type = typeof(T);
            if (services.TryGetValue(type, out var service))
            {
                return service as T;
            }
            Debug.LogError($"Service not found: {type.Name}");
            return null;
        }
    }
}


// ============================================
// FILE: \Assets\_Project\Code\Runtime\Systems\Inventory\InventoryManager.cs
// ============================================

//using System;
//using System.Collections.Generic;
//using System.Linq;
//using UnityEngine;
//using WildSurvival.Data;

//namespace WildSurvival.Systems.Inventory
//{
//    public class InventoryManager : MonoBehaviour
//    {
//        [Header("Database References")]
//        [SerializeField] private ItemDatabase itemDatabase;
//        [SerializeField] private RecipeDatabase recipeDatabase;

//        [Header("Configuration")]
//        [SerializeField] private Vector2Int gridSize = new Vector2Int(10, 6);
//        [SerializeField] private float maxWeight = 50f;

//        // Runtime data
//        private GridCell[,] grid;
//        private List<ItemInstance> items;
//        private float currentWeight;

//        // Singleton pattern for easy access
//        private static InventoryManager _instance;
//        public static InventoryManager Instance
//        {
//            get
//            {
//                if (_instance == null)
//                {
//                    _instance = FindObjectOfType<InventoryManager>();
//                    if (_instance == null)
//                    {
//                        GameObject go = new GameObject("InventoryManager");
//                        _instance = go.AddComponent<InventoryManager>();
//                    }
//                }
//                return _instance;
//            }
//        }

//        private void Awake()
//        {
//            if (_instance == null)
//            {
//                _instance = this;
//                DontDestroyOnLoad(gameObject);
//                Initialize();
//            }
//            else if (_instance != this)
//            {
//                Destroy(gameObject);
//            }
//        }

//        private void Initialize()
//        {
//            // Load databases
//            if (itemDatabase == null)
//            {
//                itemDatabase = Resources.Load<ItemDatabase>("ItemDatabase");
//                if (itemDatabase == null)
//                {
//                    // Try loading from specific path
//                    itemDatabase = UnityEditor.AssetDatabase.LoadAssetAtPath<ItemDatabase>(
//                        "Assets/_Project/Data/ItemDatabase.asset");
//                }
//            }

//            if (recipeDatabase == null)
//            {
//                recipeDatabase = Resources.Load<RecipeDatabase>("RecipeDatabase");
//                if (recipeDatabase == null)
//                {
//                    recipeDatabase = UnityEditor.AssetDatabase.LoadAssetAtPath<RecipeDatabase>(
//                        "Assets/_Project/Data/RecipeDatabase.asset");
//                }
//            }

//            // Initialize grid
//            grid = new GridCell[gridSize.x, gridSize.y];
//            for (int x = 0; x < gridSize.x; x++)
//            {
//                for (int y = 0; y < gridSize.y; y++)
//                {
//                    grid[x, y] = new GridCell(x, y);
//                }
//            }

//            items = new List<ItemInstance>();
//            currentWeight = 0f;

//            Debug.Log($"? Inventory initialized: {gridSize.x}x{gridSize.y} grid, {maxWeight}kg max weight");
//        }

//        // === CORE METHODS ===

//        public bool TryAddItem(string itemID, int quantity = 1)
//        {
//            if (itemDatabase == null)
//            {
//                Debug.LogError("ItemDatabase not loaded!");
//                return false;
//            }

//            var itemDef = itemDatabase.GetItem(itemID);
//            if (itemDef == null)
//            {
//                Debug.LogError($"Item '{itemID}' not found in database!");
//                return false;
//            }

//            // Check weight
//            float newWeight = currentWeight + (itemDef.weight * quantity);
//            if (newWeight > maxWeight)
//            {
//                Debug.LogWarning($"Too heavy! Current: {currentWeight}kg, Item would add: {itemDef.weight * quantity}kg");
//                return false;
//            }

//            // Try to stack with existing items
//            if (itemDef.stackable)
//            {
//                foreach (var existingItem in items.Where(i => i.itemID == itemID))
//                {
//                    int spaceInStack = itemDef.maxStackSize - existingItem.stackSize;
//                    if (spaceInStack > 0)
//                    {
//                        int toAdd = Mathf.Min(spaceInStack, quantity);
//                        existingItem.stackSize += toAdd;
//                        quantity -= toAdd;
//                        currentWeight += itemDef.weight * toAdd;

//                        Debug.Log($"? Stacked {toAdd}x {itemDef.displayName} (total: {existingItem.stackSize})");

//                        if (quantity <= 0)
//                        {
//                            OnInventoryChanged?.Invoke();
//                            return true;
//                        }
//                    }
//                }
//            }

//            // Find empty space for new item
//            var emptySpot = FindEmptySpace(itemDef.gridSize);
//            if (emptySpot.HasValue)
//            {
//                var newItem = new ItemInstance(itemDef)
//                {
//                    gridPosition = emptySpot.Value,
//                    stackSize = Mathf.Min(quantity, itemDef.maxStackSize)
//                };

//                PlaceItem(newItem);
//                currentWeight += itemDef.weight * newItem.stackSize;

//                Debug.Log($"? Added {newItem.stackSize}x {itemDef.displayName} at position {emptySpot.Value}");

//                OnInventoryChanged?.Invoke();
//                return true;
//            }

//            Debug.LogWarning($"No space for {itemDef.displayName}!");
//            return false;
//        }

//        private Vector2Int? FindEmptySpace(Vector2Int size)
//        {
//            for (int y = 0; y <= gridSize.y - size.y; y++)
//            {
//                for (int x = 0; x <= gridSize.x - size.x; x++)
//                {
//                    if (CanPlaceAt(x, y, size))
//                    {
//                        return new Vector2Int(x, y);
//                    }
//                }
//            }
//            return null;
//        }

//        private bool CanPlaceAt(int x, int y, Vector2Int size)
//        {
//            for (int dy = 0; dy < size.y; dy++)
//            {
//                for (int dx = 0; dx < size.x; dx++)
//                {
//                    if (grid[x + dx, y + dy].isOccupied)
//                        return false;
//                }
//            }
//            return true;
//        }

//        private void PlaceItem(ItemInstance item)
//        {
//            items.Add(item);

//            // Mark grid cells as occupied
//            for (int dy = 0; dy < item.definition.gridSize.y; dy++)
//            {
//                for (int dx = 0; dx < item.definition.gridSize.x; dx++)
//                {
//                    grid[item.gridPosition.x + dx, item.gridPosition.y + dy].isOccupied = true;
//                    grid[item.gridPosition.x + dx, item.gridPosition.y + dy].item = item;
//                }
//            }
//        }

//        public bool HasItem(string itemID, int quantity = 1)
//        {
//            int total = items.Where(i => i.itemID == itemID).Sum(i => i.stackSize);
//            return total >= quantity;
//        }

//        public void RemoveItem(string itemID, int quantity = 1)
//        {
//            int remaining = quantity;
//            var itemsToRemove = new List<ItemInstance>();

//            foreach (var item in items.Where(i => i.itemID == itemID))
//            {
//                if (item.stackSize <= remaining)
//                {
//                    remaining -= item.stackSize;
//                    itemsToRemove.Add(item);

//                    // Clear grid cells
//                    for (int dy = 0; dy < item.definition.gridSize.y; dy++)
//                    {
//                        for (int dx = 0; dx < item.definition.gridSize.x; dx++)
//                        {
//                            grid[item.gridPosition.x + dx, item.gridPosition.y + dy].isOccupied = false;
//                            grid[item.gridPosition.x + dx, item.gridPosition.y + dy].item = null;
//                        }
//                    }
//                }
//                else
//                {
//                    item.stackSize -= remaining;
//                    remaining = 0;
//                }

//                if (remaining <= 0) break;
//            }

//            foreach (var item in itemsToRemove)
//            {
//                items.Remove(item);
//                currentWeight -= item.definition.weight * item.stackSize;
//            }

//            OnInventoryChanged?.Invoke();
//        }

//        // === CRAFTING INTEGRATION ===

//        public bool CanCraft(string recipeID)
//        {
//            if (recipeDatabase == null) return false;

//            var recipe = recipeDatabase.GetRecipe(recipeID);
//            if (recipe == null) return false;

//            // Check ingredients
//            foreach (var ingredient in recipe.ingredients)
//            {
//                if (ingredient.specificItem != null)
//                {
//                    if (!HasItem(ingredient.specificItem.itemID, ingredient.quantity))
//                        return false;
//                }
//            }

//            return true;
//        }

//        public void CraftItem(string recipeID)
//        {
//            if (!CanCraft(recipeID)) return;

//            var recipe = recipeDatabase.GetRecipe(recipeID);

//            // Consume ingredients
//            foreach (var ingredient in recipe.ingredients)
//            {
//                if (ingredient.consumed && ingredient.specificItem != null)
//                {
//                    RemoveItem(ingredient.specificItem.itemID, ingredient.quantity);
//                }
//            }

//            // Add outputs
//            foreach (var output in recipe.outputs)
//            {
//                if (output.item != null)
//                {
//                    int quantity = UnityEngine.Random.Range(output.quantityMin, output.quantityMax + 1);
//                    TryAddItem(output.item.itemID, quantity);
//                }
//            }

//            Debug.Log($"? Crafted: {recipe.recipeName}");
//            OnItemCrafted?.Invoke(recipe);
//        }

//        // === EVENTS ===
//        public event Action OnInventoryChanged;
//        public event Action<RecipeDefinition> OnItemCrafted;

//        // === HELPERS ===

//        [Serializable]
//        private class GridCell
//        {
//            public int x, y;
//            public bool isOccupied;
//            public ItemInstance item;

//            public GridCell(int x, int y)
//            {
//                this.x = x;
//                this.y = y;
//                this.isOccupied = false;
//                this.item = null;
//            }
//        }

//        public List<ItemInstance> GetAllItems() => new List<ItemInstance>(items);
//        public float GetCurrentWeight() => currentWeight;
//        public float GetMaxWeight() => maxWeight;
//        public Vector2Int GetGridSize() => gridSize;
//    }
//}


// ============================================
// FILE: \Assets\_Project\helloWorld.cs
// ============================================

using UnityEngine;

public class helloWorld : MonoBehaviour
{
    // Start is called once before the first execution of Update after the MonoBehaviour is created
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
