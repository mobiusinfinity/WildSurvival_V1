using UnityEditor;
using UnityEngine;
using WildSurvival.Editor.Collab;
using SurvivalCore.Config;
using SurvivalCore.Editor;

namespace WildSurvival.Editor
{
    public partial class WildSurvivalHubWindowV21 : EditorWindow
    {
        [MenuItem("WildSurvival/Hub (V2.1)")]
        public static void Open() => GetWindow<WildSurvivalHubWindowV21>("WildSurvival Hub V2.1");

        Vector2 _scroll;
        void OnGUI()
        {
            _scroll = EditorGUILayout.BeginScrollView(_scroll);
            try
            {
                GUILayout.Label("WildSurvival – Tools Hub (V2.1)", EditorStyles.boldLabel);
                GUILayout.Space(6);

                DrawSection("Setup", () =>
                {
                    if (GUILayout.Button("Export CB + Mirror (and Open)", GUILayout.Height(28)))
                    {
                        // This menu is provided by CollabAndMirrorExporterV1
                        EditorApplication.ExecuteMenuItem("WildSurvival/Logs/Export CB + Mirror (and Open)");
                    }

                    LinkButton("Setup Checklist", "WildSurvival/Tools (V2)/Setup Checklist");
                    LinkButton("Generate Sample Scene (HDRP)", "WildSurvival/Tools (V2)/Generate Sample Scene (HDRP)");
                    LinkButton("WorldTime ↔ Lighting Bootstrap", "WildSurvival/Tools (V2)/WorldTime ↔ Lighting Bootstrap");
                    LinkButton("Build Scenes Helper", "WildSurvival/Tools (V2)/Build Scenes Helper");
                    LinkButton("Scene Doctor (V2)", "WildSurvival/Tools (V2)/Scene Doctor");
                    LinkButton("Create Player Prefab (Starter)", "WildSurvival/Tools (V2)/Create Player Prefab (Starter)");
                    LinkButton("Player Prefab Doctor (V2)", "WildSurvival/Tools (V2)/Player Prefab Doctor");
                    LinkButton("Input Smoke Test", "WildSurvival/Tools (V2)/Input Smoke Test");
                    LinkButton("Project Validator (V2)", "WildSurvival/Tools (V2)/Project Validator");
                });

                DrawSection("Collab / Export", () =>
                {
                    LinkButton("Write Project Snapshot", "WildSurvival/Tools (V2.1)/Write Project Snapshot");
                    LinkButton("Create Session Notes", "WildSurvival/Tools (V2.1)/Create Session Notes");
                    LinkButton("Quick Export & Open Bundle", "WildSurvival/Tools (V2.1)/Quick Export & Open Bundle");
                    LinkButton("Open Logs Folder", "WildSurvival/Tools (V2.1)/Open Logs Folder");
                    LinkButton("Open Latest Collaboration Bundle", "WildSurvival/Tools (V2.1)/Open Latest Collaboration Bundle");
                });

                DrawSection("Build", () =>
                {
                    LinkButton("Playtest Builder (Windows)", "WildSurvival/Tools (V2)/Playtest Builder (Windows)");
                });

                EditorGUILayout.HelpBox("Hub V2.1 logs every action to Assets/WildSurvival/Logs/ (JSONL + CSV).", MessageType.Info);
            }
            finally
            {
                EditorGUILayout.EndScrollView();
            }
        }

        static void EnsureGameConfig()
        {
            var guid = AssetDatabase.FindAssets("t:GameConfig");
            if (guid != null && guid.Length > 0) return;
            EditorAssetUtils.EnsureFolder("Assets/Resources");
            var cfg = ScriptableObject.CreateInstance<GameConfig>();
            AssetDatabase.CreateAsset(cfg, "Assets/Resources/GameConfig.asset");
            Selection.activeObject = cfg;
            UnityEngine.Debug.Log("[Hub V2.1] Fallback created Resources/GameConfig.asset");
        }

        void DrawSection(string title, System.Action draw)
        {
            GUILayout.Space(8);
            GUILayout.Label(title, EditorStyles.largeLabel);
            EditorGUI.indentLevel++;
            draw?.Invoke();
            EditorGUI.indentLevel--;
        }

        void LinkButton(string label, string menuPath)
        {
            if (GUILayout.Button(label, GUILayout.Height(22)))
            {
                EditorApplication.ExecuteMenuItem(menuPath);
            }
        }
    }
}
